name: Run tests for DJ

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    env:
      PDM_DEPS: 'urllib3<2'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        library: ['client', 'server', 'djqs', 'djrs']

    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          prerelease: true
          enable-pep582: true

      - name: Install dependencies
        run: |
          pdm sync -d
          export tests_dir=${{ matrix.library == 'server' && './datajunction-server' || matrix.library == 'client' && './client/python' || matrix.library == 'djqs' && './datajunction-query' || matrix.library == 'djrs' && './datajunction-reflection'}}
          cd $tests_dir; pdm install -d -G pandas

      - uses: pre-commit/action@v3.0.0
        name: Force check of all pdm.lock files
        with:
          extra_args: pdm-lock-check --all-files

      - name: Python Linters
        run: |
          export tests_dir=${{ matrix.library == 'server' && './datajunction-server' || matrix.library == 'client' && './client/python' || matrix.library == 'djqs' && './datajunction-query' || matrix.library == 'djrs' && './datajunction-reflection'}}
          cd $tests_dir; pdm run pre-commit run --all-files

      - name: Test DJ ${{ matrix.library }} with pytest
        run: |
          export module=${{ matrix.library == 'server' && 'datajunction_server' || matrix.library == 'client' && 'datajunction' || matrix.library == 'djqs' && 'djqs' || matrix.library == 'djrs' && 'datajunction_reflection'}}
          export tests_dir=${{ matrix.library == 'server' && './datajunction-server' || matrix.library == 'client' && './client/python' || matrix.library == 'djqs' && './datajunction-query' || matrix.library == 'djrs' && './datajunction-reflection'}}
          cd $tests_dir; pdm run pytest ${{ matrix.library == 'server' && '-n auto' || '' }} --cov-fail-under=100 --cov=$module -vv tests/ --doctest-modules $module --without-integration --without-slow-integration

  build-javascript:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dev Dependencies
        run: npm install --only=dev
        working-directory: ./client/javascript
      - name: Build Javascript Client
        run: npm run build
        working-directory: ./client/javascript
      - name: Lint Javascript Client
        run: npm run lint
        working-directory: ./client/javascript

  build-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./datajunction-ui
    strategy:
      matrix:
        node-version: [19.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Run Unit Tests
        run: yarn test
      - name: Build Project
        run: yarn webpack-build

  build-java:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client/java
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Official Gradle Wrapper Validation Action
        uses: gradle/wrapper-validation-action@v1
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          build-root-directory: ./client/java