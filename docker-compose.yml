networks:
  core:
    driver: bridge
  djqs-network:
    driver: bridge
  djrs-network:
    driver: bridge

services:
  dj:
    container_name: dj
    stdin_open: true
    tty: true
    networks:
      - core
    environment:
      - DOTENV_FILE=${DOTENV_FILE:-/code/.env}
      - OAUTHLIB_INSECURE_TRANSPORT=1
    build:
      context: ./datajunction-server
      args:
        RELOAD: "--reload"
    volumes:
      - ./datajunction-server:/code
    ports:
      - "8000:8000"
    depends_on:
      - db-migration
      - postgres_metadata
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  dj-seed:
    image: python:3.11-slim
    container_name: dj-seed
    profiles: ["demo"]
    depends_on:
      - dj
    networks:
      - core
    working_dir: /dj-seed
    volumes:
      - ./datajunction-clients/python:/dj-seed
    command: >
      /bin/bash -c "
      pip install -e . && python seed/init_system_nodes.py
      "

  postgres_metadata:
    container_name: postgres_metadata
    image: postgres:latest
    shm_size: 1g
    networks:
      - core
    hostname: postgres_metadata
    entrypoint: >
      sh -c "docker-entrypoint.sh postgres &
            echo 'Waiting for Postgres...';
            until pg_isready -h localhost -U dj; do sleep 1; done;
            echo 'Creating readonly user...';
            /docker-entrypoint-initdb.d/create-readonly-user.sh;
            echo 'Creating database for DJQS...';
            psql -U dj -c 'CREATE DATABASE djqs';
            wait"
    volumes:
      - ./postgres_metadata:/var/lib/postgresql/data
      - ./db-init/create-readonly-user.sh:/docker-entrypoint-initdb.d/create-readonly-user.sh
    environment:
      - POSTGRES_PASSWORD=dj
      - POSTGRES_USER=dj
      - POSTGRES_DB=dj
      - PGUSER=dj
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  djui:
    container_name: djui
    image: node:19
    working_dir: /usr/src/app
    ports:
      - "3000:3000"
    stdin_open: true
    volumes:
      - ./datajunction-ui:/usr/src/app/
      - ./datajunction-ui/node_modules:/usr/src/app/node_modules
    command: sh -c "yarn && yarn webpack-build && yarn webpack-start --host 0.0.0.0 --port 3000"

  djqs:
    container_name: djqs
    profiles: ["demo"]
    stdin_open: true
    tty: true
    networks:
      - core
      - djqs-network
    build:
      context: ./datajunction-query
    volumes:
      - ./datajunction-query:/code
    ports:
      - "8001:8001"
    depends_on:
      - djqs-db-migration
      - postgres_metadata

  db-migration:
    container_name: db-migration
    networks:
      - core
    build:
      context: ./datajunction-server
    volumes:
      - ./datajunction-server:/code
    working_dir: /code/datajunction_server
    command: /bin/bash -c "alembic -x uri="postgresql+psycopg://dj:dj@postgres_metadata:5432/dj" upgrade head"
    restart: on-failure
    depends_on:
      postgres_metadata:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  db-seed:
    container_name: db-seed
    networks:
      - core
    image: postgres:latest
    depends_on:
      db-migration:
        condition: service_completed_successfully
    environment:
      - PGPASSWORD=dj
    volumes:
      - ./db-init:/db-init
    command: >
      /bin/bash -c "
      psql -h postgres_metadata -U dj -d dj -f /db-init/create-dj-user.sql
      "

  djqs-db-migration:
    container_name: djqs-db-migration
    profiles: ["demo"]
    networks:
      - core
      - djqs-network
    build:
      context: ./datajunction-query
    volumes:
      - ./datajunction-query:/code
    command: /bin/bash -c "alembic -x uri="postgresql+psycopg://dj:dj@postgres_metadata:5432/djqs" upgrade head"
    restart: on-failure
    depends_on:
      postgres_metadata:
        condition: service_healthy

  djrs-redis:
    container_name: djrs-redis
    profiles: ["demo"]
    image: redis:6-alpine
    ports:
      - "6379:6379"
    networks:
      - djrs-network

  djrs-worker:
    container_name: djrs-worker
    profiles: ["demo"]
    build:
      context: ./datajunction-reflection
    command: ["celery", "-A", "datajunction_reflection.worker.app", "worker", "--loglevel", "INFO"]
    networks:
      - core
      - djrs-network
    volumes:
      - ./datajunction-reflection:/code
    depends_on:
      - djrs-redis
      - dj

  djrs-beat:
    container_name: djrs-beat
    profiles: ["demo"]
    build:
      context: ./datajunction-reflection
    command:
      ["celery", "--app", "datajunction_reflection.worker.app", "beat", "--loglevel", "INFO"]
    networks:
      - djrs-network
    depends_on:
      - djrs-redis
      - dj
    restart: "no"
    volumes:
      - ./datajunction-reflection:/code

  jupyter-notebook:
    image: jupyter/scipy-notebook
    container_name: jupyter
    profiles: ["demo"]
    networks:
      - core
    ports:
      - "8181:8888"
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./datajunction-clients/python:/home/jovyan/notebooks/djclient
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    depends_on:
      dj:
        condition: service_healthy
    command: >
      /bin/bash -c "
      pip install --no-cache-dir -e /home/jovyan/notebooks/djclient && \
      if [ ! -f /home/jovyan/notebooks/.notebook_executed ]; then \
        jupyter execute '/home/jovyan/notebooks/Modeling the Roads Example Database.ipynb' && \
        touch /home/jovyan/notebooks/.notebook_executed; \
      fi && \
      start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
      "

  dj-trino:
    container_name: dj-trino
    profiles: ["demo"]
    image: 'trinodb/trino:latest'
    hostname: trino-coordinator
    ports:
      - '8080:8080'
    networks:
      - djqs-network

  superset:
    image: apache/superset:latest
    restart: always
    depends_on:
      - superset-db
      - superset-redis
    environment:
      - SUPERSET_SECRET_KEY=your_secret_key_here
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@datajunction.io
      - ADMIN_PASSWORD=admin
    ports:
      - "8088:8088"
    volumes:
      - ./superset_home:/app/superset_home
    profiles: ["superset"]

  superset-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: superset
      POSTGRES_PASSWORD: superset
      POSTGRES_USER: superset
    volumes:
      - ./postgres_superset:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    profiles: ["superset"]

  superset-init:
    image: apache/superset:latest
    depends_on:
      - superset-db
      - superset-redis
    command: >
      bash -c "pip install psycopg2-binary &&
              superset db upgrade &&
              superset fab create-admin --username admin --firstname DataJunction --lastname Admin --email admin@datajunction.io --password admin &&
              superset init"
    environment:
      - SUPERSET_SECRET_KEY=your_secret_key_here
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@datajunction.io
      - ADMIN_PASSWORD=admin
    volumes:
      - ./superset_home:/app/superset_home
    profiles: ["superset"]

  superset-redis:
    image: redis:7
    container_name: superset-redis
    restart: always
    profiles: ["superset"]
