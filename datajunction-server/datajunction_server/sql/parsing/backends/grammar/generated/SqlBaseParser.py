# Generated from SqlBaseParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,344,3562,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,1,0,1,0,5,0,349,8,0,10,0,12,
        0,352,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,3,7,376,8,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,389,8,7,1,7,1,7,1,7,1,7,1,7,3,7,396,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,404,8,7,10,7,12,7,407,9,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,426,8,7,1,7,1,7,3,7,430,8,7,1,7,1,7,1,7,1,7,3,7,436,8,7,1,7,3,
        7,439,8,7,1,7,3,7,442,8,7,1,7,1,7,1,7,1,7,1,7,3,7,449,8,7,1,7,3,
        7,452,8,7,1,7,1,7,3,7,456,8,7,1,7,3,7,459,8,7,1,7,1,7,1,7,1,7,1,
        7,3,7,466,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,477,8,7,10,
        7,12,7,480,9,7,1,7,1,7,1,7,1,7,1,7,3,7,487,8,7,1,7,3,7,490,8,7,1,
        7,1,7,3,7,494,8,7,1,7,3,7,497,8,7,1,7,1,7,1,7,1,7,3,7,503,8,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,514,8,7,1,7,1,7,1,7,1,7,3,
        7,520,8,7,1,7,1,7,1,7,3,7,525,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,559,8,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,572,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,597,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,606,8,7,1,7,1,7,3,
        7,610,8,7,1,7,1,7,1,7,1,7,3,7,616,8,7,1,7,1,7,3,7,620,8,7,1,7,1,
        7,1,7,3,7,625,8,7,1,7,1,7,1,7,1,7,3,7,631,8,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,643,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,651,
        8,7,1,7,1,7,1,7,1,7,3,7,657,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,3,7,670,8,7,1,7,4,7,673,8,7,11,7,12,7,674,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,691,8,7,1,7,1,
        7,1,7,5,7,696,8,7,10,7,12,7,699,9,7,1,7,3,7,702,8,7,1,7,1,7,1,7,
        1,7,3,7,708,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,3,7,723,8,7,1,7,1,7,3,7,727,8,7,1,7,1,7,1,7,1,7,3,7,733,8,7,
        1,7,1,7,1,7,1,7,3,7,739,8,7,1,7,3,7,742,8,7,1,7,3,7,745,8,7,1,7,
        1,7,1,7,1,7,3,7,751,8,7,1,7,1,7,3,7,755,8,7,1,7,1,7,1,7,1,7,1,7,
        1,7,5,7,763,8,7,10,7,12,7,766,9,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,774,
        8,7,1,7,3,7,777,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,786,8,7,1,7,
        1,7,1,7,3,7,791,8,7,1,7,1,7,1,7,1,7,3,7,797,8,7,1,7,1,7,1,7,1,7,
        1,7,3,7,804,8,7,1,7,3,7,807,8,7,1,7,1,7,1,7,1,7,3,7,813,8,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,5,7,822,8,7,10,7,12,7,825,9,7,3,7,827,8,
        7,1,7,1,7,3,7,831,8,7,1,7,1,7,1,7,3,7,836,8,7,1,7,1,7,1,7,3,7,841,
        8,7,1,7,1,7,1,7,1,7,1,7,3,7,848,8,7,1,7,3,7,851,8,7,1,7,3,7,854,
        8,7,1,7,1,7,1,7,1,7,1,7,3,7,861,8,7,1,7,1,7,1,7,3,7,866,8,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,3,7,875,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        883,8,7,1,7,1,7,1,7,1,7,3,7,889,8,7,1,7,3,7,892,8,7,1,7,3,7,895,
        8,7,1,7,1,7,1,7,1,7,3,7,901,8,7,1,7,1,7,3,7,905,8,7,1,7,1,7,1,7,
        3,7,910,8,7,1,7,3,7,913,8,7,1,7,1,7,3,7,917,8,7,3,7,919,8,7,1,7,
        1,7,1,7,1,7,1,7,1,7,3,7,927,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,935,
        8,7,1,7,3,7,938,8,7,1,7,1,7,1,7,3,7,943,8,7,1,7,1,7,1,7,1,7,3,7,
        949,8,7,1,7,1,7,1,7,1,7,3,7,955,8,7,1,7,3,7,958,8,7,1,7,1,7,3,7,
        962,8,7,1,7,3,7,965,8,7,1,7,1,7,3,7,969,8,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,5,7,995,8,7,10,7,12,7,998,9,7,3,7,1000,8,7,1,7,1,7,3,
        7,1004,8,7,1,7,1,7,1,7,1,7,3,7,1010,8,7,1,7,3,7,1013,8,7,1,7,3,7,
        1016,8,7,1,7,1,7,1,7,1,7,3,7,1022,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,1030,8,7,1,7,1,7,1,7,3,7,1035,8,7,1,7,1,7,1,7,1,7,3,7,1041,8,7,
        1,7,1,7,1,7,1,7,3,7,1047,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1055,8,
        7,1,7,1,7,1,7,5,7,1060,8,7,10,7,12,7,1063,9,7,1,7,1,7,1,7,5,7,1068,
        8,7,10,7,12,7,1071,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,5,7,1085,8,7,10,7,12,7,1088,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,5,7,1099,8,7,10,7,12,7,1102,9,7,3,7,1104,8,7,1,7,1,7,5,
        7,1108,8,7,10,7,12,7,1111,9,7,1,7,1,7,1,7,1,7,5,7,1117,8,7,10,7,
        12,7,1120,9,7,1,7,1,7,1,7,1,7,5,7,1126,8,7,10,7,12,7,1129,9,7,1,
        7,1,7,1,7,1,7,1,7,3,7,1136,8,7,1,7,1,7,1,7,3,7,1141,8,7,1,7,1,7,
        1,7,3,7,1146,8,7,1,7,1,7,1,7,1,7,1,7,3,7,1153,8,7,1,7,1,7,1,7,1,
        7,3,7,1159,8,7,1,7,1,7,1,7,3,7,1164,8,7,1,7,1,7,1,7,1,7,5,7,1170,
        8,7,10,7,12,7,1173,9,7,3,7,1175,8,7,1,8,1,8,3,8,1179,8,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1191,8,11,1,11,1,11,
        3,11,1195,8,11,1,11,1,11,1,11,1,11,1,11,3,11,1202,8,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1318,8,11,1,11,1,11,
        1,11,1,11,1,11,1,11,3,11,1326,8,11,1,11,1,11,1,11,1,11,1,11,1,11,
        3,11,1334,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1343,8,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1353,8,11,1,12,1,12,
        3,12,1357,8,12,1,12,3,12,1360,8,12,1,12,1,12,1,12,1,12,3,12,1366,
        8,12,1,12,1,12,1,13,1,13,3,13,1372,8,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,3,14,1384,8,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,3,15,1396,8,15,1,15,1,15,1,15,3,15,1401,
        8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,3,18,1410,8,18,1,18,1,18,
        1,18,1,19,1,19,1,19,3,19,1418,8,19,1,19,1,19,1,19,1,19,1,19,3,19,
        1425,8,19,3,19,1427,8,19,1,19,3,19,1430,8,19,1,19,1,19,1,19,3,19,
        1435,8,19,1,19,1,19,3,19,1439,8,19,1,19,1,19,1,19,3,19,1444,8,19,
        1,19,3,19,1447,8,19,1,19,1,19,1,19,3,19,1452,8,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,3,19,1461,8,19,1,19,1,19,1,19,3,19,1466,8,19,
        1,19,3,19,1469,8,19,1,19,1,19,1,19,3,19,1474,8,19,1,19,1,19,3,19,
        1478,8,19,1,19,1,19,1,19,3,19,1483,8,19,3,19,1485,8,19,1,20,1,20,
        3,20,1489,8,20,1,21,1,21,1,21,1,21,1,21,5,21,1496,8,21,10,21,12,
        21,1499,9,21,1,21,1,21,1,22,1,22,1,22,3,22,1506,8,22,1,22,1,22,1,
        22,1,22,3,22,1512,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,
        25,3,25,1523,8,25,1,26,1,26,1,26,5,26,1528,8,26,10,26,12,26,1531,
        9,26,1,27,1,27,1,27,1,27,5,27,1537,8,27,10,27,12,27,1540,9,27,1,
        28,1,28,3,28,1544,8,28,1,28,3,28,1547,8,28,1,28,1,28,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,5,30,1569,8,30,10,30,12,30,1572,9,30,1,31,1,31,1,31,
        1,31,5,31,1578,8,31,10,31,12,31,1581,9,31,1,31,1,31,1,32,1,32,3,
        32,1587,8,32,1,32,3,32,1590,8,32,1,33,1,33,1,33,5,33,1595,8,33,10,
        33,12,33,1598,9,33,1,33,3,33,1601,8,33,1,34,1,34,1,34,1,34,3,34,
        1607,8,34,1,35,1,35,1,35,1,35,5,35,1613,8,35,10,35,12,35,1616,9,
        35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,1624,8,36,10,36,12,36,1627,
        9,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1637,8,37,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,1645,8,38,1,39,1,39,1,39,1,39,3,39,
        1651,8,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,4,41,1661,8,41,
        11,41,12,41,1662,1,41,1,41,1,41,1,41,1,41,3,41,1670,8,41,1,41,1,
        41,1,41,1,41,1,41,3,41,1677,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,3,41,1689,8,41,1,41,1,41,1,41,1,41,5,41,1695,8,
        41,10,41,12,41,1698,9,41,1,41,5,41,1701,8,41,10,41,12,41,1704,9,
        41,1,41,5,41,1707,8,41,10,41,12,41,1710,9,41,3,41,1712,8,41,1,42,
        1,42,1,42,1,42,1,42,5,42,1719,8,42,10,42,12,42,1722,9,42,3,42,1724,
        8,42,1,42,1,42,1,42,1,42,1,42,5,42,1731,8,42,10,42,12,42,1734,9,
        42,3,42,1736,8,42,1,42,1,42,1,42,1,42,1,42,5,42,1743,8,42,10,42,
        12,42,1746,9,42,3,42,1748,8,42,1,42,1,42,1,42,1,42,1,42,5,42,1755,
        8,42,10,42,12,42,1758,9,42,3,42,1760,8,42,1,42,3,42,1763,8,42,1,
        42,1,42,1,42,3,42,1768,8,42,3,42,1770,8,42,1,42,1,42,3,42,1774,8,
        42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1786,8,
        44,1,44,1,44,1,44,1,44,1,44,3,44,1793,8,44,1,44,1,44,1,44,1,44,1,
        44,3,44,1800,8,44,1,44,5,44,1803,8,44,10,44,12,44,1806,9,44,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1817,8,45,1,46,1,46,
        3,46,1821,8,46,1,46,1,46,3,46,1825,8,46,1,47,1,47,4,47,1829,8,47,
        11,47,12,47,1830,1,48,1,48,3,48,1835,8,48,1,48,1,48,1,48,1,48,5,
        48,1841,8,48,10,48,12,48,1844,9,48,1,48,3,48,1847,8,48,1,48,3,48,
        1850,8,48,1,48,3,48,1853,8,48,1,48,3,48,1856,8,48,1,48,1,48,3,48,
        1860,8,48,1,49,1,49,3,49,1864,8,49,1,49,5,49,1867,8,49,10,49,12,
        49,1870,9,49,1,49,3,49,1873,8,49,1,49,3,49,1876,8,49,1,49,3,49,1879,
        8,49,1,49,3,49,1882,8,49,1,49,1,49,3,49,1886,8,49,1,49,5,49,1889,
        8,49,10,49,12,49,1892,9,49,1,49,3,49,1895,8,49,1,49,3,49,1898,8,
        49,1,49,3,49,1901,8,49,1,49,3,49,1904,8,49,3,49,1906,8,49,1,50,1,
        50,1,50,1,50,3,50,1912,8,50,1,50,1,50,1,50,1,50,1,50,3,50,1919,8,
        50,1,50,1,50,1,50,3,50,1924,8,50,1,50,3,50,1927,8,50,1,50,3,50,1930,
        8,50,1,50,1,50,3,50,1934,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,3,50,1944,8,50,1,50,1,50,3,50,1948,8,50,3,50,1950,8,50,1,50,
        3,50,1953,8,50,1,50,1,50,3,50,1957,8,50,1,51,1,51,5,51,1961,8,51,
        10,51,12,51,1964,9,51,1,51,3,51,1967,8,51,1,51,1,51,1,52,1,52,1,
        52,1,53,1,53,1,53,1,53,3,53,1978,8,53,1,53,1,53,1,53,1,54,1,54,1,
        54,1,54,1,54,3,54,1988,8,54,1,54,1,54,3,54,1992,8,54,1,54,1,54,1,
        54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,2004,8,55,1,55,1,55,1,
        55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2016,8,56,1,57,1,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,2029,8,57,10,57,
        12,57,2032,9,57,1,57,1,57,3,57,2036,8,57,1,58,1,58,1,58,1,58,3,58,
        2042,8,58,1,59,1,59,1,59,5,59,2047,8,59,10,59,12,59,2050,9,59,1,
        60,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,3,
        63,2065,8,63,1,63,5,63,2068,8,63,10,63,12,63,2071,9,63,1,63,1,63,
        1,64,1,64,1,64,1,64,1,64,1,64,5,64,2081,8,64,10,64,12,64,2084,9,
        64,1,64,1,64,3,64,2088,8,64,1,65,1,65,1,65,1,65,5,65,2094,8,65,10,
        65,12,65,2097,9,65,1,65,5,65,2100,8,65,10,65,12,65,2103,9,65,1,65,
        3,65,2106,8,65,1,65,3,65,2109,8,65,1,66,3,66,2112,8,66,1,66,1,66,
        1,66,1,66,1,66,3,66,2119,8,66,1,66,1,66,1,66,1,66,3,66,2125,8,66,
        1,67,1,67,1,67,1,67,1,67,5,67,2132,8,67,10,67,12,67,2135,9,67,1,
        67,1,67,1,67,1,67,1,67,5,67,2142,8,67,10,67,12,67,2145,9,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,2157,8,67,10,67,
        12,67,2160,9,67,1,67,1,67,3,67,2164,8,67,3,67,2166,8,67,1,68,1,68,
        3,68,2170,8,68,1,69,1,69,1,69,1,69,1,69,5,69,2177,8,69,10,69,12,
        69,2180,9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,2190,8,
        69,10,69,12,69,2193,9,69,1,69,1,69,3,69,2197,8,69,1,70,1,70,3,70,
        2201,8,70,1,71,1,71,1,71,1,71,5,71,2207,8,71,10,71,12,71,2210,9,
        71,3,71,2212,8,71,1,71,1,71,3,71,2216,8,71,1,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,5,72,2228,8,72,10,72,12,72,2231,9,72,
        1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,5,73,2241,8,73,10,73,12,
        73,2244,9,73,1,73,1,73,3,73,2248,8,73,1,74,1,74,3,74,2252,8,74,1,
        74,3,74,2255,8,74,1,75,1,75,3,75,2259,8,75,1,75,1,75,1,75,1,75,3,
        75,2265,8,75,1,75,3,75,2268,8,75,1,76,1,76,1,76,1,77,1,77,3,77,2275,
        8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,2285,8,78,10,78,
        12,78,2288,9,78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,2296,8,79,10,
        79,12,79,2299,9,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,5,79,
        2309,8,79,10,79,12,79,2312,9,79,1,79,1,79,1,80,1,80,1,80,1,80,5,
        80,2320,8,80,10,80,12,80,2323,9,80,1,80,1,80,3,80,2327,8,80,1,81,
        1,81,1,82,1,82,1,83,1,83,3,83,2335,8,83,1,84,1,84,1,85,3,85,2340,
        8,85,1,85,1,85,1,86,1,86,1,86,3,86,2347,8,86,1,86,1,86,1,86,1,86,
        1,86,5,86,2354,8,86,10,86,12,86,2357,9,86,3,86,2359,8,86,1,86,1,
        86,1,86,3,86,2364,8,86,1,86,1,86,1,86,5,86,2369,8,86,10,86,12,86,
        2372,9,86,3,86,2374,8,86,1,87,1,87,1,88,3,88,2379,8,88,1,88,1,88,
        5,88,2383,8,88,10,88,12,88,2386,9,88,1,89,1,89,1,89,3,89,2391,8,
        89,1,90,1,90,1,90,3,90,2396,8,90,1,90,1,90,3,90,2400,8,90,1,90,1,
        90,1,90,1,90,3,90,2406,8,90,1,90,1,90,3,90,2410,8,90,1,91,3,91,2413,
        8,91,1,91,1,91,1,91,3,91,2418,8,91,1,91,3,91,2421,8,91,1,91,1,91,
        1,91,3,91,2426,8,91,1,91,1,91,3,91,2430,8,91,1,91,3,91,2433,8,91,
        1,91,3,91,2436,8,91,1,92,1,92,1,92,1,92,3,92,2442,8,92,1,93,1,93,
        1,93,3,93,2447,8,93,1,93,1,93,1,93,1,93,1,93,3,93,2454,8,93,1,94,
        3,94,2457,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,2475,8,94,3,94,2477,8,94,1,94,
        3,94,2480,8,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,5,96,2489,8,96,
        10,96,12,96,2492,9,96,1,97,1,97,1,97,1,97,5,97,2498,8,97,10,97,12,
        97,2501,9,97,1,97,1,97,1,98,1,98,3,98,2507,8,98,1,99,1,99,1,99,1,
        99,5,99,2513,8,99,10,99,12,99,2516,9,99,1,99,1,99,1,100,1,100,3,
        100,2522,8,100,1,101,1,101,3,101,2526,8,101,1,101,3,101,2529,8,101,
        1,101,1,101,1,101,1,101,1,101,1,101,3,101,2537,8,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,2545,8,101,1,101,1,101,1,101,1,101,
        3,101,2551,8,101,1,102,1,102,1,102,1,102,5,102,2557,8,102,10,102,
        12,102,2560,9,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,5,103,
        2569,8,103,10,103,12,103,2572,9,103,3,103,2574,8,103,1,103,1,103,
        1,103,1,104,3,104,2580,8,104,1,104,1,104,3,104,2584,8,104,3,104,
        2586,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2595,
        8,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        3,105,2607,8,105,3,105,2609,8,105,1,105,1,105,1,105,1,105,1,105,
        3,105,2616,8,105,1,105,1,105,1,105,1,105,1,105,3,105,2623,8,105,
        1,105,1,105,1,105,1,105,3,105,2629,8,105,1,105,1,105,1,105,1,105,
        3,105,2635,8,105,3,105,2637,8,105,1,106,1,106,1,106,5,106,2642,8,
        106,10,106,12,106,2645,9,106,1,107,1,107,1,107,5,107,2650,8,107,
        10,107,12,107,2653,9,107,1,108,1,108,1,108,5,108,2658,8,108,10,108,
        12,108,2661,9,108,1,109,1,109,1,109,3,109,2666,8,109,1,110,1,110,
        1,110,3,110,2671,8,110,1,110,1,110,1,111,1,111,1,111,3,111,2678,
        8,111,1,111,1,111,1,112,1,112,3,112,2684,8,112,1,112,1,112,3,112,
        2688,8,112,3,112,2690,8,112,1,113,1,113,1,113,5,113,2695,8,113,10,
        113,12,113,2698,9,113,1,114,1,114,1,114,1,114,5,114,2704,8,114,10,
        114,12,114,2707,9,114,1,114,1,114,1,115,1,115,3,115,2713,8,115,1,
        116,1,116,1,116,1,116,1,116,1,116,5,116,2721,8,116,10,116,12,116,
        2724,9,116,1,116,1,116,3,116,2728,8,116,1,117,1,117,3,117,2732,8,
        117,1,118,1,118,1,119,1,119,1,119,5,119,2739,8,119,10,119,12,119,
        2742,9,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,3,120,2754,8,120,3,120,2756,8,120,1,120,1,120,1,120,1,120,
        1,120,1,120,5,120,2764,8,120,10,120,12,120,2767,9,120,1,121,3,121,
        2770,8,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2778,8,121,
        1,121,1,121,1,121,1,121,1,121,5,121,2785,8,121,10,121,12,121,2788,
        9,121,1,121,1,121,1,121,3,121,2793,8,121,1,121,1,121,1,121,1,121,
        1,121,1,121,3,121,2801,8,121,1,121,1,121,1,121,3,121,2806,8,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,5,121,2816,8,121,
        10,121,12,121,2819,9,121,1,121,1,121,3,121,2823,8,121,1,121,3,121,
        2826,8,121,1,121,1,121,1,121,1,121,3,121,2832,8,121,1,121,1,121,
        3,121,2836,8,121,1,121,1,121,1,121,3,121,2841,8,121,1,121,1,121,
        1,121,3,121,2846,8,121,1,121,1,121,1,121,3,121,2851,8,121,1,122,
        1,122,1,122,1,122,3,122,2857,8,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,5,122,2878,8,122,10,122,12,122,2881,9,122,1,123,
        1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,4,124,2907,8,124,11,124,12,124,2908,1,124,1,124,3,124,2913,
        8,124,1,124,1,124,1,124,1,124,1,124,4,124,2920,8,124,11,124,12,124,
        2921,1,124,1,124,3,124,2926,8,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,5,124,2942,
        8,124,10,124,12,124,2945,9,124,3,124,2947,8,124,1,124,1,124,1,124,
        1,124,1,124,1,124,3,124,2955,8,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,3,124,2964,8,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,2973,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,4,124,2994,8,124,11,124,12,124,2995,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,3,124,3007,8,124,1,124,1,124,1,124,
        5,124,3012,8,124,10,124,12,124,3015,9,124,3,124,3017,8,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,3,124,3026,8,124,1,124,1,124,
        3,124,3030,8,124,1,124,1,124,3,124,3034,8,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,4,124,3044,8,124,11,124,12,124,3045,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,3071,8,124,1,124,1,124,1,124,1,124,1,124,3,124,3078,
        8,124,1,124,3,124,3081,8,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3096,8,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3117,8,124,1,124,
        1,124,3,124,3121,8,124,3,124,3123,8,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,5,124,3133,8,124,10,124,12,124,3136,9,124,
        1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,4,125,
        3148,8,125,11,125,12,125,3149,3,125,3152,8,125,1,126,1,126,1,127,
        1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,130,3,130,3165,8,130,
        1,131,1,131,3,131,3169,8,131,1,132,1,132,1,132,4,132,3174,8,132,
        11,132,12,132,3175,1,133,1,133,1,133,3,133,3181,8,133,1,134,1,134,
        1,134,1,134,1,134,1,135,3,135,3189,8,135,1,135,1,135,1,135,3,135,
        3194,8,135,1,136,1,136,1,137,1,137,1,138,1,138,1,138,3,138,3203,
        8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,3,139,3220,8,139,1,139,1,139,3,139,
        3224,8,139,1,139,1,139,1,139,1,139,3,139,3230,8,139,1,139,1,139,
        1,139,1,139,3,139,3236,8,139,1,139,1,139,1,139,1,139,1,139,5,139,
        3243,8,139,10,139,12,139,3246,9,139,1,139,3,139,3249,8,139,3,139,
        3251,8,139,1,140,1,140,1,140,5,140,3256,8,140,10,140,12,140,3259,
        9,140,1,141,1,141,1,141,1,141,3,141,3265,8,141,1,141,3,141,3268,
        8,141,1,141,3,141,3271,8,141,1,141,3,141,3274,8,141,1,142,1,142,
        1,142,1,143,1,143,1,143,5,143,3282,8,143,10,143,12,143,3285,9,143,
        1,144,1,144,1,144,1,144,3,144,3291,8,144,1,144,3,144,3294,8,144,
        1,145,1,145,1,145,5,145,3299,8,145,10,145,12,145,3302,9,145,1,146,
        1,146,1,146,5,146,3307,8,146,10,146,12,146,3310,9,146,1,147,1,147,
        1,147,1,147,3,147,3316,8,147,1,148,1,148,1,148,5,148,3321,8,148,
        10,148,12,148,3324,9,148,1,149,1,149,3,149,3328,8,149,1,149,1,149,
        1,149,3,149,3333,8,149,1,149,3,149,3336,8,149,1,150,1,150,1,150,
        1,150,1,150,1,151,1,151,1,151,1,151,5,151,3347,8,151,10,151,12,151,
        3350,9,151,1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,
        1,153,1,153,1,153,1,153,1,153,1,153,5,153,3367,8,153,10,153,12,153,
        3370,9,153,1,153,1,153,1,153,1,153,1,153,5,153,3377,8,153,10,153,
        12,153,3380,9,153,3,153,3382,8,153,1,153,1,153,1,153,1,153,1,153,
        5,153,3389,8,153,10,153,12,153,3392,9,153,3,153,3394,8,153,3,153,
        3396,8,153,1,153,3,153,3399,8,153,1,153,3,153,3402,8,153,1,154,1,
        154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,3,154,3420,8,154,1,155,1,155,1,155,1,155,
        1,155,1,155,1,155,3,155,3429,8,155,1,156,1,156,1,156,5,156,3434,
        8,156,10,156,12,156,3437,9,156,1,157,1,157,1,157,1,157,3,157,3443,
        8,157,1,158,1,158,1,158,5,158,3448,8,158,10,158,12,158,3451,9,158,
        1,159,1,159,1,159,1,160,1,160,4,160,3458,8,160,11,160,12,160,3459,
        1,160,3,160,3463,8,160,1,161,1,161,1,161,3,161,3468,8,161,1,162,
        1,162,1,162,1,162,1,162,1,162,3,162,3476,8,162,1,163,1,163,1,163,
        3,163,3481,8,163,1,164,1,164,1,165,1,165,3,165,3487,8,165,1,165,
        1,165,1,165,3,165,3492,8,165,1,165,1,165,1,165,3,165,3497,8,165,
        1,165,1,165,3,165,3501,8,165,1,165,1,165,3,165,3505,8,165,1,165,
        1,165,3,165,3509,8,165,1,165,1,165,3,165,3513,8,165,1,165,1,165,
        3,165,3517,8,165,1,165,1,165,3,165,3521,8,165,1,165,1,165,3,165,
        3525,8,165,1,165,3,165,3528,8,165,1,166,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,1,166,1,166,1,166,3,166,3541,8,166,1,167,1,167,
        1,167,3,167,3546,8,167,1,168,1,168,3,168,3550,8,168,1,169,1,169,
        3,169,3554,8,169,1,170,1,170,1,171,1,171,1,172,1,172,1,172,9,996,
        1061,1069,1086,1100,1109,1118,1127,1171,4,88,240,244,248,173,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
        320,322,324,326,328,330,332,334,336,338,340,342,344,0,58,2,0,68,
        68,200,200,2,0,29,29,217,217,2,0,106,106,120,120,1,0,42,43,2,0,256,
        256,294,294,2,0,11,11,34,34,5,0,39,39,51,51,92,92,105,105,150,150,
        1,0,73,74,2,0,92,92,105,105,3,0,8,8,81,81,253,253,2,0,8,8,144,144,
        3,0,64,64,164,164,229,229,3,0,65,65,165,165,230,230,4,0,86,86,128,
        128,238,238,282,282,3,0,86,86,238,238,282,282,2,0,20,20,73,73,2,
        0,100,100,135,135,2,0,255,255,293,293,2,0,254,254,265,265,2,0,54,
        54,224,224,2,0,88,88,121,121,2,0,10,10,78,78,2,0,333,333,335,335,
        1,0,140,141,3,0,10,10,15,15,242,242,3,0,95,95,275,275,284,284,2,
        0,314,315,319,319,2,0,80,80,316,318,2,0,314,315,322,322,11,0,60,
        60,62,62,115,115,155,155,157,157,159,159,161,161,202,202,227,227,
        296,296,303,303,3,0,56,56,58,59,290,290,2,0,66,66,266,266,2,0,67,
        67,267,267,2,0,31,31,277,277,2,0,118,118,216,216,1,0,251,252,2,0,
        4,4,106,106,2,0,4,4,102,102,3,0,24,24,138,138,270,270,1,0,191,192,
        1,0,306,313,2,0,80,80,314,323,4,0,13,13,120,120,170,170,179,179,
        2,0,95,95,275,275,1,0,314,315,7,0,60,61,115,116,155,162,166,167,
        227,228,296,297,303,304,6,0,60,60,115,115,159,159,161,161,227,227,
        303,303,2,0,161,161,303,303,4,0,60,60,115,115,159,159,227,227,3,
        0,115,115,159,159,227,227,2,0,79,79,188,188,2,0,180,180,243,243,
        2,0,101,101,197,197,1,0,334,335,2,0,81,81,237,237,51,0,8,9,11,12,
        14,14,16,18,20,21,23,23,25,29,32,34,36,39,41,41,43,49,51,51,54,55,
        60,77,79,81,85,85,87,94,97,97,99,101,104,105,108,110,113,113,115,
        119,121,123,125,127,129,129,132,132,134,135,137,137,140,167,169,
        169,172,173,177,178,181,181,183,184,186,190,193,197,199,208,210,
        218,220,230,232,235,237,241,243,255,257,262,265,267,269,269,271,
        281,285,289,292,297,300,300,303,305,16,0,14,14,53,53,86,86,107,107,
        124,124,128,128,133,133,136,136,139,139,168,168,175,175,219,219,
        232,232,238,238,282,282,291,291,17,0,8,13,15,52,54,85,87,106,108,
        123,125,127,129,132,134,135,137,138,140,167,169,174,176,218,220,
        231,233,237,239,281,283,290,292,305,4088,0,346,1,0,0,0,2,355,1,0,
        0,0,4,358,1,0,0,0,6,361,1,0,0,0,8,364,1,0,0,0,10,367,1,0,0,0,12,
        370,1,0,0,0,14,1174,1,0,0,0,16,1178,1,0,0,0,18,1180,1,0,0,0,20,1182,
        1,0,0,0,22,1352,1,0,0,0,24,1354,1,0,0,0,26,1371,1,0,0,0,28,1377,
        1,0,0,0,30,1389,1,0,0,0,32,1402,1,0,0,0,34,1405,1,0,0,0,36,1409,
        1,0,0,0,38,1484,1,0,0,0,40,1486,1,0,0,0,42,1490,1,0,0,0,44,1511,
        1,0,0,0,46,1513,1,0,0,0,48,1515,1,0,0,0,50,1522,1,0,0,0,52,1524,
        1,0,0,0,54,1532,1,0,0,0,56,1541,1,0,0,0,58,1552,1,0,0,0,60,1570,
        1,0,0,0,62,1573,1,0,0,0,64,1584,1,0,0,0,66,1600,1,0,0,0,68,1606,
        1,0,0,0,70,1608,1,0,0,0,72,1619,1,0,0,0,74,1636,1,0,0,0,76,1644,
        1,0,0,0,78,1646,1,0,0,0,80,1652,1,0,0,0,82,1711,1,0,0,0,84,1723,
        1,0,0,0,86,1775,1,0,0,0,88,1778,1,0,0,0,90,1816,1,0,0,0,92,1818,
        1,0,0,0,94,1826,1,0,0,0,96,1859,1,0,0,0,98,1905,1,0,0,0,100,1926,
        1,0,0,0,102,1958,1,0,0,0,104,1970,1,0,0,0,106,1973,1,0,0,0,108,1982,
        1,0,0,0,110,1996,1,0,0,0,112,2015,1,0,0,0,114,2035,1,0,0,0,116,2041,
        1,0,0,0,118,2043,1,0,0,0,120,2051,1,0,0,0,122,2055,1,0,0,0,124,2058,
        1,0,0,0,126,2061,1,0,0,0,128,2087,1,0,0,0,130,2089,1,0,0,0,132,2124,
        1,0,0,0,134,2165,1,0,0,0,136,2169,1,0,0,0,138,2196,1,0,0,0,140,2200,
        1,0,0,0,142,2215,1,0,0,0,144,2217,1,0,0,0,146,2247,1,0,0,0,148,2249,
        1,0,0,0,150,2256,1,0,0,0,152,2269,1,0,0,0,154,2274,1,0,0,0,156,2276,
        1,0,0,0,158,2291,1,0,0,0,160,2315,1,0,0,0,162,2328,1,0,0,0,164,2330,
        1,0,0,0,166,2332,1,0,0,0,168,2336,1,0,0,0,170,2339,1,0,0,0,172,2343,
        1,0,0,0,174,2375,1,0,0,0,176,2378,1,0,0,0,178,2390,1,0,0,0,180,2409,
        1,0,0,0,182,2435,1,0,0,0,184,2441,1,0,0,0,186,2443,1,0,0,0,188,2479,
        1,0,0,0,190,2481,1,0,0,0,192,2485,1,0,0,0,194,2493,1,0,0,0,196,2504,
        1,0,0,0,198,2508,1,0,0,0,200,2519,1,0,0,0,202,2550,1,0,0,0,204,2552,
        1,0,0,0,206,2563,1,0,0,0,208,2585,1,0,0,0,210,2636,1,0,0,0,212,2638,
        1,0,0,0,214,2646,1,0,0,0,216,2654,1,0,0,0,218,2662,1,0,0,0,220,2670,
        1,0,0,0,222,2677,1,0,0,0,224,2681,1,0,0,0,226,2691,1,0,0,0,228,2699,
        1,0,0,0,230,2712,1,0,0,0,232,2727,1,0,0,0,234,2731,1,0,0,0,236,2733,
        1,0,0,0,238,2735,1,0,0,0,240,2755,1,0,0,0,242,2850,1,0,0,0,244,2856,
        1,0,0,0,246,2882,1,0,0,0,248,3122,1,0,0,0,250,3151,1,0,0,0,252,3153,
        1,0,0,0,254,3155,1,0,0,0,256,3157,1,0,0,0,258,3159,1,0,0,0,260,3161,
        1,0,0,0,262,3166,1,0,0,0,264,3173,1,0,0,0,266,3177,1,0,0,0,268,3182,
        1,0,0,0,270,3188,1,0,0,0,272,3195,1,0,0,0,274,3197,1,0,0,0,276,3202,
        1,0,0,0,278,3250,1,0,0,0,280,3252,1,0,0,0,282,3260,1,0,0,0,284,3275,
        1,0,0,0,286,3278,1,0,0,0,288,3286,1,0,0,0,290,3295,1,0,0,0,292,3303,
        1,0,0,0,294,3315,1,0,0,0,296,3317,1,0,0,0,298,3325,1,0,0,0,300,3337,
        1,0,0,0,302,3342,1,0,0,0,304,3351,1,0,0,0,306,3401,1,0,0,0,308,3419,
        1,0,0,0,310,3428,1,0,0,0,312,3430,1,0,0,0,314,3442,1,0,0,0,316,3444,
        1,0,0,0,318,3452,1,0,0,0,320,3462,1,0,0,0,322,3467,1,0,0,0,324,3475,
        1,0,0,0,326,3480,1,0,0,0,328,3482,1,0,0,0,330,3527,1,0,0,0,332,3540,
        1,0,0,0,334,3545,1,0,0,0,336,3549,1,0,0,0,338,3553,1,0,0,0,340,3555,
        1,0,0,0,342,3557,1,0,0,0,344,3559,1,0,0,0,346,350,3,14,7,0,347,349,
        5,1,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,
        1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,5,0,0,1,354,1,1,
        0,0,0,355,356,3,224,112,0,356,357,5,0,0,1,357,3,1,0,0,0,358,359,
        3,220,110,0,359,360,5,0,0,1,360,5,1,0,0,0,361,362,3,214,107,0,362,
        363,5,0,0,1,363,7,1,0,0,0,364,365,3,222,111,0,365,366,5,0,0,1,366,
        9,1,0,0,0,367,368,3,278,139,0,368,369,5,0,0,1,369,11,1,0,0,0,370,
        371,3,286,143,0,371,372,5,0,0,1,372,13,1,0,0,0,373,1175,3,36,18,
        0,374,376,3,54,27,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,
        0,0,377,1175,3,82,41,0,378,379,5,289,0,0,379,1175,3,214,107,0,380,
        381,5,289,0,0,381,382,3,46,23,0,382,383,3,214,107,0,383,1175,1,0,
        0,0,384,385,5,237,0,0,385,388,5,32,0,0,386,389,3,322,161,0,387,389,
        3,334,167,0,388,386,1,0,0,0,388,387,1,0,0,0,389,1175,1,0,0,0,390,
        391,5,52,0,0,391,395,3,46,23,0,392,393,5,117,0,0,393,394,5,170,0,
        0,394,396,5,89,0,0,395,392,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,
        0,397,405,3,214,107,0,398,404,3,34,17,0,399,404,3,32,16,0,400,401,
        5,301,0,0,401,402,7,0,0,0,402,404,3,62,31,0,403,398,1,0,0,0,403,
        399,1,0,0,0,403,400,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,
        406,1,0,0,0,406,1175,1,0,0,0,407,405,1,0,0,0,408,409,5,11,0,0,409,
        410,3,46,23,0,410,411,3,214,107,0,411,412,5,237,0,0,412,413,7,0,
        0,0,413,414,3,62,31,0,414,1175,1,0,0,0,415,416,5,11,0,0,416,417,
        3,46,23,0,417,418,3,214,107,0,418,419,5,237,0,0,419,420,3,32,16,
        0,420,1175,1,0,0,0,421,422,5,81,0,0,422,425,3,46,23,0,423,424,5,
        117,0,0,424,426,5,89,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,427,
        1,0,0,0,427,429,3,214,107,0,428,430,7,1,0,0,429,428,1,0,0,0,429,
        430,1,0,0,0,430,1175,1,0,0,0,431,432,5,240,0,0,432,435,3,48,24,0,
        433,434,7,2,0,0,434,436,3,214,107,0,435,433,1,0,0,0,435,436,1,0,
        0,0,436,441,1,0,0,0,437,439,5,140,0,0,438,437,1,0,0,0,438,439,1,
        0,0,0,439,440,1,0,0,0,440,442,3,334,167,0,441,438,1,0,0,0,441,442,
        1,0,0,0,442,1175,1,0,0,0,443,448,3,24,12,0,444,445,5,2,0,0,445,446,
        3,290,145,0,446,447,5,3,0,0,447,449,1,0,0,0,448,444,1,0,0,0,448,
        449,1,0,0,0,449,451,1,0,0,0,450,452,3,58,29,0,451,450,1,0,0,0,451,
        452,1,0,0,0,452,453,1,0,0,0,453,458,3,60,30,0,454,456,5,19,0,0,455,
        454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,459,3,36,18,0,458,
        455,1,0,0,0,458,459,1,0,0,0,459,1175,1,0,0,0,460,461,5,52,0,0,461,
        465,5,256,0,0,462,463,5,117,0,0,463,464,5,170,0,0,464,466,5,89,0,
        0,465,462,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,3,220,
        110,0,468,469,5,140,0,0,469,478,3,220,110,0,470,477,3,58,29,0,471,
        477,3,210,105,0,472,477,3,74,37,0,473,477,3,32,16,0,474,475,5,260,
        0,0,475,477,3,62,31,0,476,470,1,0,0,0,476,471,1,0,0,0,476,472,1,
        0,0,0,476,473,1,0,0,0,476,474,1,0,0,0,477,480,1,0,0,0,478,476,1,
        0,0,0,478,479,1,0,0,0,479,1175,1,0,0,0,480,478,1,0,0,0,481,486,3,
        26,13,0,482,483,5,2,0,0,483,484,3,290,145,0,484,485,5,3,0,0,485,
        487,1,0,0,0,486,482,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,
        490,3,58,29,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,
        496,3,60,30,0,492,494,5,19,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,
        495,1,0,0,0,495,497,3,36,18,0,496,493,1,0,0,0,496,497,1,0,0,0,497,
        1175,1,0,0,0,498,499,5,12,0,0,499,500,5,256,0,0,500,502,3,214,107,
        0,501,503,3,42,21,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,
        0,0,504,505,5,48,0,0,505,513,5,247,0,0,506,514,3,322,161,0,507,508,
        5,102,0,0,508,509,5,43,0,0,509,514,3,192,96,0,510,511,5,102,0,0,
        511,512,5,10,0,0,512,514,5,43,0,0,513,506,1,0,0,0,513,507,1,0,0,
        0,513,510,1,0,0,0,513,514,1,0,0,0,514,1175,1,0,0,0,515,516,5,12,
        0,0,516,519,5,257,0,0,517,518,7,2,0,0,518,520,3,214,107,0,519,517,
        1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,522,5,48,0,0,522,524,
        5,247,0,0,523,525,3,322,161,0,524,523,1,0,0,0,524,525,1,0,0,0,525,
        1175,1,0,0,0,526,527,5,11,0,0,527,528,5,256,0,0,528,529,3,214,107,
        0,529,530,5,8,0,0,530,531,7,3,0,0,531,532,3,280,140,0,532,1175,1,
        0,0,0,533,534,5,11,0,0,534,535,5,256,0,0,535,536,3,214,107,0,536,
        537,5,8,0,0,537,538,7,3,0,0,538,539,5,2,0,0,539,540,3,280,140,0,
        540,541,5,3,0,0,541,1175,1,0,0,0,542,543,5,11,0,0,543,544,5,256,
        0,0,544,545,3,214,107,0,545,546,5,211,0,0,546,547,5,42,0,0,547,548,
        3,214,107,0,548,549,5,268,0,0,549,550,3,318,159,0,550,1175,1,0,0,
        0,551,552,5,11,0,0,552,553,5,256,0,0,553,554,3,214,107,0,554,555,
        5,81,0,0,555,558,7,3,0,0,556,557,5,117,0,0,557,559,5,89,0,0,558,
        556,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,5,2,0,0,561,
        562,3,212,106,0,562,563,5,3,0,0,563,1175,1,0,0,0,564,565,5,11,0,
        0,565,566,5,256,0,0,566,567,3,214,107,0,567,568,5,81,0,0,568,571,
        7,3,0,0,569,570,5,117,0,0,570,572,5,89,0,0,571,569,1,0,0,0,571,572,
        1,0,0,0,572,573,1,0,0,0,573,574,3,212,106,0,574,1175,1,0,0,0,575,
        576,5,11,0,0,576,577,7,4,0,0,577,578,3,214,107,0,578,579,5,211,0,
        0,579,580,5,268,0,0,580,581,3,214,107,0,581,1175,1,0,0,0,582,583,
        5,11,0,0,583,584,7,4,0,0,584,585,3,214,107,0,585,586,5,237,0,0,586,
        587,5,260,0,0,587,588,3,62,31,0,588,1175,1,0,0,0,589,590,5,11,0,
        0,590,591,7,4,0,0,591,592,3,214,107,0,592,593,5,287,0,0,593,596,
        5,260,0,0,594,595,5,117,0,0,595,597,5,89,0,0,596,594,1,0,0,0,596,
        597,1,0,0,0,597,598,1,0,0,0,598,599,3,62,31,0,599,1175,1,0,0,0,600,
        601,5,11,0,0,601,602,5,256,0,0,602,603,3,214,107,0,603,605,7,5,0,
        0,604,606,5,42,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,
        0,607,609,3,214,107,0,608,610,3,332,166,0,609,608,1,0,0,0,609,610,
        1,0,0,0,610,1175,1,0,0,0,611,612,5,11,0,0,612,613,5,256,0,0,613,
        615,3,214,107,0,614,616,3,42,21,0,615,614,1,0,0,0,615,616,1,0,0,
        0,616,617,1,0,0,0,617,619,5,34,0,0,618,620,5,42,0,0,619,618,1,0,
        0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,622,3,214,107,0,622,624,
        3,288,144,0,623,625,3,276,138,0,624,623,1,0,0,0,624,625,1,0,0,0,
        625,1175,1,0,0,0,626,627,5,11,0,0,627,628,5,256,0,0,628,630,3,214,
        107,0,629,631,3,42,21,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,
        1,0,0,0,632,633,5,214,0,0,633,634,5,43,0,0,634,635,5,2,0,0,635,636,
        3,280,140,0,636,637,5,3,0,0,637,1175,1,0,0,0,638,639,5,11,0,0,639,
        640,5,256,0,0,640,642,3,214,107,0,641,643,3,42,21,0,642,641,1,0,
        0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,5,237,0,0,645,646,5,
        234,0,0,646,650,3,334,167,0,647,648,5,301,0,0,648,649,5,235,0,0,
        649,651,3,62,31,0,650,647,1,0,0,0,650,651,1,0,0,0,651,1175,1,0,0,
        0,652,653,5,11,0,0,653,654,5,256,0,0,654,656,3,214,107,0,655,657,
        3,42,21,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,659,
        5,237,0,0,659,660,5,235,0,0,660,661,3,62,31,0,661,1175,1,0,0,0,662,
        663,5,11,0,0,663,664,7,4,0,0,664,665,3,214,107,0,665,669,5,8,0,0,
        666,667,5,117,0,0,667,668,5,170,0,0,668,670,5,89,0,0,669,666,1,0,
        0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,673,3,40,20,0,672,671,1,
        0,0,0,673,674,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,1175,1,
        0,0,0,676,677,5,11,0,0,677,678,5,256,0,0,678,679,3,214,107,0,679,
        680,3,42,21,0,680,681,5,211,0,0,681,682,5,268,0,0,682,683,3,42,21,
        0,683,1175,1,0,0,0,684,685,5,11,0,0,685,686,7,4,0,0,686,687,3,214,
        107,0,687,690,5,81,0,0,688,689,5,117,0,0,689,691,5,89,0,0,690,688,
        1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,697,3,42,21,0,693,694,
        5,4,0,0,694,696,3,42,21,0,695,693,1,0,0,0,696,699,1,0,0,0,697,695,
        1,0,0,0,697,698,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,700,702,
        5,201,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,1175,1,0,0,0,703,704,
        5,11,0,0,704,705,5,256,0,0,705,707,3,214,107,0,706,708,3,42,21,0,
        707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,5,237,0,
        0,710,711,3,32,16,0,711,1175,1,0,0,0,712,713,5,11,0,0,713,714,5,
        256,0,0,714,715,3,214,107,0,715,716,5,207,0,0,716,717,5,190,0,0,
        717,1175,1,0,0,0,718,719,5,81,0,0,719,722,5,256,0,0,720,721,5,117,
        0,0,721,723,5,89,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,724,1,0,
        0,0,724,726,3,214,107,0,725,727,5,201,0,0,726,725,1,0,0,0,726,727,
        1,0,0,0,727,1175,1,0,0,0,728,729,5,81,0,0,729,732,5,294,0,0,730,
        731,5,117,0,0,731,733,5,89,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,
        734,1,0,0,0,734,1175,3,214,107,0,735,738,5,52,0,0,736,737,5,179,
        0,0,737,739,5,214,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,744,1,
        0,0,0,740,742,5,110,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,
        1,0,0,0,743,745,5,261,0,0,744,741,1,0,0,0,744,745,1,0,0,0,745,746,
        1,0,0,0,746,750,5,294,0,0,747,748,5,117,0,0,748,749,5,170,0,0,749,
        751,5,89,0,0,750,747,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,
        754,3,214,107,0,753,755,3,198,99,0,754,753,1,0,0,0,754,755,1,0,0,
        0,755,764,1,0,0,0,756,763,3,34,17,0,757,758,5,189,0,0,758,759,5,
        175,0,0,759,763,3,190,95,0,760,761,5,260,0,0,761,763,3,62,31,0,762,
        756,1,0,0,0,762,757,1,0,0,0,762,760,1,0,0,0,763,766,1,0,0,0,764,
        762,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,
        768,5,19,0,0,768,769,3,36,18,0,769,1175,1,0,0,0,770,773,5,52,0,0,
        771,772,5,179,0,0,772,774,5,214,0,0,773,771,1,0,0,0,773,774,1,0,
        0,0,774,776,1,0,0,0,775,777,5,110,0,0,776,775,1,0,0,0,776,777,1,
        0,0,0,777,778,1,0,0,0,778,779,5,261,0,0,779,780,5,294,0,0,780,785,
        3,220,110,0,781,782,5,2,0,0,782,783,3,286,143,0,783,784,5,3,0,0,
        784,786,1,0,0,0,785,781,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,
        787,790,3,58,29,0,788,789,5,178,0,0,789,791,3,62,31,0,790,788,1,
        0,0,0,790,791,1,0,0,0,791,1175,1,0,0,0,792,793,5,11,0,0,793,794,
        5,294,0,0,794,796,3,214,107,0,795,797,5,19,0,0,796,795,1,0,0,0,796,
        797,1,0,0,0,797,798,1,0,0,0,798,799,3,36,18,0,799,1175,1,0,0,0,800,
        803,5,52,0,0,801,802,5,179,0,0,802,804,5,214,0,0,803,801,1,0,0,0,
        803,804,1,0,0,0,804,806,1,0,0,0,805,807,5,261,0,0,806,805,1,0,0,
        0,806,807,1,0,0,0,807,808,1,0,0,0,808,812,5,108,0,0,809,810,5,117,
        0,0,810,811,5,170,0,0,811,813,5,89,0,0,812,809,1,0,0,0,812,813,1,
        0,0,0,813,814,1,0,0,0,814,815,3,214,107,0,815,816,5,19,0,0,816,826,
        3,334,167,0,817,818,5,291,0,0,818,823,3,80,40,0,819,820,5,4,0,0,
        820,822,3,80,40,0,821,819,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,
        0,823,824,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,826,817,1,0,0,
        0,826,827,1,0,0,0,827,1175,1,0,0,0,828,830,5,81,0,0,829,831,5,261,
        0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,835,5,108,
        0,0,833,834,5,117,0,0,834,836,5,89,0,0,835,833,1,0,0,0,835,836,1,
        0,0,0,836,837,1,0,0,0,837,1175,3,214,107,0,838,840,5,90,0,0,839,
        841,7,6,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,
        1175,3,14,7,0,843,844,5,240,0,0,844,847,5,257,0,0,845,846,7,2,0,
        0,846,848,3,214,107,0,847,845,1,0,0,0,847,848,1,0,0,0,848,853,1,
        0,0,0,849,851,5,140,0,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,
        1,0,0,0,852,854,3,334,167,0,853,850,1,0,0,0,853,854,1,0,0,0,854,
        1175,1,0,0,0,855,856,5,240,0,0,856,857,5,256,0,0,857,860,5,92,0,
        0,858,859,7,2,0,0,859,861,3,214,107,0,860,858,1,0,0,0,860,861,1,
        0,0,0,861,862,1,0,0,0,862,863,5,140,0,0,863,865,3,334,167,0,864,
        866,3,42,21,0,865,864,1,0,0,0,865,866,1,0,0,0,866,1175,1,0,0,0,867,
        868,5,240,0,0,868,869,5,260,0,0,869,874,3,214,107,0,870,871,5,2,
        0,0,871,872,3,66,33,0,872,873,5,3,0,0,873,875,1,0,0,0,874,870,1,
        0,0,0,874,875,1,0,0,0,875,1175,1,0,0,0,876,877,5,240,0,0,877,878,
        5,43,0,0,878,879,7,2,0,0,879,882,3,214,107,0,880,881,7,2,0,0,881,
        883,3,214,107,0,882,880,1,0,0,0,882,883,1,0,0,0,883,1175,1,0,0,0,
        884,885,5,240,0,0,885,888,5,295,0,0,886,887,7,2,0,0,887,889,3,214,
        107,0,888,886,1,0,0,0,888,889,1,0,0,0,889,894,1,0,0,0,890,892,5,
        140,0,0,891,890,1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,895,
        3,334,167,0,894,891,1,0,0,0,894,895,1,0,0,0,895,1175,1,0,0,0,896,
        897,5,240,0,0,897,898,5,190,0,0,898,900,3,214,107,0,899,901,3,42,
        21,0,900,899,1,0,0,0,900,901,1,0,0,0,901,1175,1,0,0,0,902,904,5,
        240,0,0,903,905,3,322,161,0,904,903,1,0,0,0,904,905,1,0,0,0,905,
        906,1,0,0,0,906,909,5,109,0,0,907,908,7,2,0,0,908,910,3,214,107,
        0,909,907,1,0,0,0,909,910,1,0,0,0,910,918,1,0,0,0,911,913,5,140,
        0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,916,1,0,0,0,914,917,3,214,
        107,0,915,917,3,334,167,0,916,914,1,0,0,0,916,915,1,0,0,0,917,919,
        1,0,0,0,918,912,1,0,0,0,918,919,1,0,0,0,919,1175,1,0,0,0,920,921,
        5,240,0,0,921,922,5,52,0,0,922,923,5,256,0,0,923,926,3,214,107,0,
        924,925,5,19,0,0,925,927,5,234,0,0,926,924,1,0,0,0,926,927,1,0,0,
        0,927,1175,1,0,0,0,928,929,5,240,0,0,929,930,5,55,0,0,930,1175,3,
        46,23,0,931,932,5,240,0,0,932,937,5,33,0,0,933,935,5,140,0,0,934,
        933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,938,3,334,167,0,
        937,934,1,0,0,0,937,938,1,0,0,0,938,1175,1,0,0,0,939,940,7,7,0,0,
        940,942,5,108,0,0,941,943,5,92,0,0,942,941,1,0,0,0,942,943,1,0,0,
        0,943,944,1,0,0,0,944,1175,3,50,25,0,945,946,7,7,0,0,946,948,3,46,
        23,0,947,949,5,92,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,
        0,0,0,950,951,3,214,107,0,951,1175,1,0,0,0,952,954,7,7,0,0,953,955,
        5,256,0,0,954,953,1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,958,
        7,8,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,961,
        3,214,107,0,960,962,3,42,21,0,961,960,1,0,0,0,961,962,1,0,0,0,962,
        964,1,0,0,0,963,965,3,52,26,0,964,963,1,0,0,0,964,965,1,0,0,0,965,
        1175,1,0,0,0,966,968,7,7,0,0,967,969,5,203,0,0,968,967,1,0,0,0,968,
        969,1,0,0,0,969,970,1,0,0,0,970,1175,3,36,18,0,971,972,5,44,0,0,
        972,973,5,175,0,0,973,974,3,46,23,0,974,975,3,214,107,0,975,976,
        5,131,0,0,976,977,3,336,168,0,977,1175,1,0,0,0,978,979,5,44,0,0,
        979,980,5,175,0,0,980,981,5,256,0,0,981,982,3,214,107,0,982,983,
        5,131,0,0,983,984,3,336,168,0,984,1175,1,0,0,0,985,986,5,210,0,0,
        986,987,5,256,0,0,987,1175,3,214,107,0,988,989,5,210,0,0,989,990,
        5,108,0,0,990,1175,3,214,107,0,991,999,5,210,0,0,992,1000,3,334,
        167,0,993,995,9,0,0,0,994,993,1,0,0,0,995,998,1,0,0,0,996,997,1,
        0,0,0,996,994,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,999,992,1,
        0,0,0,999,996,1,0,0,0,1000,1175,1,0,0,0,1001,1003,5,28,0,0,1002,
        1004,5,137,0,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,
        0,0,1005,1006,5,256,0,0,1006,1009,3,214,107,0,1007,1008,5,178,0,
        0,1008,1010,3,62,31,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,1010,1015,
        1,0,0,0,1011,1013,5,19,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,
        1014,1,0,0,0,1014,1016,3,36,18,0,1015,1012,1,0,0,0,1015,1016,1,0,
        0,0,1016,1175,1,0,0,0,1017,1018,5,281,0,0,1018,1021,5,256,0,0,1019,
        1020,5,117,0,0,1020,1022,5,89,0,0,1021,1019,1,0,0,0,1021,1022,1,
        0,0,0,1022,1023,1,0,0,0,1023,1175,3,214,107,0,1024,1025,5,36,0,0,
        1025,1175,5,28,0,0,1026,1027,5,145,0,0,1027,1029,5,63,0,0,1028,1030,
        5,146,0,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,
        1031,1032,5,125,0,0,1032,1034,3,334,167,0,1033,1035,5,187,0,0,1034,
        1033,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,130,
        0,0,1037,1038,5,256,0,0,1038,1040,3,214,107,0,1039,1041,3,42,21,
        0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1175,1,0,0,0,1042,1043,
        5,276,0,0,1043,1044,5,256,0,0,1044,1046,3,214,107,0,1045,1047,3,
        42,21,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1175,1,0,0,0,1048,
        1049,5,163,0,0,1049,1050,5,212,0,0,1050,1051,5,256,0,0,1051,1054,
        3,214,107,0,1052,1053,7,9,0,0,1053,1055,5,190,0,0,1054,1052,1,0,
        0,0,1054,1055,1,0,0,0,1055,1175,1,0,0,0,1056,1057,7,10,0,0,1057,
        1061,3,322,161,0,1058,1060,9,0,0,0,1059,1058,1,0,0,0,1060,1063,1,
        0,0,0,1061,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1175,1,0,0,0,1063,
        1061,1,0,0,0,1064,1065,5,237,0,0,1065,1069,5,221,0,0,1066,1068,9,
        0,0,0,1067,1066,1,0,0,0,1068,1071,1,0,0,0,1069,1070,1,0,0,0,1069,
        1067,1,0,0,0,1070,1175,1,0,0,0,1071,1069,1,0,0,0,1072,1073,5,237,
        0,0,1073,1074,5,264,0,0,1074,1075,5,305,0,0,1075,1175,3,260,130,
        0,1076,1077,5,237,0,0,1077,1078,5,264,0,0,1078,1079,5,305,0,0,1079,
        1175,3,16,8,0,1080,1081,5,237,0,0,1081,1082,5,264,0,0,1082,1086,
        5,305,0,0,1083,1085,9,0,0,0,1084,1083,1,0,0,0,1085,1088,1,0,0,0,
        1086,1087,1,0,0,0,1086,1084,1,0,0,0,1087,1175,1,0,0,0,1088,1086,
        1,0,0,0,1089,1090,5,237,0,0,1090,1091,3,18,9,0,1091,1092,5,306,0,
        0,1092,1093,3,20,10,0,1093,1175,1,0,0,0,1094,1095,5,237,0,0,1095,
        1103,3,18,9,0,1096,1100,5,306,0,0,1097,1099,9,0,0,0,1098,1097,1,
        0,0,0,1099,1102,1,0,0,0,1100,1101,1,0,0,0,1100,1098,1,0,0,0,1101,
        1104,1,0,0,0,1102,1100,1,0,0,0,1103,1096,1,0,0,0,1103,1104,1,0,0,
        0,1104,1175,1,0,0,0,1105,1109,5,237,0,0,1106,1108,9,0,0,0,1107,1106,
        1,0,0,0,1108,1111,1,0,0,0,1109,1110,1,0,0,0,1109,1107,1,0,0,0,1110,
        1112,1,0,0,0,1111,1109,1,0,0,0,1112,1113,5,306,0,0,1113,1175,3,20,
        10,0,1114,1118,5,237,0,0,1115,1117,9,0,0,0,1116,1115,1,0,0,0,1117,
        1120,1,0,0,0,1118,1119,1,0,0,0,1118,1116,1,0,0,0,1119,1175,1,0,0,
        0,1120,1118,1,0,0,0,1121,1122,5,215,0,0,1122,1175,3,18,9,0,1123,
        1127,5,215,0,0,1124,1126,9,0,0,0,1125,1124,1,0,0,0,1126,1129,1,0,
        0,0,1127,1128,1,0,0,0,1127,1125,1,0,0,0,1128,1175,1,0,0,0,1129,1127,
        1,0,0,0,1130,1131,5,52,0,0,1131,1135,5,122,0,0,1132,1133,5,117,0,
        0,1133,1134,5,170,0,0,1134,1136,5,89,0,0,1135,1132,1,0,0,0,1135,
        1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,3,322,161,0,1138,1140,5,
        175,0,0,1139,1141,5,256,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,
        1141,1142,1,0,0,0,1142,1145,3,214,107,0,1143,1144,5,291,0,0,1144,
        1146,3,322,161,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,
        0,0,0,1147,1148,5,2,0,0,1148,1149,3,216,108,0,1149,1152,5,3,0,0,
        1150,1151,5,178,0,0,1151,1153,3,62,31,0,1152,1150,1,0,0,0,1152,1153,
        1,0,0,0,1153,1175,1,0,0,0,1154,1155,5,81,0,0,1155,1158,5,122,0,0,
        1156,1157,5,117,0,0,1157,1159,5,89,0,0,1158,1156,1,0,0,0,1158,1159,
        1,0,0,0,1159,1160,1,0,0,0,1160,1161,3,322,161,0,1161,1163,5,175,
        0,0,1162,1164,5,256,0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,
        1165,1,0,0,0,1165,1166,3,214,107,0,1166,1175,1,0,0,0,1167,1171,3,
        22,11,0,1168,1170,9,0,0,0,1169,1168,1,0,0,0,1170,1173,1,0,0,0,1171,
        1172,1,0,0,0,1171,1169,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,
        0,1174,373,1,0,0,0,1174,375,1,0,0,0,1174,378,1,0,0,0,1174,380,1,
        0,0,0,1174,384,1,0,0,0,1174,390,1,0,0,0,1174,408,1,0,0,0,1174,415,
        1,0,0,0,1174,421,1,0,0,0,1174,431,1,0,0,0,1174,443,1,0,0,0,1174,
        460,1,0,0,0,1174,481,1,0,0,0,1174,498,1,0,0,0,1174,515,1,0,0,0,1174,
        526,1,0,0,0,1174,533,1,0,0,0,1174,542,1,0,0,0,1174,551,1,0,0,0,1174,
        564,1,0,0,0,1174,575,1,0,0,0,1174,582,1,0,0,0,1174,589,1,0,0,0,1174,
        600,1,0,0,0,1174,611,1,0,0,0,1174,626,1,0,0,0,1174,638,1,0,0,0,1174,
        652,1,0,0,0,1174,662,1,0,0,0,1174,676,1,0,0,0,1174,684,1,0,0,0,1174,
        703,1,0,0,0,1174,712,1,0,0,0,1174,718,1,0,0,0,1174,728,1,0,0,0,1174,
        735,1,0,0,0,1174,770,1,0,0,0,1174,792,1,0,0,0,1174,800,1,0,0,0,1174,
        828,1,0,0,0,1174,838,1,0,0,0,1174,843,1,0,0,0,1174,855,1,0,0,0,1174,
        867,1,0,0,0,1174,876,1,0,0,0,1174,884,1,0,0,0,1174,896,1,0,0,0,1174,
        902,1,0,0,0,1174,920,1,0,0,0,1174,928,1,0,0,0,1174,931,1,0,0,0,1174,
        939,1,0,0,0,1174,945,1,0,0,0,1174,952,1,0,0,0,1174,966,1,0,0,0,1174,
        971,1,0,0,0,1174,978,1,0,0,0,1174,985,1,0,0,0,1174,988,1,0,0,0,1174,
        991,1,0,0,0,1174,1001,1,0,0,0,1174,1017,1,0,0,0,1174,1024,1,0,0,
        0,1174,1026,1,0,0,0,1174,1042,1,0,0,0,1174,1048,1,0,0,0,1174,1056,
        1,0,0,0,1174,1064,1,0,0,0,1174,1072,1,0,0,0,1174,1076,1,0,0,0,1174,
        1080,1,0,0,0,1174,1089,1,0,0,0,1174,1094,1,0,0,0,1174,1105,1,0,0,
        0,1174,1114,1,0,0,0,1174,1121,1,0,0,0,1174,1123,1,0,0,0,1174,1130,
        1,0,0,0,1174,1154,1,0,0,0,1174,1167,1,0,0,0,1175,15,1,0,0,0,1176,
        1179,3,334,167,0,1177,1179,5,146,0,0,1178,1176,1,0,0,0,1178,1177,
        1,0,0,0,1179,17,1,0,0,0,1180,1181,3,326,163,0,1181,19,1,0,0,0,1182,
        1183,3,328,164,0,1183,21,1,0,0,0,1184,1185,5,52,0,0,1185,1353,5,
        221,0,0,1186,1187,5,81,0,0,1187,1353,5,221,0,0,1188,1190,5,111,0,
        0,1189,1191,5,221,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1353,
        1,0,0,0,1192,1194,5,218,0,0,1193,1195,5,221,0,0,1194,1193,1,0,0,
        0,1194,1195,1,0,0,0,1195,1353,1,0,0,0,1196,1197,5,240,0,0,1197,1353,
        5,111,0,0,1198,1199,5,240,0,0,1199,1201,5,221,0,0,1200,1202,5,111,
        0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1353,1,0,0,0,1203,1204,
        5,240,0,0,1204,1353,5,199,0,0,1205,1206,5,240,0,0,1206,1353,5,222,
        0,0,1207,1208,5,240,0,0,1208,1209,5,55,0,0,1209,1353,5,222,0,0,1210,
        1211,5,91,0,0,1211,1353,5,256,0,0,1212,1213,5,119,0,0,1213,1353,
        5,256,0,0,1214,1215,5,240,0,0,1215,1353,5,47,0,0,1216,1217,5,240,
        0,0,1217,1218,5,52,0,0,1218,1353,5,256,0,0,1219,1220,5,240,0,0,1220,
        1353,5,272,0,0,1221,1222,5,240,0,0,1222,1353,5,123,0,0,1223,1224,
        5,240,0,0,1224,1353,5,149,0,0,1225,1226,5,52,0,0,1226,1353,5,122,
        0,0,1227,1228,5,81,0,0,1228,1353,5,122,0,0,1229,1230,5,11,0,0,1230,
        1353,5,122,0,0,1231,1232,5,148,0,0,1232,1353,5,256,0,0,1233,1234,
        5,148,0,0,1234,1353,5,64,0,0,1235,1236,5,285,0,0,1236,1353,5,256,
        0,0,1237,1238,5,285,0,0,1238,1353,5,64,0,0,1239,1240,5,52,0,0,1240,
        1241,5,261,0,0,1241,1353,5,151,0,0,1242,1243,5,81,0,0,1243,1244,
        5,261,0,0,1244,1353,5,151,0,0,1245,1246,5,11,0,0,1246,1247,5,256,
        0,0,1247,1248,3,220,110,0,1248,1249,5,170,0,0,1249,1250,5,38,0,0,
        1250,1353,1,0,0,0,1251,1252,5,11,0,0,1252,1253,5,256,0,0,1253,1254,
        3,220,110,0,1254,1255,5,38,0,0,1255,1256,5,27,0,0,1256,1353,1,0,
        0,0,1257,1258,5,11,0,0,1258,1259,5,256,0,0,1259,1260,3,220,110,0,
        1260,1261,5,170,0,0,1261,1262,5,244,0,0,1262,1353,1,0,0,0,1263,1264,
        5,11,0,0,1264,1265,5,256,0,0,1265,1266,3,220,110,0,1266,1267,5,241,
        0,0,1267,1268,5,27,0,0,1268,1353,1,0,0,0,1269,1270,5,11,0,0,1270,
        1271,5,256,0,0,1271,1272,3,220,110,0,1272,1273,5,170,0,0,1273,1274,
        5,241,0,0,1274,1353,1,0,0,0,1275,1276,5,11,0,0,1276,1277,5,256,0,
        0,1277,1278,3,220,110,0,1278,1279,5,170,0,0,1279,1280,5,248,0,0,
        1280,1281,5,19,0,0,1281,1282,5,76,0,0,1282,1353,1,0,0,0,1283,1284,
        5,11,0,0,1284,1285,5,256,0,0,1285,1286,3,220,110,0,1286,1287,5,237,
        0,0,1287,1288,5,241,0,0,1288,1289,5,147,0,0,1289,1353,1,0,0,0,1290,
        1291,5,11,0,0,1291,1292,5,256,0,0,1292,1293,3,220,110,0,1293,1294,
        5,87,0,0,1294,1295,5,188,0,0,1295,1353,1,0,0,0,1296,1297,5,11,0,
        0,1297,1298,5,256,0,0,1298,1299,3,220,110,0,1299,1300,5,17,0,0,1300,
        1301,5,188,0,0,1301,1353,1,0,0,0,1302,1303,5,11,0,0,1303,1304,5,
        256,0,0,1304,1305,3,220,110,0,1305,1306,5,279,0,0,1306,1307,5,188,
        0,0,1307,1353,1,0,0,0,1308,1309,5,11,0,0,1309,1310,5,256,0,0,1310,
        1311,3,220,110,0,1311,1312,5,269,0,0,1312,1353,1,0,0,0,1313,1314,
        5,11,0,0,1314,1315,5,256,0,0,1315,1317,3,220,110,0,1316,1318,3,42,
        21,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,
        1320,5,46,0,0,1320,1353,1,0,0,0,1321,1322,5,11,0,0,1322,1323,5,256,
        0,0,1323,1325,3,220,110,0,1324,1326,3,42,21,0,1325,1324,1,0,0,0,
        1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1328,5,49,0,0,1328,1353,
        1,0,0,0,1329,1330,5,11,0,0,1330,1331,5,256,0,0,1331,1333,3,220,110,
        0,1332,1334,3,42,21,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1335,
        1,0,0,0,1335,1336,5,237,0,0,1336,1337,5,99,0,0,1337,1353,1,0,0,0,
        1338,1339,5,11,0,0,1339,1340,5,256,0,0,1340,1342,3,220,110,0,1341,
        1343,3,42,21,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,
        0,0,1344,1345,5,214,0,0,1345,1346,5,43,0,0,1346,1353,1,0,0,0,1347,
        1348,5,246,0,0,1348,1353,5,271,0,0,1349,1353,5,45,0,0,1350,1353,
        5,223,0,0,1351,1353,5,75,0,0,1352,1184,1,0,0,0,1352,1186,1,0,0,0,
        1352,1188,1,0,0,0,1352,1192,1,0,0,0,1352,1196,1,0,0,0,1352,1198,
        1,0,0,0,1352,1203,1,0,0,0,1352,1205,1,0,0,0,1352,1207,1,0,0,0,1352,
        1210,1,0,0,0,1352,1212,1,0,0,0,1352,1214,1,0,0,0,1352,1216,1,0,0,
        0,1352,1219,1,0,0,0,1352,1221,1,0,0,0,1352,1223,1,0,0,0,1352,1225,
        1,0,0,0,1352,1227,1,0,0,0,1352,1229,1,0,0,0,1352,1231,1,0,0,0,1352,
        1233,1,0,0,0,1352,1235,1,0,0,0,1352,1237,1,0,0,0,1352,1239,1,0,0,
        0,1352,1242,1,0,0,0,1352,1245,1,0,0,0,1352,1251,1,0,0,0,1352,1257,
        1,0,0,0,1352,1263,1,0,0,0,1352,1269,1,0,0,0,1352,1275,1,0,0,0,1352,
        1283,1,0,0,0,1352,1290,1,0,0,0,1352,1296,1,0,0,0,1352,1302,1,0,0,
        0,1352,1308,1,0,0,0,1352,1313,1,0,0,0,1352,1321,1,0,0,0,1352,1329,
        1,0,0,0,1352,1338,1,0,0,0,1352,1347,1,0,0,0,1352,1349,1,0,0,0,1352,
        1350,1,0,0,0,1352,1351,1,0,0,0,1353,23,1,0,0,0,1354,1356,5,52,0,
        0,1355,1357,5,261,0,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,1359,
        1,0,0,0,1358,1360,5,93,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,
        1361,1,0,0,0,1361,1365,5,256,0,0,1362,1363,5,117,0,0,1363,1364,5,
        170,0,0,1364,1366,5,89,0,0,1365,1362,1,0,0,0,1365,1366,1,0,0,0,1366,
        1367,1,0,0,0,1367,1368,3,214,107,0,1368,25,1,0,0,0,1369,1370,5,52,
        0,0,1370,1372,5,179,0,0,1371,1369,1,0,0,0,1371,1372,1,0,0,0,1372,
        1373,1,0,0,0,1373,1374,5,214,0,0,1374,1375,5,256,0,0,1375,1376,3,
        214,107,0,1376,27,1,0,0,0,1377,1378,5,38,0,0,1378,1379,5,27,0,0,
        1379,1383,3,190,95,0,1380,1381,5,244,0,0,1381,1382,5,27,0,0,1382,
        1384,3,194,97,0,1383,1380,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,
        0,0,0,1385,1386,5,130,0,0,1386,1387,5,333,0,0,1387,1388,5,26,0,0,
        1388,29,1,0,0,0,1389,1390,5,241,0,0,1390,1391,5,27,0,0,1391,1392,
        3,190,95,0,1392,1395,5,175,0,0,1393,1396,3,70,35,0,1394,1396,3,72,
        36,0,1395,1393,1,0,0,0,1395,1394,1,0,0,0,1396,1400,1,0,0,0,1397,
        1398,5,248,0,0,1398,1399,5,19,0,0,1399,1401,5,76,0,0,1400,1397,1,
        0,0,0,1400,1401,1,0,0,0,1401,31,1,0,0,0,1402,1403,5,147,0,0,1403,
        1404,3,334,167,0,1404,33,1,0,0,0,1405,1406,5,44,0,0,1406,1407,3,
        334,167,0,1407,35,1,0,0,0,1408,1410,3,54,27,0,1409,1408,1,0,0,0,
        1409,1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,3,88,44,0,1412,1413,
        3,84,42,0,1413,37,1,0,0,0,1414,1415,5,127,0,0,1415,1417,5,187,0,
        0,1416,1418,5,256,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,
        1,0,0,0,1419,1426,3,214,107,0,1420,1424,3,42,21,0,1421,1422,5,117,
        0,0,1422,1423,5,170,0,0,1423,1425,5,89,0,0,1424,1421,1,0,0,0,1424,
        1425,1,0,0,0,1425,1427,1,0,0,0,1426,1420,1,0,0,0,1426,1427,1,0,0,
        0,1427,1429,1,0,0,0,1428,1430,3,190,95,0,1429,1428,1,0,0,0,1429,
        1430,1,0,0,0,1430,1485,1,0,0,0,1431,1432,5,127,0,0,1432,1434,5,130,
        0,0,1433,1435,5,256,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,
        1436,1,0,0,0,1436,1438,3,214,107,0,1437,1439,3,42,21,0,1438,1437,
        1,0,0,0,1438,1439,1,0,0,0,1439,1443,1,0,0,0,1440,1441,5,117,0,0,
        1441,1442,5,170,0,0,1442,1444,5,89,0,0,1443,1440,1,0,0,0,1443,1444,
        1,0,0,0,1444,1446,1,0,0,0,1445,1447,3,190,95,0,1446,1445,1,0,0,0,
        1446,1447,1,0,0,0,1447,1485,1,0,0,0,1448,1449,5,127,0,0,1449,1451,
        5,130,0,0,1450,1452,5,256,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,
        0,1452,1453,1,0,0,0,1453,1454,3,214,107,0,1454,1455,5,214,0,0,1455,
        1456,3,122,61,0,1456,1485,1,0,0,0,1457,1458,5,127,0,0,1458,1460,
        5,187,0,0,1459,1461,5,146,0,0,1460,1459,1,0,0,0,1460,1461,1,0,0,
        0,1461,1462,1,0,0,0,1462,1463,5,77,0,0,1463,1465,3,334,167,0,1464,
        1466,3,210,105,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1468,1,
        0,0,0,1467,1469,3,74,37,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,
        1485,1,0,0,0,1470,1471,5,127,0,0,1471,1473,5,187,0,0,1472,1474,5,
        146,0,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,
        1477,5,77,0,0,1476,1478,3,334,167,0,1477,1476,1,0,0,0,1477,1478,
        1,0,0,0,1478,1479,1,0,0,0,1479,1482,3,58,29,0,1480,1481,5,178,0,
        0,1481,1483,3,62,31,0,1482,1480,1,0,0,0,1482,1483,1,0,0,0,1483,1485,
        1,0,0,0,1484,1414,1,0,0,0,1484,1431,1,0,0,0,1484,1448,1,0,0,0,1484,
        1457,1,0,0,0,1484,1470,1,0,0,0,1485,39,1,0,0,0,1486,1488,3,42,21,
        0,1487,1489,3,32,16,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,41,
        1,0,0,0,1490,1491,5,188,0,0,1491,1492,5,2,0,0,1492,1497,3,44,22,
        0,1493,1494,5,4,0,0,1494,1496,3,44,22,0,1495,1493,1,0,0,0,1496,1499,
        1,0,0,0,1497,1495,1,0,0,0,1497,1498,1,0,0,0,1498,1500,1,0,0,0,1499,
        1497,1,0,0,0,1500,1501,5,3,0,0,1501,43,1,0,0,0,1502,1505,3,322,161,
        0,1503,1504,5,306,0,0,1504,1506,3,250,125,0,1505,1503,1,0,0,0,1505,
        1506,1,0,0,0,1506,1512,1,0,0,0,1507,1508,3,322,161,0,1508,1509,5,
        306,0,0,1509,1510,5,69,0,0,1510,1512,1,0,0,0,1511,1502,1,0,0,0,1511,
        1507,1,0,0,0,1512,45,1,0,0,0,1513,1514,7,11,0,0,1514,47,1,0,0,0,
        1515,1516,7,12,0,0,1516,49,1,0,0,0,1517,1523,3,316,158,0,1518,1523,
        3,334,167,0,1519,1523,3,252,126,0,1520,1523,3,254,127,0,1521,1523,
        3,256,128,0,1522,1517,1,0,0,0,1522,1518,1,0,0,0,1522,1519,1,0,0,
        0,1522,1520,1,0,0,0,1522,1521,1,0,0,0,1523,51,1,0,0,0,1524,1529,
        3,322,161,0,1525,1526,5,5,0,0,1526,1528,3,322,161,0,1527,1525,1,
        0,0,0,1528,1531,1,0,0,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,
        53,1,0,0,0,1531,1529,1,0,0,0,1532,1533,5,301,0,0,1533,1538,3,56,
        28,0,1534,1535,5,4,0,0,1535,1537,3,56,28,0,1536,1534,1,0,0,0,1537,
        1540,1,0,0,0,1538,1536,1,0,0,0,1538,1539,1,0,0,0,1539,55,1,0,0,0,
        1540,1538,1,0,0,0,1541,1543,3,318,159,0,1542,1544,3,190,95,0,1543,
        1542,1,0,0,0,1543,1544,1,0,0,0,1544,1546,1,0,0,0,1545,1547,5,19,
        0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1549,
        5,2,0,0,1549,1550,3,36,18,0,1550,1551,5,3,0,0,1551,57,1,0,0,0,1552,
        1553,5,291,0,0,1553,1554,3,214,107,0,1554,59,1,0,0,0,1555,1556,5,
        178,0,0,1556,1569,3,62,31,0,1557,1558,5,189,0,0,1558,1559,5,27,0,
        0,1559,1569,3,228,114,0,1560,1569,3,30,15,0,1561,1569,3,28,14,0,
        1562,1569,3,210,105,0,1563,1569,3,74,37,0,1564,1569,3,32,16,0,1565,
        1569,3,34,17,0,1566,1567,5,260,0,0,1567,1569,3,62,31,0,1568,1555,
        1,0,0,0,1568,1557,1,0,0,0,1568,1560,1,0,0,0,1568,1561,1,0,0,0,1568,
        1562,1,0,0,0,1568,1563,1,0,0,0,1568,1564,1,0,0,0,1568,1565,1,0,0,
        0,1568,1566,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,
        1,0,0,0,1571,61,1,0,0,0,1572,1570,1,0,0,0,1573,1574,5,2,0,0,1574,
        1579,3,64,32,0,1575,1576,5,4,0,0,1576,1578,3,64,32,0,1577,1575,1,
        0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,
        1582,1,0,0,0,1581,1579,1,0,0,0,1582,1583,5,3,0,0,1583,63,1,0,0,0,
        1584,1589,3,66,33,0,1585,1587,5,306,0,0,1586,1585,1,0,0,0,1586,1587,
        1,0,0,0,1587,1588,1,0,0,0,1588,1590,3,68,34,0,1589,1586,1,0,0,0,
        1589,1590,1,0,0,0,1590,65,1,0,0,0,1591,1596,3,322,161,0,1592,1593,
        5,5,0,0,1593,1595,3,322,161,0,1594,1592,1,0,0,0,1595,1598,1,0,0,
        0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,1601,1,0,0,0,1598,1596,
        1,0,0,0,1599,1601,3,334,167,0,1600,1591,1,0,0,0,1600,1599,1,0,0,
        0,1601,67,1,0,0,0,1602,1607,5,333,0,0,1603,1607,5,335,0,0,1604,1607,
        3,258,129,0,1605,1607,3,334,167,0,1606,1602,1,0,0,0,1606,1603,1,
        0,0,0,1606,1604,1,0,0,0,1606,1605,1,0,0,0,1607,69,1,0,0,0,1608,1609,
        5,2,0,0,1609,1614,3,250,125,0,1610,1611,5,4,0,0,1611,1613,3,250,
        125,0,1612,1610,1,0,0,0,1613,1616,1,0,0,0,1614,1612,1,0,0,0,1614,
        1615,1,0,0,0,1615,1617,1,0,0,0,1616,1614,1,0,0,0,1617,1618,5,3,0,
        0,1618,71,1,0,0,0,1619,1620,5,2,0,0,1620,1625,3,70,35,0,1621,1622,
        5,4,0,0,1622,1624,3,70,35,0,1623,1621,1,0,0,0,1624,1627,1,0,0,0,
        1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1625,
        1,0,0,0,1628,1629,5,3,0,0,1629,73,1,0,0,0,1630,1631,5,248,0,0,1631,
        1632,5,19,0,0,1632,1637,3,76,38,0,1633,1634,5,248,0,0,1634,1635,
        5,27,0,0,1635,1637,3,78,39,0,1636,1630,1,0,0,0,1636,1633,1,0,0,0,
        1637,75,1,0,0,0,1638,1639,5,126,0,0,1639,1640,3,334,167,0,1640,1641,
        5,183,0,0,1641,1642,3,334,167,0,1642,1645,1,0,0,0,1643,1645,3,322,
        161,0,1644,1638,1,0,0,0,1644,1643,1,0,0,0,1645,77,1,0,0,0,1646,1650,
        3,334,167,0,1647,1648,5,301,0,0,1648,1649,5,235,0,0,1649,1651,3,
        62,31,0,1650,1647,1,0,0,0,1650,1651,1,0,0,0,1651,79,1,0,0,0,1652,
        1653,3,322,161,0,1653,1654,3,334,167,0,1654,81,1,0,0,0,1655,1656,
        3,38,19,0,1656,1657,3,36,18,0,1657,1712,1,0,0,0,1658,1660,3,130,
        65,0,1659,1661,3,86,43,0,1660,1659,1,0,0,0,1661,1662,1,0,0,0,1662,
        1660,1,0,0,0,1662,1663,1,0,0,0,1663,1712,1,0,0,0,1664,1665,5,71,
        0,0,1665,1666,5,106,0,0,1666,1667,3,214,107,0,1667,1669,3,208,104,
        0,1668,1670,3,122,61,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,
        1712,1,0,0,0,1671,1672,5,288,0,0,1672,1673,3,214,107,0,1673,1674,
        3,208,104,0,1674,1676,3,104,52,0,1675,1677,3,122,61,0,1676,1675,
        1,0,0,0,1676,1677,1,0,0,0,1677,1712,1,0,0,0,1678,1679,5,154,0,0,
        1679,1680,5,130,0,0,1680,1681,3,214,107,0,1681,1682,3,208,104,0,
        1682,1688,5,291,0,0,1683,1689,3,214,107,0,1684,1685,5,2,0,0,1685,
        1686,3,36,18,0,1686,1687,5,3,0,0,1687,1689,1,0,0,0,1688,1683,1,0,
        0,0,1688,1684,1,0,0,0,1689,1690,1,0,0,0,1690,1691,3,208,104,0,1691,
        1692,5,175,0,0,1692,1696,3,240,120,0,1693,1695,3,106,53,0,1694,1693,
        1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,1697,1,0,0,0,1697,
        1702,1,0,0,0,1698,1696,1,0,0,0,1699,1701,3,108,54,0,1700,1699,1,
        0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,
        1708,1,0,0,0,1704,1702,1,0,0,0,1705,1707,3,110,55,0,1706,1705,1,
        0,0,0,1707,1710,1,0,0,0,1708,1706,1,0,0,0,1708,1709,1,0,0,0,1709,
        1712,1,0,0,0,1710,1708,1,0,0,0,1711,1655,1,0,0,0,1711,1658,1,0,0,
        0,1711,1664,1,0,0,0,1711,1671,1,0,0,0,1711,1678,1,0,0,0,1712,83,
        1,0,0,0,1713,1714,5,180,0,0,1714,1715,5,27,0,0,1715,1720,3,92,46,
        0,1716,1717,5,4,0,0,1717,1719,3,92,46,0,1718,1716,1,0,0,0,1719,1722,
        1,0,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,1724,1,0,0,0,1722,
        1720,1,0,0,0,1723,1713,1,0,0,0,1723,1724,1,0,0,0,1724,1735,1,0,0,
        0,1725,1726,5,37,0,0,1726,1727,5,27,0,0,1727,1732,3,236,118,0,1728,
        1729,5,4,0,0,1729,1731,3,236,118,0,1730,1728,1,0,0,0,1731,1734,1,
        0,0,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1736,1,0,0,0,1734,
        1732,1,0,0,0,1735,1725,1,0,0,0,1735,1736,1,0,0,0,1736,1747,1,0,0,
        0,1737,1738,5,79,0,0,1738,1739,5,27,0,0,1739,1744,3,236,118,0,1740,
        1741,5,4,0,0,1741,1743,3,236,118,0,1742,1740,1,0,0,0,1743,1746,1,
        0,0,0,1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,1748,1,0,0,0,1746,
        1744,1,0,0,0,1747,1737,1,0,0,0,1747,1748,1,0,0,0,1748,1759,1,0,0,
        0,1749,1750,5,243,0,0,1750,1751,5,27,0,0,1751,1756,3,92,46,0,1752,
        1753,5,4,0,0,1753,1755,3,92,46,0,1754,1752,1,0,0,0,1755,1758,1,0,
        0,0,1756,1754,1,0,0,0,1756,1757,1,0,0,0,1757,1760,1,0,0,0,1758,1756,
        1,0,0,0,1759,1749,1,0,0,0,1759,1760,1,0,0,0,1760,1762,1,0,0,0,1761,
        1763,3,302,151,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,1769,1,
        0,0,0,1764,1767,5,142,0,0,1765,1768,5,10,0,0,1766,1768,3,236,118,
        0,1767,1765,1,0,0,0,1767,1766,1,0,0,0,1768,1770,1,0,0,0,1769,1764,
        1,0,0,0,1769,1770,1,0,0,0,1770,1773,1,0,0,0,1771,1772,5,174,0,0,
        1772,1774,3,236,118,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,85,
        1,0,0,0,1775,1776,3,38,19,0,1776,1777,3,96,48,0,1777,87,1,0,0,0,
        1778,1779,6,44,-1,0,1779,1780,3,90,45,0,1780,1804,1,0,0,0,1781,1782,
        10,3,0,0,1782,1783,4,44,1,0,1783,1785,7,13,0,0,1784,1786,3,174,87,
        0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1803,
        3,88,44,4,1788,1789,10,2,0,0,1789,1790,4,44,3,0,1790,1792,5,128,
        0,0,1791,1793,3,174,87,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,
        1794,1,0,0,0,1794,1803,3,88,44,3,1795,1796,10,1,0,0,1796,1797,4,
        44,5,0,1797,1799,7,14,0,0,1798,1800,3,174,87,0,1799,1798,1,0,0,0,
        1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1803,3,88,44,2,1802,1781,
        1,0,0,0,1802,1788,1,0,0,0,1802,1795,1,0,0,0,1803,1806,1,0,0,0,1804,
        1802,1,0,0,0,1804,1805,1,0,0,0,1805,89,1,0,0,0,1806,1804,1,0,0,0,
        1807,1817,3,98,49,0,1808,1817,3,94,47,0,1809,1810,5,256,0,0,1810,
        1817,3,214,107,0,1811,1817,3,204,102,0,1812,1813,5,2,0,0,1813,1814,
        3,36,18,0,1814,1815,5,3,0,0,1815,1817,1,0,0,0,1816,1807,1,0,0,0,
        1816,1808,1,0,0,0,1816,1809,1,0,0,0,1816,1811,1,0,0,0,1816,1812,
        1,0,0,0,1817,91,1,0,0,0,1818,1820,3,236,118,0,1819,1821,7,15,0,0,
        1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1824,1,0,0,0,1822,1823,
        5,172,0,0,1823,1825,7,16,0,0,1824,1822,1,0,0,0,1824,1825,1,0,0,0,
        1825,93,1,0,0,0,1826,1828,3,130,65,0,1827,1829,3,96,48,0,1828,1827,
        1,0,0,0,1829,1830,1,0,0,0,1830,1828,1,0,0,0,1830,1831,1,0,0,0,1831,
        95,1,0,0,0,1832,1834,3,100,50,0,1833,1835,3,122,61,0,1834,1833,1,
        0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,1837,3,84,42,0,1837,
        1860,1,0,0,0,1838,1842,3,102,51,0,1839,1841,3,172,86,0,1840,1839,
        1,0,0,0,1841,1844,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,0,1843,
        1846,1,0,0,0,1844,1842,1,0,0,0,1845,1847,3,122,61,0,1846,1845,1,
        0,0,0,1846,1847,1,0,0,0,1847,1849,1,0,0,0,1848,1850,3,134,67,0,1849,
        1848,1,0,0,0,1849,1850,1,0,0,0,1850,1852,1,0,0,0,1851,1853,3,124,
        62,0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,1855,1,0,0,0,1854,
        1856,3,302,151,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,
        0,0,0,1857,1858,3,84,42,0,1858,1860,1,0,0,0,1859,1832,1,0,0,0,1859,
        1838,1,0,0,0,1860,97,1,0,0,0,1861,1863,3,100,50,0,1862,1864,3,130,
        65,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1868,1,0,0,0,1865,
        1867,3,172,86,0,1866,1865,1,0,0,0,1867,1870,1,0,0,0,1868,1866,1,
        0,0,0,1868,1869,1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,0,0,0,1871,
        1873,3,122,61,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1875,1,
        0,0,0,1874,1876,3,134,67,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,
        1878,1,0,0,0,1877,1879,3,124,62,0,1878,1877,1,0,0,0,1878,1879,1,
        0,0,0,1879,1881,1,0,0,0,1880,1882,3,302,151,0,1881,1880,1,0,0,0,
        1881,1882,1,0,0,0,1882,1906,1,0,0,0,1883,1885,3,102,51,0,1884,1886,
        3,130,65,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1890,1,0,0,0,
        1887,1889,3,172,86,0,1888,1887,1,0,0,0,1889,1892,1,0,0,0,1890,1888,
        1,0,0,0,1890,1891,1,0,0,0,1891,1894,1,0,0,0,1892,1890,1,0,0,0,1893,
        1895,3,122,61,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1897,1,
        0,0,0,1896,1898,3,134,67,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,
        1900,1,0,0,0,1899,1901,3,124,62,0,1900,1899,1,0,0,0,1900,1901,1,
        0,0,0,1901,1903,1,0,0,0,1902,1904,3,302,151,0,1903,1902,1,0,0,0,
        1903,1904,1,0,0,0,1904,1906,1,0,0,0,1905,1861,1,0,0,0,1905,1883,
        1,0,0,0,1906,99,1,0,0,0,1907,1908,5,231,0,0,1908,1909,5,273,0,0,
        1909,1911,5,2,0,0,1910,1912,3,174,87,0,1911,1910,1,0,0,0,1911,1912,
        1,0,0,0,1912,1913,1,0,0,0,1913,1914,3,238,119,0,1914,1915,5,3,0,
        0,1915,1927,1,0,0,0,1916,1918,5,152,0,0,1917,1919,3,174,87,0,1918,
        1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,1927,3,238,
        119,0,1921,1923,5,208,0,0,1922,1924,3,174,87,0,1923,1922,1,0,0,0,
        1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,1927,3,238,119,0,1926,1907,
        1,0,0,0,1926,1916,1,0,0,0,1926,1921,1,0,0,0,1927,1929,1,0,0,0,1928,
        1930,3,210,105,0,1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1933,1,
        0,0,0,1931,1932,5,206,0,0,1932,1934,3,334,167,0,1933,1931,1,0,0,
        0,1933,1934,1,0,0,0,1934,1935,1,0,0,0,1935,1936,5,291,0,0,1936,1949,
        3,334,167,0,1937,1947,5,19,0,0,1938,1948,3,192,96,0,1939,1948,3,
        286,143,0,1940,1943,5,2,0,0,1941,1944,3,192,96,0,1942,1944,3,286,
        143,0,1943,1941,1,0,0,0,1943,1942,1,0,0,0,1944,1945,1,0,0,0,1945,
        1946,5,3,0,0,1946,1948,1,0,0,0,1947,1938,1,0,0,0,1947,1939,1,0,0,
        0,1947,1940,1,0,0,0,1948,1950,1,0,0,0,1949,1937,1,0,0,0,1949,1950,
        1,0,0,0,1950,1952,1,0,0,0,1951,1953,3,210,105,0,1952,1951,1,0,0,
        0,1952,1953,1,0,0,0,1953,1956,1,0,0,0,1954,1955,5,205,0,0,1955,1957,
        3,334,167,0,1956,1954,1,0,0,0,1956,1957,1,0,0,0,1957,101,1,0,0,0,
        1958,1962,5,231,0,0,1959,1961,3,126,63,0,1960,1959,1,0,0,0,1961,
        1964,1,0,0,0,1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1966,1,0,0,
        0,1964,1962,1,0,0,0,1965,1967,3,174,87,0,1966,1965,1,0,0,0,1966,
        1967,1,0,0,0,1967,1968,1,0,0,0,1968,1969,3,226,113,0,1969,103,1,
        0,0,0,1970,1971,5,237,0,0,1971,1972,3,118,59,0,1972,105,1,0,0,0,
        1973,1974,5,298,0,0,1974,1977,5,153,0,0,1975,1976,5,13,0,0,1976,
        1978,3,240,120,0,1977,1975,1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,
        0,0,0,1979,1980,5,263,0,0,1980,1981,3,112,56,0,1981,107,1,0,0,0,
        1982,1983,5,298,0,0,1983,1984,5,170,0,0,1984,1987,5,153,0,0,1985,
        1986,5,27,0,0,1986,1988,5,259,0,0,1987,1985,1,0,0,0,1987,1988,1,
        0,0,0,1988,1991,1,0,0,0,1989,1990,5,13,0,0,1990,1992,3,240,120,0,
        1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,1994,
        5,263,0,0,1994,1995,3,114,57,0,1995,109,1,0,0,0,1996,1997,5,298,
        0,0,1997,1998,5,170,0,0,1998,1999,5,153,0,0,1999,2000,5,27,0,0,2000,
        2003,5,245,0,0,2001,2002,5,13,0,0,2002,2004,3,240,120,0,2003,2001,
        1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,2006,5,263,0,0,
        2006,2007,3,116,58,0,2007,111,1,0,0,0,2008,2016,5,71,0,0,2009,2010,
        5,288,0,0,2010,2011,5,237,0,0,2011,2016,5,316,0,0,2012,2013,5,288,
        0,0,2013,2014,5,237,0,0,2014,2016,3,118,59,0,2015,2008,1,0,0,0,2015,
        2009,1,0,0,0,2015,2012,1,0,0,0,2016,113,1,0,0,0,2017,2018,5,127,
        0,0,2018,2036,5,316,0,0,2019,2020,5,127,0,0,2020,2021,5,2,0,0,2021,
        2022,3,212,106,0,2022,2023,5,3,0,0,2023,2024,5,292,0,0,2024,2025,
        5,2,0,0,2025,2030,3,236,118,0,2026,2027,5,4,0,0,2027,2029,3,236,
        118,0,2028,2026,1,0,0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,0,2030,
        2031,1,0,0,0,2031,2033,1,0,0,0,2032,2030,1,0,0,0,2033,2034,5,3,0,
        0,2034,2036,1,0,0,0,2035,2017,1,0,0,0,2035,2019,1,0,0,0,2036,115,
        1,0,0,0,2037,2042,5,71,0,0,2038,2039,5,288,0,0,2039,2040,5,237,0,
        0,2040,2042,3,118,59,0,2041,2037,1,0,0,0,2041,2038,1,0,0,0,2042,
        117,1,0,0,0,2043,2048,3,120,60,0,2044,2045,5,4,0,0,2045,2047,3,120,
        60,0,2046,2044,1,0,0,0,2047,2050,1,0,0,0,2048,2046,1,0,0,0,2048,
        2049,1,0,0,0,2049,119,1,0,0,0,2050,2048,1,0,0,0,2051,2052,3,214,
        107,0,2052,2053,5,306,0,0,2053,2054,3,236,118,0,2054,121,1,0,0,0,
        2055,2056,5,299,0,0,2056,2057,3,240,120,0,2057,123,1,0,0,0,2058,
        2059,5,114,0,0,2059,2060,3,240,120,0,2060,125,1,0,0,0,2061,2062,
        5,326,0,0,2062,2069,3,128,64,0,2063,2065,5,4,0,0,2064,2063,1,0,0,
        0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2068,3,128,64,0,2067,
        2064,1,0,0,0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,
        0,2070,2072,1,0,0,0,2071,2069,1,0,0,0,2072,2073,5,327,0,0,2073,127,
        1,0,0,0,2074,2088,3,322,161,0,2075,2076,3,322,161,0,2076,2077,5,
        2,0,0,2077,2082,3,248,124,0,2078,2079,5,4,0,0,2079,2081,3,248,124,
        0,2080,2078,1,0,0,0,2081,2084,1,0,0,0,2082,2080,1,0,0,0,2082,2083,
        1,0,0,0,2083,2085,1,0,0,0,2084,2082,1,0,0,0,2085,2086,5,3,0,0,2086,
        2088,1,0,0,0,2087,2074,1,0,0,0,2087,2075,1,0,0,0,2088,129,1,0,0,
        0,2089,2090,5,106,0,0,2090,2095,3,176,88,0,2091,2092,5,4,0,0,2092,
        2094,3,176,88,0,2093,2091,1,0,0,0,2094,2097,1,0,0,0,2095,2093,1,
        0,0,0,2095,2096,1,0,0,0,2096,2101,1,0,0,0,2097,2095,1,0,0,0,2098,
        2100,3,172,86,0,2099,2098,1,0,0,0,2100,2103,1,0,0,0,2101,2099,1,
        0,0,0,2101,2102,1,0,0,0,2102,2105,1,0,0,0,2103,2101,1,0,0,0,2104,
        2106,3,144,72,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,2108,1,
        0,0,0,2107,2109,3,150,75,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,
        131,1,0,0,0,2110,2112,5,102,0,0,2111,2110,1,0,0,0,2111,2112,1,0,
        0,0,2112,2113,1,0,0,0,2113,2114,7,17,0,0,2114,2115,5,19,0,0,2115,
        2116,5,173,0,0,2116,2125,3,338,169,0,2117,2119,5,102,0,0,2118,2117,
        1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2121,7,18,0,0,2121,
        2122,5,19,0,0,2122,2123,5,173,0,0,2123,2125,3,244,122,0,2124,2111,
        1,0,0,0,2124,2118,1,0,0,0,2125,133,1,0,0,0,2126,2127,5,112,0,0,2127,
        2128,5,27,0,0,2128,2133,3,136,68,0,2129,2130,5,4,0,0,2130,2132,3,
        136,68,0,2131,2129,1,0,0,0,2132,2135,1,0,0,0,2133,2131,1,0,0,0,2133,
        2134,1,0,0,0,2134,2166,1,0,0,0,2135,2133,1,0,0,0,2136,2137,5,112,
        0,0,2137,2138,5,27,0,0,2138,2143,3,236,118,0,2139,2140,5,4,0,0,2140,
        2142,3,236,118,0,2141,2139,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,
        0,0,0,2143,2144,1,0,0,0,2144,2163,1,0,0,0,2145,2143,1,0,0,0,2146,
        2147,5,301,0,0,2147,2164,5,224,0,0,2148,2149,5,301,0,0,2149,2164,
        5,54,0,0,2150,2151,5,113,0,0,2151,2152,5,239,0,0,2152,2153,5,2,0,
        0,2153,2158,3,142,71,0,2154,2155,5,4,0,0,2155,2157,3,142,71,0,2156,
        2154,1,0,0,0,2157,2160,1,0,0,0,2158,2156,1,0,0,0,2158,2159,1,0,0,
        0,2159,2161,1,0,0,0,2160,2158,1,0,0,0,2161,2162,5,3,0,0,2162,2164,
        1,0,0,0,2163,2146,1,0,0,0,2163,2148,1,0,0,0,2163,2150,1,0,0,0,2163,
        2164,1,0,0,0,2164,2166,1,0,0,0,2165,2126,1,0,0,0,2165,2136,1,0,0,
        0,2166,135,1,0,0,0,2167,2170,3,138,69,0,2168,2170,3,236,118,0,2169,
        2167,1,0,0,0,2169,2168,1,0,0,0,2170,137,1,0,0,0,2171,2172,7,19,0,
        0,2172,2173,5,2,0,0,2173,2178,3,142,71,0,2174,2175,5,4,0,0,2175,
        2177,3,142,71,0,2176,2174,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,
        0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2178,1,0,0,0,2181,
        2182,5,3,0,0,2182,2197,1,0,0,0,2183,2184,5,113,0,0,2184,2185,5,239,
        0,0,2185,2186,5,2,0,0,2186,2191,3,140,70,0,2187,2188,5,4,0,0,2188,
        2190,3,140,70,0,2189,2187,1,0,0,0,2190,2193,1,0,0,0,2191,2189,1,
        0,0,0,2191,2192,1,0,0,0,2192,2194,1,0,0,0,2193,2191,1,0,0,0,2194,
        2195,5,3,0,0,2195,2197,1,0,0,0,2196,2171,1,0,0,0,2196,2183,1,0,0,
        0,2197,139,1,0,0,0,2198,2201,3,138,69,0,2199,2201,3,142,71,0,2200,
        2198,1,0,0,0,2200,2199,1,0,0,0,2201,141,1,0,0,0,2202,2211,5,2,0,
        0,2203,2208,3,236,118,0,2204,2205,5,4,0,0,2205,2207,3,236,118,0,
        2206,2204,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2208,2209,
        1,0,0,0,2209,2212,1,0,0,0,2210,2208,1,0,0,0,2211,2203,1,0,0,0,2211,
        2212,1,0,0,0,2212,2213,1,0,0,0,2213,2216,5,3,0,0,2214,2216,3,236,
        118,0,2215,2202,1,0,0,0,2215,2214,1,0,0,0,2216,143,1,0,0,0,2217,
        2218,5,194,0,0,2218,2219,5,2,0,0,2219,2220,3,226,113,0,2220,2221,
        5,102,0,0,2221,2222,3,146,73,0,2222,2223,5,120,0,0,2223,2224,5,2,
        0,0,2224,2229,3,148,74,0,2225,2226,5,4,0,0,2226,2228,3,148,74,0,
        2227,2225,1,0,0,0,2228,2231,1,0,0,0,2229,2227,1,0,0,0,2229,2230,
        1,0,0,0,2230,2232,1,0,0,0,2231,2229,1,0,0,0,2232,2233,5,3,0,0,2233,
        2234,5,3,0,0,2234,145,1,0,0,0,2235,2248,3,322,161,0,2236,2237,5,
        2,0,0,2237,2242,3,322,161,0,2238,2239,5,4,0,0,2239,2241,3,322,161,
        0,2240,2238,1,0,0,0,2241,2244,1,0,0,0,2242,2240,1,0,0,0,2242,2243,
        1,0,0,0,2243,2245,1,0,0,0,2244,2242,1,0,0,0,2245,2246,5,3,0,0,2246,
        2248,1,0,0,0,2247,2235,1,0,0,0,2247,2236,1,0,0,0,2248,147,1,0,0,
        0,2249,2254,3,236,118,0,2250,2252,5,19,0,0,2251,2250,1,0,0,0,2251,
        2252,1,0,0,0,2252,2253,1,0,0,0,2253,2255,3,322,161,0,2254,2251,1,
        0,0,0,2254,2255,1,0,0,0,2255,149,1,0,0,0,2256,2258,5,286,0,0,2257,
        2259,3,152,76,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,2260,1,
        0,0,0,2260,2261,5,2,0,0,2261,2262,3,154,77,0,2262,2267,5,3,0,0,2263,
        2265,5,19,0,0,2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,2266,1,0,
        0,0,2266,2268,3,322,161,0,2267,2264,1,0,0,0,2267,2268,1,0,0,0,2268,
        151,1,0,0,0,2269,2270,7,20,0,0,2270,2271,5,172,0,0,2271,153,1,0,
        0,0,2272,2275,3,156,78,0,2273,2275,3,158,79,0,2274,2272,1,0,0,0,
        2274,2273,1,0,0,0,2275,155,1,0,0,0,2276,2277,3,162,81,0,2277,2278,
        5,102,0,0,2278,2279,3,164,82,0,2279,2280,5,120,0,0,2280,2281,5,2,
        0,0,2281,2286,3,166,83,0,2282,2283,5,4,0,0,2283,2285,3,166,83,0,
        2284,2282,1,0,0,0,2285,2288,1,0,0,0,2286,2284,1,0,0,0,2286,2287,
        1,0,0,0,2287,2289,1,0,0,0,2288,2286,1,0,0,0,2289,2290,5,3,0,0,2290,
        157,1,0,0,0,2291,2292,5,2,0,0,2292,2297,3,162,81,0,2293,2294,5,4,
        0,0,2294,2296,3,162,81,0,2295,2293,1,0,0,0,2296,2299,1,0,0,0,2297,
        2295,1,0,0,0,2297,2298,1,0,0,0,2298,2300,1,0,0,0,2299,2297,1,0,0,
        0,2300,2301,5,3,0,0,2301,2302,5,102,0,0,2302,2303,3,164,82,0,2303,
        2304,5,120,0,0,2304,2305,5,2,0,0,2305,2310,3,160,80,0,2306,2307,
        5,4,0,0,2307,2309,3,160,80,0,2308,2306,1,0,0,0,2309,2312,1,0,0,0,
        2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,2313,1,0,0,0,2312,2310,
        1,0,0,0,2313,2314,5,3,0,0,2314,159,1,0,0,0,2315,2316,5,2,0,0,2316,
        2321,3,168,84,0,2317,2318,5,4,0,0,2318,2320,3,168,84,0,2319,2317,
        1,0,0,0,2320,2323,1,0,0,0,2321,2319,1,0,0,0,2321,2322,1,0,0,0,2322,
        2324,1,0,0,0,2323,2321,1,0,0,0,2324,2326,5,3,0,0,2325,2327,3,170,
        85,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,161,1,0,0,0,2328,2329,
        3,322,161,0,2329,163,1,0,0,0,2330,2331,3,322,161,0,2331,165,1,0,
        0,0,2332,2334,3,168,84,0,2333,2335,3,170,85,0,2334,2333,1,0,0,0,
        2334,2335,1,0,0,0,2335,167,1,0,0,0,2336,2337,3,214,107,0,2337,169,
        1,0,0,0,2338,2340,5,19,0,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,
        2341,1,0,0,0,2341,2342,3,322,161,0,2342,171,1,0,0,0,2343,2344,5,
        136,0,0,2344,2346,5,294,0,0,2345,2347,5,182,0,0,2346,2345,1,0,0,
        0,2346,2347,1,0,0,0,2347,2348,1,0,0,0,2348,2349,3,316,158,0,2349,
        2358,5,2,0,0,2350,2355,3,236,118,0,2351,2352,5,4,0,0,2352,2354,3,
        236,118,0,2353,2351,1,0,0,0,2354,2357,1,0,0,0,2355,2353,1,0,0,0,
        2355,2356,1,0,0,0,2356,2359,1,0,0,0,2357,2355,1,0,0,0,2358,2350,
        1,0,0,0,2358,2359,1,0,0,0,2359,2360,1,0,0,0,2360,2361,5,3,0,0,2361,
        2373,3,322,161,0,2362,2364,5,19,0,0,2363,2362,1,0,0,0,2363,2364,
        1,0,0,0,2364,2365,1,0,0,0,2365,2370,3,322,161,0,2366,2367,5,4,0,
        0,2367,2369,3,322,161,0,2368,2366,1,0,0,0,2369,2372,1,0,0,0,2370,
        2368,1,0,0,0,2370,2371,1,0,0,0,2371,2374,1,0,0,0,2372,2370,1,0,0,
        0,2373,2363,1,0,0,0,2373,2374,1,0,0,0,2374,173,1,0,0,0,2375,2376,
        7,21,0,0,2376,175,1,0,0,0,2377,2379,5,136,0,0,2378,2377,1,0,0,0,
        2378,2379,1,0,0,0,2379,2380,1,0,0,0,2380,2384,3,202,101,0,2381,2383,
        3,178,89,0,2382,2381,1,0,0,0,2383,2386,1,0,0,0,2384,2382,1,0,0,0,
        2384,2385,1,0,0,0,2385,177,1,0,0,0,2386,2384,1,0,0,0,2387,2391,3,
        180,90,0,2388,2391,3,144,72,0,2389,2391,3,150,75,0,2390,2387,1,0,
        0,0,2390,2388,1,0,0,0,2390,2389,1,0,0,0,2391,179,1,0,0,0,2392,2393,
        3,182,91,0,2393,2395,5,133,0,0,2394,2396,5,136,0,0,2395,2394,1,0,
        0,0,2395,2396,1,0,0,0,2396,2397,1,0,0,0,2397,2399,3,202,101,0,2398,
        2400,3,184,92,0,2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2410,1,
        0,0,0,2401,2402,5,168,0,0,2402,2403,3,182,91,0,2403,2405,5,133,0,
        0,2404,2406,5,136,0,0,2405,2404,1,0,0,0,2405,2406,1,0,0,0,2406,2407,
        1,0,0,0,2407,2408,3,202,101,0,2408,2410,1,0,0,0,2409,2392,1,0,0,
        0,2409,2401,1,0,0,0,2410,181,1,0,0,0,2411,2413,5,124,0,0,2412,2411,
        1,0,0,0,2412,2413,1,0,0,0,2413,2436,1,0,0,0,2414,2436,5,53,0,0,2415,
        2417,5,139,0,0,2416,2418,5,182,0,0,2417,2416,1,0,0,0,2417,2418,1,
        0,0,0,2418,2436,1,0,0,0,2419,2421,5,139,0,0,2420,2419,1,0,0,0,2420,
        2421,1,0,0,0,2421,2422,1,0,0,0,2422,2436,5,232,0,0,2423,2425,5,219,
        0,0,2424,2426,5,182,0,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,
        2436,1,0,0,0,2427,2429,5,107,0,0,2428,2430,5,182,0,0,2429,2428,1,
        0,0,0,2429,2430,1,0,0,0,2430,2436,1,0,0,0,2431,2433,5,139,0,0,2432,
        2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2436,5,14,
        0,0,2435,2412,1,0,0,0,2435,2414,1,0,0,0,2435,2415,1,0,0,0,2435,2420,
        1,0,0,0,2435,2423,1,0,0,0,2435,2427,1,0,0,0,2435,2432,1,0,0,0,2436,
        183,1,0,0,0,2437,2438,5,175,0,0,2438,2442,3,240,120,0,2439,2440,
        5,291,0,0,2440,2442,3,190,95,0,2441,2437,1,0,0,0,2441,2439,1,0,0,
        0,2442,185,1,0,0,0,2443,2444,5,258,0,0,2444,2446,5,2,0,0,2445,2447,
        3,188,94,0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,2448,1,0,0,0,
        2448,2453,5,3,0,0,2449,2450,5,213,0,0,2450,2451,5,2,0,0,2451,2452,
        5,333,0,0,2452,2454,5,3,0,0,2453,2449,1,0,0,0,2453,2454,1,0,0,0,
        2454,187,1,0,0,0,2455,2457,5,315,0,0,2456,2455,1,0,0,0,2456,2457,
        1,0,0,0,2457,2458,1,0,0,0,2458,2459,7,22,0,0,2459,2480,5,193,0,0,
        2460,2461,3,236,118,0,2461,2462,5,226,0,0,2462,2480,1,0,0,0,2463,
        2464,5,25,0,0,2464,2465,5,333,0,0,2465,2466,5,181,0,0,2466,2467,
        5,173,0,0,2467,2476,5,333,0,0,2468,2474,5,175,0,0,2469,2475,3,322,
        161,0,2470,2471,3,316,158,0,2471,2472,5,2,0,0,2472,2473,5,3,0,0,
        2473,2475,1,0,0,0,2474,2469,1,0,0,0,2474,2470,1,0,0,0,2475,2477,
        1,0,0,0,2476,2468,1,0,0,0,2476,2477,1,0,0,0,2477,2480,1,0,0,0,2478,
        2480,3,236,118,0,2479,2456,1,0,0,0,2479,2460,1,0,0,0,2479,2463,1,
        0,0,0,2479,2478,1,0,0,0,2480,189,1,0,0,0,2481,2482,5,2,0,0,2482,
        2483,3,192,96,0,2483,2484,5,3,0,0,2484,191,1,0,0,0,2485,2490,3,318,
        159,0,2486,2487,5,4,0,0,2487,2489,3,318,159,0,2488,2486,1,0,0,0,
        2489,2492,1,0,0,0,2490,2488,1,0,0,0,2490,2491,1,0,0,0,2491,193,1,
        0,0,0,2492,2490,1,0,0,0,2493,2494,5,2,0,0,2494,2499,3,196,98,0,2495,
        2496,5,4,0,0,2496,2498,3,196,98,0,2497,2495,1,0,0,0,2498,2501,1,
        0,0,0,2499,2497,1,0,0,0,2499,2500,1,0,0,0,2500,2502,1,0,0,0,2501,
        2499,1,0,0,0,2502,2503,5,3,0,0,2503,195,1,0,0,0,2504,2506,3,318,
        159,0,2505,2507,7,15,0,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,
        197,1,0,0,0,2508,2509,5,2,0,0,2509,2514,3,200,100,0,2510,2511,5,
        4,0,0,2511,2513,3,200,100,0,2512,2510,1,0,0,0,2513,2516,1,0,0,0,
        2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,2516,2514,
        1,0,0,0,2517,2518,5,3,0,0,2518,199,1,0,0,0,2519,2521,3,322,161,0,
        2520,2522,3,34,17,0,2521,2520,1,0,0,0,2521,2522,1,0,0,0,2522,201,
        1,0,0,0,2523,2525,3,214,107,0,2524,2526,3,132,66,0,2525,2524,1,0,
        0,0,2525,2526,1,0,0,0,2526,2528,1,0,0,0,2527,2529,3,186,93,0,2528,
        2527,1,0,0,0,2528,2529,1,0,0,0,2529,2530,1,0,0,0,2530,2531,3,208,
        104,0,2531,2551,1,0,0,0,2532,2533,5,2,0,0,2533,2534,3,36,18,0,2534,
        2536,5,3,0,0,2535,2537,3,186,93,0,2536,2535,1,0,0,0,2536,2537,1,
        0,0,0,2537,2538,1,0,0,0,2538,2539,3,208,104,0,2539,2551,1,0,0,0,
        2540,2541,5,2,0,0,2541,2542,3,176,88,0,2542,2544,5,3,0,0,2543,2545,
        3,186,93,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,2546,1,0,0,0,
        2546,2547,3,208,104,0,2547,2551,1,0,0,0,2548,2551,3,204,102,0,2549,
        2551,3,206,103,0,2550,2523,1,0,0,0,2550,2532,1,0,0,0,2550,2540,1,
        0,0,0,2550,2548,1,0,0,0,2550,2549,1,0,0,0,2551,203,1,0,0,0,2552,
        2553,5,292,0,0,2553,2558,3,236,118,0,2554,2555,5,4,0,0,2555,2557,
        3,236,118,0,2556,2554,1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,
        0,2558,2559,1,0,0,0,2559,2561,1,0,0,0,2560,2558,1,0,0,0,2561,2562,
        3,208,104,0,2562,205,1,0,0,0,2563,2564,3,314,157,0,2564,2573,5,2,
        0,0,2565,2570,3,236,118,0,2566,2567,5,4,0,0,2567,2569,3,236,118,
        0,2568,2566,1,0,0,0,2569,2572,1,0,0,0,2570,2568,1,0,0,0,2570,2571,
        1,0,0,0,2571,2574,1,0,0,0,2572,2570,1,0,0,0,2573,2565,1,0,0,0,2573,
        2574,1,0,0,0,2574,2575,1,0,0,0,2575,2576,5,3,0,0,2576,2577,3,208,
        104,0,2577,207,1,0,0,0,2578,2580,5,19,0,0,2579,2578,1,0,0,0,2579,
        2580,1,0,0,0,2580,2581,1,0,0,0,2581,2583,3,324,162,0,2582,2584,3,
        190,95,0,2583,2582,1,0,0,0,2583,2584,1,0,0,0,2584,2586,1,0,0,0,2585,
        2579,1,0,0,0,2585,2586,1,0,0,0,2586,209,1,0,0,0,2587,2588,5,225,
        0,0,2588,2589,5,104,0,0,2589,2590,5,234,0,0,2590,2594,3,334,167,
        0,2591,2592,5,301,0,0,2592,2593,5,235,0,0,2593,2595,3,62,31,0,2594,
        2591,1,0,0,0,2594,2595,1,0,0,0,2595,2637,1,0,0,0,2596,2597,5,225,
        0,0,2597,2598,5,104,0,0,2598,2608,5,72,0,0,2599,2600,5,97,0,0,2600,
        2601,5,262,0,0,2601,2602,5,27,0,0,2602,2606,3,334,167,0,2603,2604,
        5,85,0,0,2604,2605,5,27,0,0,2605,2607,3,334,167,0,2606,2603,1,0,
        0,0,2606,2607,1,0,0,0,2607,2609,1,0,0,0,2608,2599,1,0,0,0,2608,2609,
        1,0,0,0,2609,2615,1,0,0,0,2610,2611,5,41,0,0,2611,2612,5,132,0,0,
        2612,2613,5,262,0,0,2613,2614,5,27,0,0,2614,2616,3,334,167,0,2615,
        2610,1,0,0,0,2615,2616,1,0,0,0,2616,2622,1,0,0,0,2617,2618,5,152,
        0,0,2618,2619,5,134,0,0,2619,2620,5,262,0,0,2620,2621,5,27,0,0,2621,
        2623,3,334,167,0,2622,2617,1,0,0,0,2622,2623,1,0,0,0,2623,2628,1,
        0,0,0,2624,2625,5,143,0,0,2625,2626,5,262,0,0,2626,2627,5,27,0,0,
        2627,2629,3,334,167,0,2628,2624,1,0,0,0,2628,2629,1,0,0,0,2629,2634,
        1,0,0,0,2630,2631,5,171,0,0,2631,2632,5,70,0,0,2632,2633,5,19,0,
        0,2633,2635,3,334,167,0,2634,2630,1,0,0,0,2634,2635,1,0,0,0,2635,
        2637,1,0,0,0,2636,2587,1,0,0,0,2636,2596,1,0,0,0,2637,211,1,0,0,
        0,2638,2643,3,214,107,0,2639,2640,5,4,0,0,2640,2642,3,214,107,0,
        2641,2639,1,0,0,0,2642,2645,1,0,0,0,2643,2641,1,0,0,0,2643,2644,
        1,0,0,0,2644,213,1,0,0,0,2645,2643,1,0,0,0,2646,2651,3,318,159,0,
        2647,2648,5,5,0,0,2648,2650,3,318,159,0,2649,2647,1,0,0,0,2650,2653,
        1,0,0,0,2651,2649,1,0,0,0,2651,2652,1,0,0,0,2652,215,1,0,0,0,2653,
        2651,1,0,0,0,2654,2659,3,218,109,0,2655,2656,5,4,0,0,2656,2658,3,
        218,109,0,2657,2655,1,0,0,0,2658,2661,1,0,0,0,2659,2657,1,0,0,0,
        2659,2660,1,0,0,0,2660,217,1,0,0,0,2661,2659,1,0,0,0,2662,2665,3,
        214,107,0,2663,2664,5,178,0,0,2664,2666,3,62,31,0,2665,2663,1,0,
        0,0,2665,2666,1,0,0,0,2666,219,1,0,0,0,2667,2668,3,318,159,0,2668,
        2669,5,5,0,0,2669,2671,1,0,0,0,2670,2667,1,0,0,0,2670,2671,1,0,0,
        0,2671,2672,1,0,0,0,2672,2673,3,318,159,0,2673,221,1,0,0,0,2674,
        2675,3,318,159,0,2675,2676,5,5,0,0,2676,2678,1,0,0,0,2677,2674,1,
        0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2680,3,318,159,0,
        2680,223,1,0,0,0,2681,2689,3,236,118,0,2682,2684,5,19,0,0,2683,2682,
        1,0,0,0,2683,2684,1,0,0,0,2684,2687,1,0,0,0,2685,2688,3,318,159,
        0,2686,2688,3,190,95,0,2687,2685,1,0,0,0,2687,2686,1,0,0,0,2688,
        2690,1,0,0,0,2689,2683,1,0,0,0,2689,2690,1,0,0,0,2690,225,1,0,0,
        0,2691,2696,3,224,112,0,2692,2693,5,4,0,0,2693,2695,3,224,112,0,
        2694,2692,1,0,0,0,2695,2698,1,0,0,0,2696,2694,1,0,0,0,2696,2697,
        1,0,0,0,2697,227,1,0,0,0,2698,2696,1,0,0,0,2699,2700,5,2,0,0,2700,
        2705,3,230,115,0,2701,2702,5,4,0,0,2702,2704,3,230,115,0,2703,2701,
        1,0,0,0,2704,2707,1,0,0,0,2705,2703,1,0,0,0,2705,2706,1,0,0,0,2706,
        2708,1,0,0,0,2707,2705,1,0,0,0,2708,2709,5,3,0,0,2709,229,1,0,0,
        0,2710,2713,3,232,116,0,2711,2713,3,288,144,0,2712,2710,1,0,0,0,
        2712,2711,1,0,0,0,2713,231,1,0,0,0,2714,2728,3,316,158,0,2715,2716,
        3,322,161,0,2716,2717,5,2,0,0,2717,2722,3,234,117,0,2718,2719,5,
        4,0,0,2719,2721,3,234,117,0,2720,2718,1,0,0,0,2721,2724,1,0,0,0,
        2722,2720,1,0,0,0,2722,2723,1,0,0,0,2723,2725,1,0,0,0,2724,2722,
        1,0,0,0,2725,2726,5,3,0,0,2726,2728,1,0,0,0,2727,2714,1,0,0,0,2727,
        2715,1,0,0,0,2728,233,1,0,0,0,2729,2732,3,316,158,0,2730,2732,3,
        250,125,0,2731,2729,1,0,0,0,2731,2730,1,0,0,0,2732,235,1,0,0,0,2733,
        2734,3,240,120,0,2734,237,1,0,0,0,2735,2740,3,236,118,0,2736,2737,
        5,4,0,0,2737,2739,3,236,118,0,2738,2736,1,0,0,0,2739,2742,1,0,0,
        0,2740,2738,1,0,0,0,2740,2741,1,0,0,0,2741,239,1,0,0,0,2742,2740,
        1,0,0,0,2743,2744,6,120,-1,0,2744,2745,5,170,0,0,2745,2756,3,240,
        120,5,2746,2747,5,89,0,0,2747,2748,5,2,0,0,2748,2749,3,36,18,0,2749,
        2750,5,3,0,0,2750,2756,1,0,0,0,2751,2753,3,244,122,0,2752,2754,3,
        242,121,0,2753,2752,1,0,0,0,2753,2754,1,0,0,0,2754,2756,1,0,0,0,
        2755,2743,1,0,0,0,2755,2746,1,0,0,0,2755,2751,1,0,0,0,2756,2765,
        1,0,0,0,2757,2758,10,2,0,0,2758,2759,5,13,0,0,2759,2764,3,240,120,
        3,2760,2761,10,1,0,0,2761,2762,5,179,0,0,2762,2764,3,240,120,2,2763,
        2757,1,0,0,0,2763,2760,1,0,0,0,2764,2767,1,0,0,0,2765,2763,1,0,0,
        0,2765,2766,1,0,0,0,2766,241,1,0,0,0,2767,2765,1,0,0,0,2768,2770,
        5,170,0,0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2771,1,0,0,0,
        2771,2772,5,23,0,0,2772,2773,3,244,122,0,2773,2774,5,13,0,0,2774,
        2775,3,244,122,0,2775,2851,1,0,0,0,2776,2778,5,170,0,0,2777,2776,
        1,0,0,0,2777,2778,1,0,0,0,2778,2779,1,0,0,0,2779,2780,5,120,0,0,
        2780,2781,5,2,0,0,2781,2786,3,236,118,0,2782,2783,5,4,0,0,2783,2785,
        3,236,118,0,2784,2782,1,0,0,0,2785,2788,1,0,0,0,2786,2784,1,0,0,
        0,2786,2787,1,0,0,0,2787,2789,1,0,0,0,2788,2786,1,0,0,0,2789,2790,
        5,3,0,0,2790,2851,1,0,0,0,2791,2793,5,170,0,0,2792,2791,1,0,0,0,
        2792,2793,1,0,0,0,2793,2794,1,0,0,0,2794,2795,5,120,0,0,2795,2796,
        5,2,0,0,2796,2797,3,36,18,0,2797,2798,5,3,0,0,2798,2851,1,0,0,0,
        2799,2801,5,170,0,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,2801,2802,
        1,0,0,0,2802,2803,5,220,0,0,2803,2851,3,244,122,0,2804,2806,5,170,
        0,0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,2807,1,0,0,0,2807,2808,
        7,23,0,0,2808,2822,7,24,0,0,2809,2810,5,2,0,0,2810,2823,5,3,0,0,
        2811,2812,5,2,0,0,2812,2817,3,236,118,0,2813,2814,5,4,0,0,2814,2816,
        3,236,118,0,2815,2813,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,
        0,2817,2818,1,0,0,0,2818,2820,1,0,0,0,2819,2817,1,0,0,0,2820,2821,
        5,3,0,0,2821,2823,1,0,0,0,2822,2809,1,0,0,0,2822,2811,1,0,0,0,2823,
        2851,1,0,0,0,2824,2826,5,170,0,0,2825,2824,1,0,0,0,2825,2826,1,0,
        0,0,2826,2827,1,0,0,0,2827,2828,7,23,0,0,2828,2831,3,244,122,0,2829,
        2830,5,84,0,0,2830,2832,3,334,167,0,2831,2829,1,0,0,0,2831,2832,
        1,0,0,0,2832,2851,1,0,0,0,2833,2835,5,131,0,0,2834,2836,5,170,0,
        0,2835,2834,1,0,0,0,2835,2836,1,0,0,0,2836,2837,1,0,0,0,2837,2851,
        5,171,0,0,2838,2840,5,131,0,0,2839,2841,5,170,0,0,2840,2839,1,0,
        0,0,2840,2841,1,0,0,0,2841,2842,1,0,0,0,2842,2851,7,25,0,0,2843,
        2845,5,131,0,0,2844,2846,5,170,0,0,2845,2844,1,0,0,0,2845,2846,1,
        0,0,0,2846,2847,1,0,0,0,2847,2848,5,78,0,0,2848,2849,5,106,0,0,2849,
        2851,3,244,122,0,2850,2769,1,0,0,0,2850,2777,1,0,0,0,2850,2792,1,
        0,0,0,2850,2800,1,0,0,0,2850,2805,1,0,0,0,2850,2825,1,0,0,0,2850,
        2833,1,0,0,0,2850,2838,1,0,0,0,2850,2843,1,0,0,0,2851,243,1,0,0,
        0,2852,2853,6,122,-1,0,2853,2857,3,248,124,0,2854,2855,7,26,0,0,
        2855,2857,3,244,122,7,2856,2852,1,0,0,0,2856,2854,1,0,0,0,2857,2879,
        1,0,0,0,2858,2859,10,6,0,0,2859,2860,7,27,0,0,2860,2878,3,244,122,
        7,2861,2862,10,5,0,0,2862,2863,7,28,0,0,2863,2878,3,244,122,6,2864,
        2865,10,4,0,0,2865,2866,5,320,0,0,2866,2878,3,244,122,5,2867,2868,
        10,3,0,0,2868,2869,5,323,0,0,2869,2878,3,244,122,4,2870,2871,10,
        2,0,0,2871,2872,5,321,0,0,2872,2878,3,244,122,3,2873,2874,10,1,0,
        0,2874,2875,3,252,126,0,2875,2876,3,244,122,2,2876,2878,1,0,0,0,
        2877,2858,1,0,0,0,2877,2861,1,0,0,0,2877,2864,1,0,0,0,2877,2867,
        1,0,0,0,2877,2870,1,0,0,0,2877,2873,1,0,0,0,2878,2881,1,0,0,0,2879,
        2877,1,0,0,0,2879,2880,1,0,0,0,2880,245,1,0,0,0,2881,2879,1,0,0,
        0,2882,2883,7,29,0,0,2883,247,1,0,0,0,2884,2885,6,124,-1,0,2885,
        3123,7,30,0,0,2886,2887,7,31,0,0,2887,2888,5,2,0,0,2888,2889,3,246,
        123,0,2889,2890,5,4,0,0,2890,2891,3,244,122,0,2891,2892,5,4,0,0,
        2892,2893,3,244,122,0,2893,2894,5,3,0,0,2894,3123,1,0,0,0,2895,2896,
        7,32,0,0,2896,2897,5,2,0,0,2897,2898,3,246,123,0,2898,2899,5,4,0,
        0,2899,2900,3,244,122,0,2900,2901,5,4,0,0,2901,2902,3,244,122,0,
        2902,2903,5,3,0,0,2903,3123,1,0,0,0,2904,2906,5,30,0,0,2905,2907,
        3,300,150,0,2906,2905,1,0,0,0,2907,2908,1,0,0,0,2908,2906,1,0,0,
        0,2908,2909,1,0,0,0,2909,2912,1,0,0,0,2910,2911,5,82,0,0,2911,2913,
        3,236,118,0,2912,2910,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,
        0,2914,2915,5,83,0,0,2915,3123,1,0,0,0,2916,2917,5,30,0,0,2917,2919,
        3,236,118,0,2918,2920,3,300,150,0,2919,2918,1,0,0,0,2920,2921,1,
        0,0,0,2921,2919,1,0,0,0,2921,2922,1,0,0,0,2922,2925,1,0,0,0,2923,
        2924,5,82,0,0,2924,2926,3,236,118,0,2925,2923,1,0,0,0,2925,2926,
        1,0,0,0,2926,2927,1,0,0,0,2927,2928,5,83,0,0,2928,3123,1,0,0,0,2929,
        2930,7,33,0,0,2930,2931,5,2,0,0,2931,2932,3,236,118,0,2932,2933,
        5,19,0,0,2933,2934,3,278,139,0,2934,2935,5,3,0,0,2935,3123,1,0,0,
        0,2936,2937,5,250,0,0,2937,2946,5,2,0,0,2938,2943,3,224,112,0,2939,
        2940,5,4,0,0,2940,2942,3,224,112,0,2941,2939,1,0,0,0,2942,2945,1,
        0,0,0,2943,2941,1,0,0,0,2943,2944,1,0,0,0,2944,2947,1,0,0,0,2945,
        2943,1,0,0,0,2946,2938,1,0,0,0,2946,2947,1,0,0,0,2947,2948,1,0,0,
        0,2948,3123,5,3,0,0,2949,2950,5,100,0,0,2950,2951,5,2,0,0,2951,2954,
        3,236,118,0,2952,2953,5,118,0,0,2953,2955,5,172,0,0,2954,2952,1,
        0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,0,2956,2957,5,3,0,0,2957,
        3123,1,0,0,0,2958,2959,5,16,0,0,2959,2960,5,2,0,0,2960,2963,3,236,
        118,0,2961,2962,5,118,0,0,2962,2964,5,172,0,0,2963,2961,1,0,0,0,
        2963,2964,1,0,0,0,2964,2965,1,0,0,0,2965,2966,5,3,0,0,2966,3123,
        1,0,0,0,2967,2968,5,135,0,0,2968,2969,5,2,0,0,2969,2972,3,236,118,
        0,2970,2971,5,118,0,0,2971,2973,5,172,0,0,2972,2970,1,0,0,0,2972,
        2973,1,0,0,0,2973,2974,1,0,0,0,2974,2975,5,3,0,0,2975,3123,1,0,0,
        0,2976,2977,5,196,0,0,2977,2978,5,2,0,0,2978,2979,3,244,122,0,2979,
        2980,5,120,0,0,2980,2981,3,244,122,0,2981,2982,5,3,0,0,2982,3123,
        1,0,0,0,2983,3123,3,250,125,0,2984,3123,5,316,0,0,2985,2986,3,316,
        158,0,2986,2987,5,5,0,0,2987,2988,5,316,0,0,2988,3123,1,0,0,0,2989,
        2990,5,2,0,0,2990,2993,3,224,112,0,2991,2992,5,4,0,0,2992,2994,3,
        224,112,0,2993,2991,1,0,0,0,2994,2995,1,0,0,0,2995,2993,1,0,0,0,
        2995,2996,1,0,0,0,2996,2997,1,0,0,0,2997,2998,5,3,0,0,2998,3123,
        1,0,0,0,2999,3000,5,2,0,0,3000,3001,3,36,18,0,3001,3002,5,3,0,0,
        3002,3123,1,0,0,0,3003,3004,3,314,157,0,3004,3016,5,2,0,0,3005,3007,
        3,174,87,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,3008,1,0,0,0,
        3008,3013,3,236,118,0,3009,3010,5,4,0,0,3010,3012,3,236,118,0,3011,
        3009,1,0,0,0,3012,3015,1,0,0,0,3013,3011,1,0,0,0,3013,3014,1,0,0,
        0,3014,3017,1,0,0,0,3015,3013,1,0,0,0,3016,3006,1,0,0,0,3016,3017,
        1,0,0,0,3017,3018,1,0,0,0,3018,3025,5,3,0,0,3019,3020,5,98,0,0,3020,
        3021,5,2,0,0,3021,3022,5,299,0,0,3022,3023,3,240,120,0,3023,3024,
        5,3,0,0,3024,3026,1,0,0,0,3025,3019,1,0,0,0,3025,3026,1,0,0,0,3026,
        3029,1,0,0,0,3027,3028,7,34,0,0,3028,3030,5,172,0,0,3029,3027,1,
        0,0,0,3029,3030,1,0,0,0,3030,3033,1,0,0,0,3031,3032,5,184,0,0,3032,
        3034,3,306,153,0,3033,3031,1,0,0,0,3033,3034,1,0,0,0,3034,3123,1,
        0,0,0,3035,3036,3,322,161,0,3036,3037,5,325,0,0,3037,3038,3,236,
        118,0,3038,3123,1,0,0,0,3039,3040,5,2,0,0,3040,3043,3,322,161,0,
        3041,3042,5,4,0,0,3042,3044,3,322,161,0,3043,3041,1,0,0,0,3044,3045,
        1,0,0,0,3045,3043,1,0,0,0,3045,3046,1,0,0,0,3046,3047,1,0,0,0,3047,
        3048,5,3,0,0,3048,3049,5,325,0,0,3049,3050,3,236,118,0,3050,3123,
        1,0,0,0,3051,3123,3,322,161,0,3052,3053,5,2,0,0,3053,3054,3,236,
        118,0,3054,3055,5,3,0,0,3055,3123,1,0,0,0,3056,3057,5,94,0,0,3057,
        3058,5,2,0,0,3058,3059,3,322,161,0,3059,3060,5,106,0,0,3060,3061,
        3,244,122,0,3061,3062,5,3,0,0,3062,3123,1,0,0,0,3063,3064,7,35,0,
        0,3064,3065,5,2,0,0,3065,3066,3,244,122,0,3066,3067,7,36,0,0,3067,
        3070,3,244,122,0,3068,3069,7,37,0,0,3069,3071,3,244,122,0,3070,3068,
        1,0,0,0,3070,3071,1,0,0,0,3071,3072,1,0,0,0,3072,3073,5,3,0,0,3073,
        3123,1,0,0,0,3074,3075,5,274,0,0,3075,3077,5,2,0,0,3076,3078,7,38,
        0,0,3077,3076,1,0,0,0,3077,3078,1,0,0,0,3078,3080,1,0,0,0,3079,3081,
        3,244,122,0,3080,3079,1,0,0,0,3080,3081,1,0,0,0,3081,3082,1,0,0,
        0,3082,3083,5,106,0,0,3083,3084,3,244,122,0,3084,3085,5,3,0,0,3085,
        3123,1,0,0,0,3086,3087,5,186,0,0,3087,3088,5,2,0,0,3088,3089,3,244,
        122,0,3089,3090,5,195,0,0,3090,3091,3,244,122,0,3091,3092,5,106,
        0,0,3092,3095,3,244,122,0,3093,3094,5,102,0,0,3094,3096,3,244,122,
        0,3095,3093,1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,0,0,3097,3098,
        5,3,0,0,3098,3123,1,0,0,0,3099,3100,7,39,0,0,3100,3101,5,2,0,0,3101,
        3102,3,244,122,0,3102,3103,5,3,0,0,3103,3104,5,302,0,0,3104,3105,
        5,112,0,0,3105,3106,5,2,0,0,3106,3107,5,180,0,0,3107,3108,5,27,0,
        0,3108,3109,3,92,46,0,3109,3116,5,3,0,0,3110,3111,5,98,0,0,3111,
        3112,5,2,0,0,3112,3113,5,299,0,0,3113,3114,3,240,120,0,3114,3115,
        5,3,0,0,3115,3117,1,0,0,0,3116,3110,1,0,0,0,3116,3117,1,0,0,0,3117,
        3120,1,0,0,0,3118,3119,5,184,0,0,3119,3121,3,306,153,0,3120,3118,
        1,0,0,0,3120,3121,1,0,0,0,3121,3123,1,0,0,0,3122,2884,1,0,0,0,3122,
        2886,1,0,0,0,3122,2895,1,0,0,0,3122,2904,1,0,0,0,3122,2916,1,0,0,
        0,3122,2929,1,0,0,0,3122,2936,1,0,0,0,3122,2949,1,0,0,0,3122,2958,
        1,0,0,0,3122,2967,1,0,0,0,3122,2976,1,0,0,0,3122,2983,1,0,0,0,3122,
        2984,1,0,0,0,3122,2985,1,0,0,0,3122,2989,1,0,0,0,3122,2999,1,0,0,
        0,3122,3003,1,0,0,0,3122,3035,1,0,0,0,3122,3039,1,0,0,0,3122,3051,
        1,0,0,0,3122,3052,1,0,0,0,3122,3056,1,0,0,0,3122,3063,1,0,0,0,3122,
        3074,1,0,0,0,3122,3086,1,0,0,0,3122,3099,1,0,0,0,3123,3134,1,0,0,
        0,3124,3125,10,9,0,0,3125,3126,5,6,0,0,3126,3127,3,244,122,0,3127,
        3128,5,7,0,0,3128,3133,1,0,0,0,3129,3130,10,7,0,0,3130,3131,5,5,
        0,0,3131,3133,3,322,161,0,3132,3124,1,0,0,0,3132,3129,1,0,0,0,3133,
        3136,1,0,0,0,3134,3132,1,0,0,0,3134,3135,1,0,0,0,3135,249,1,0,0,
        0,3136,3134,1,0,0,0,3137,3152,5,171,0,0,3138,3139,5,324,0,0,3139,
        3152,3,322,161,0,3140,3152,3,260,130,0,3141,3142,3,322,161,0,3142,
        3143,3,334,167,0,3143,3152,1,0,0,0,3144,3152,3,330,165,0,3145,3152,
        3,258,129,0,3146,3148,3,334,167,0,3147,3146,1,0,0,0,3148,3149,1,
        0,0,0,3149,3147,1,0,0,0,3149,3150,1,0,0,0,3150,3152,1,0,0,0,3151,
        3137,1,0,0,0,3151,3138,1,0,0,0,3151,3140,1,0,0,0,3151,3141,1,0,0,
        0,3151,3144,1,0,0,0,3151,3145,1,0,0,0,3151,3147,1,0,0,0,3152,251,
        1,0,0,0,3153,3154,7,40,0,0,3154,253,1,0,0,0,3155,3156,7,41,0,0,3156,
        255,1,0,0,0,3157,3158,7,42,0,0,3158,257,1,0,0,0,3159,3160,7,43,0,
        0,3160,259,1,0,0,0,3161,3164,5,129,0,0,3162,3165,3,262,131,0,3163,
        3165,3,266,133,0,3164,3162,1,0,0,0,3164,3163,1,0,0,0,3164,3165,1,
        0,0,0,3165,261,1,0,0,0,3166,3168,3,264,132,0,3167,3169,3,268,134,
        0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,263,1,0,0,0,3170,3171,
        3,270,135,0,3171,3172,3,272,136,0,3172,3174,1,0,0,0,3173,3170,1,
        0,0,0,3174,3175,1,0,0,0,3175,3173,1,0,0,0,3175,3176,1,0,0,0,3176,
        265,1,0,0,0,3177,3180,3,268,134,0,3178,3181,3,264,132,0,3179,3181,
        3,268,134,0,3180,3178,1,0,0,0,3180,3179,1,0,0,0,3180,3181,1,0,0,
        0,3181,267,1,0,0,0,3182,3183,3,270,135,0,3183,3184,3,274,137,0,3184,
        3185,5,268,0,0,3185,3186,3,274,137,0,3186,269,1,0,0,0,3187,3189,
        7,44,0,0,3188,3187,1,0,0,0,3188,3189,1,0,0,0,3189,3193,1,0,0,0,3190,
        3194,5,333,0,0,3191,3194,5,335,0,0,3192,3194,3,334,167,0,3193,3190,
        1,0,0,0,3193,3191,1,0,0,0,3193,3192,1,0,0,0,3194,271,1,0,0,0,3195,
        3196,7,45,0,0,3196,273,1,0,0,0,3197,3198,7,46,0,0,3198,275,1,0,0,
        0,3199,3203,5,100,0,0,3200,3201,5,9,0,0,3201,3203,3,318,159,0,3202,
        3199,1,0,0,0,3202,3200,1,0,0,0,3203,277,1,0,0,0,3204,3205,5,18,0,
        0,3205,3206,5,310,0,0,3206,3207,3,278,139,0,3207,3208,5,312,0,0,
        3208,3251,1,0,0,0,3209,3210,5,152,0,0,3210,3211,5,310,0,0,3211,3212,
        3,278,139,0,3212,3213,5,4,0,0,3213,3214,3,278,139,0,3214,3215,5,
        312,0,0,3215,3251,1,0,0,0,3216,3223,5,250,0,0,3217,3219,5,310,0,
        0,3218,3220,3,296,148,0,3219,3218,1,0,0,0,3219,3220,1,0,0,0,3220,
        3221,1,0,0,0,3221,3224,5,312,0,0,3222,3224,5,308,0,0,3223,3217,1,
        0,0,0,3223,3222,1,0,0,0,3224,3251,1,0,0,0,3225,3226,5,129,0,0,3226,
        3229,7,47,0,0,3227,3228,5,268,0,0,3228,3230,5,161,0,0,3229,3227,
        1,0,0,0,3229,3230,1,0,0,0,3230,3251,1,0,0,0,3231,3232,5,129,0,0,
        3232,3235,7,48,0,0,3233,3234,5,268,0,0,3234,3236,7,49,0,0,3235,3233,
        1,0,0,0,3235,3236,1,0,0,0,3236,3251,1,0,0,0,3237,3248,3,322,161,
        0,3238,3239,5,2,0,0,3239,3244,5,333,0,0,3240,3241,5,4,0,0,3241,3243,
        5,333,0,0,3242,3240,1,0,0,0,3243,3246,1,0,0,0,3244,3242,1,0,0,0,
        3244,3245,1,0,0,0,3245,3247,1,0,0,0,3246,3244,1,0,0,0,3247,3249,
        5,3,0,0,3248,3238,1,0,0,0,3248,3249,1,0,0,0,3249,3251,1,0,0,0,3250,
        3204,1,0,0,0,3250,3209,1,0,0,0,3250,3216,1,0,0,0,3250,3225,1,0,0,
        0,3250,3231,1,0,0,0,3250,3237,1,0,0,0,3251,279,1,0,0,0,3252,3257,
        3,282,141,0,3253,3254,5,4,0,0,3254,3256,3,282,141,0,3255,3253,1,
        0,0,0,3256,3259,1,0,0,0,3257,3255,1,0,0,0,3257,3258,1,0,0,0,3258,
        281,1,0,0,0,3259,3257,1,0,0,0,3260,3261,3,214,107,0,3261,3264,3,
        278,139,0,3262,3263,5,170,0,0,3263,3265,5,171,0,0,3264,3262,1,0,
        0,0,3264,3265,1,0,0,0,3265,3267,1,0,0,0,3266,3268,3,284,142,0,3267,
        3266,1,0,0,0,3267,3268,1,0,0,0,3268,3270,1,0,0,0,3269,3271,3,34,
        17,0,3270,3269,1,0,0,0,3270,3271,1,0,0,0,3271,3273,1,0,0,0,3272,
        3274,3,276,138,0,3273,3272,1,0,0,0,3273,3274,1,0,0,0,3274,283,1,
        0,0,0,3275,3276,5,69,0,0,3276,3277,3,236,118,0,3277,285,1,0,0,0,
        3278,3283,3,288,144,0,3279,3280,5,4,0,0,3280,3282,3,288,144,0,3281,
        3279,1,0,0,0,3282,3285,1,0,0,0,3283,3281,1,0,0,0,3283,3284,1,0,0,
        0,3284,287,1,0,0,0,3285,3283,1,0,0,0,3286,3287,3,318,159,0,3287,
        3290,3,278,139,0,3288,3289,5,170,0,0,3289,3291,5,171,0,0,3290,3288,
        1,0,0,0,3290,3291,1,0,0,0,3291,3293,1,0,0,0,3292,3294,3,34,17,0,
        3293,3292,1,0,0,0,3293,3294,1,0,0,0,3294,289,1,0,0,0,3295,3300,3,
        292,146,0,3296,3297,5,4,0,0,3297,3299,3,292,146,0,3298,3296,1,0,
        0,0,3299,3302,1,0,0,0,3300,3298,1,0,0,0,3300,3301,1,0,0,0,3301,291,
        1,0,0,0,3302,3300,1,0,0,0,3303,3304,3,318,159,0,3304,3308,3,278,
        139,0,3305,3307,3,294,147,0,3306,3305,1,0,0,0,3307,3310,1,0,0,0,
        3308,3306,1,0,0,0,3308,3309,1,0,0,0,3309,293,1,0,0,0,3310,3308,1,
        0,0,0,3311,3312,5,170,0,0,3312,3316,5,171,0,0,3313,3316,3,284,142,
        0,3314,3316,3,34,17,0,3315,3311,1,0,0,0,3315,3313,1,0,0,0,3315,3314,
        1,0,0,0,3316,295,1,0,0,0,3317,3322,3,298,149,0,3318,3319,5,4,0,0,
        3319,3321,3,298,149,0,3320,3318,1,0,0,0,3321,3324,1,0,0,0,3322,3320,
        1,0,0,0,3322,3323,1,0,0,0,3323,297,1,0,0,0,3324,3322,1,0,0,0,3325,
        3327,3,322,161,0,3326,3328,5,324,0,0,3327,3326,1,0,0,0,3327,3328,
        1,0,0,0,3328,3329,1,0,0,0,3329,3332,3,278,139,0,3330,3331,5,170,
        0,0,3331,3333,5,171,0,0,3332,3330,1,0,0,0,3332,3333,1,0,0,0,3333,
        3335,1,0,0,0,3334,3336,3,34,17,0,3335,3334,1,0,0,0,3335,3336,1,0,
        0,0,3336,299,1,0,0,0,3337,3338,5,298,0,0,3338,3339,3,236,118,0,3339,
        3340,5,263,0,0,3340,3341,3,236,118,0,3341,301,1,0,0,0,3342,3343,
        5,300,0,0,3343,3348,3,304,152,0,3344,3345,5,4,0,0,3345,3347,3,304,
        152,0,3346,3344,1,0,0,0,3347,3350,1,0,0,0,3348,3346,1,0,0,0,3348,
        3349,1,0,0,0,3349,303,1,0,0,0,3350,3348,1,0,0,0,3351,3352,3,318,
        159,0,3352,3353,5,19,0,0,3353,3354,3,306,153,0,3354,305,1,0,0,0,
        3355,3402,3,318,159,0,3356,3357,5,2,0,0,3357,3358,3,318,159,0,3358,
        3359,5,3,0,0,3359,3402,1,0,0,0,3360,3395,5,2,0,0,3361,3362,5,37,
        0,0,3362,3363,5,27,0,0,3363,3368,3,236,118,0,3364,3365,5,4,0,0,3365,
        3367,3,236,118,0,3366,3364,1,0,0,0,3367,3370,1,0,0,0,3368,3366,1,
        0,0,0,3368,3369,1,0,0,0,3369,3396,1,0,0,0,3370,3368,1,0,0,0,3371,
        3372,7,50,0,0,3372,3373,5,27,0,0,3373,3378,3,236,118,0,3374,3375,
        5,4,0,0,3375,3377,3,236,118,0,3376,3374,1,0,0,0,3377,3380,1,0,0,
        0,3378,3376,1,0,0,0,3378,3379,1,0,0,0,3379,3382,1,0,0,0,3380,3378,
        1,0,0,0,3381,3371,1,0,0,0,3381,3382,1,0,0,0,3382,3393,1,0,0,0,3383,
        3384,7,51,0,0,3384,3385,5,27,0,0,3385,3390,3,92,46,0,3386,3387,5,
        4,0,0,3387,3389,3,92,46,0,3388,3386,1,0,0,0,3389,3392,1,0,0,0,3390,
        3388,1,0,0,0,3390,3391,1,0,0,0,3391,3394,1,0,0,0,3392,3390,1,0,0,
        0,3393,3383,1,0,0,0,3393,3394,1,0,0,0,3394,3396,1,0,0,0,3395,3361,
        1,0,0,0,3395,3381,1,0,0,0,3396,3398,1,0,0,0,3397,3399,3,308,154,
        0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,3400,1,0,0,0,3400,3402,
        5,3,0,0,3401,3355,1,0,0,0,3401,3356,1,0,0,0,3401,3360,1,0,0,0,3402,
        307,1,0,0,0,3403,3404,5,204,0,0,3404,3420,3,310,155,0,3405,3406,
        5,226,0,0,3406,3420,3,310,155,0,3407,3408,5,204,0,0,3408,3409,5,
        23,0,0,3409,3410,3,310,155,0,3410,3411,5,13,0,0,3411,3412,3,310,
        155,0,3412,3420,1,0,0,0,3413,3414,5,226,0,0,3414,3415,5,23,0,0,3415,
        3416,3,310,155,0,3416,3417,5,13,0,0,3417,3418,3,310,155,0,3418,3420,
        1,0,0,0,3419,3403,1,0,0,0,3419,3405,1,0,0,0,3419,3407,1,0,0,0,3419,
        3413,1,0,0,0,3420,309,1,0,0,0,3421,3422,5,280,0,0,3422,3429,7,52,
        0,0,3423,3424,5,55,0,0,3424,3429,5,225,0,0,3425,3426,3,236,118,0,
        3426,3427,7,52,0,0,3427,3429,1,0,0,0,3428,3421,1,0,0,0,3428,3423,
        1,0,0,0,3428,3425,1,0,0,0,3429,311,1,0,0,0,3430,3435,3,316,158,0,
        3431,3432,5,4,0,0,3432,3434,3,316,158,0,3433,3431,1,0,0,0,3434,3437,
        1,0,0,0,3435,3433,1,0,0,0,3435,3436,1,0,0,0,3436,313,1,0,0,0,3437,
        3435,1,0,0,0,3438,3443,3,316,158,0,3439,3443,5,98,0,0,3440,3443,
        5,139,0,0,3441,3443,5,219,0,0,3442,3438,1,0,0,0,3442,3439,1,0,0,
        0,3442,3440,1,0,0,0,3442,3441,1,0,0,0,3443,315,1,0,0,0,3444,3449,
        3,322,161,0,3445,3446,5,5,0,0,3446,3448,3,322,161,0,3447,3445,1,
        0,0,0,3448,3451,1,0,0,0,3449,3447,1,0,0,0,3449,3450,1,0,0,0,3450,
        317,1,0,0,0,3451,3449,1,0,0,0,3452,3453,3,322,161,0,3453,3454,3,
        320,160,0,3454,319,1,0,0,0,3455,3456,5,315,0,0,3456,3458,3,322,161,
        0,3457,3455,1,0,0,0,3458,3459,1,0,0,0,3459,3457,1,0,0,0,3459,3460,
        1,0,0,0,3460,3463,1,0,0,0,3461,3463,1,0,0,0,3462,3457,1,0,0,0,3462,
        3461,1,0,0,0,3463,321,1,0,0,0,3464,3468,3,324,162,0,3465,3466,4,
        161,16,0,3466,3468,3,342,171,0,3467,3464,1,0,0,0,3467,3465,1,0,0,
        0,3468,323,1,0,0,0,3469,3476,5,339,0,0,3470,3476,3,326,163,0,3471,
        3472,4,162,17,0,3472,3476,3,340,170,0,3473,3474,4,162,18,0,3474,
        3476,3,344,172,0,3475,3469,1,0,0,0,3475,3470,1,0,0,0,3475,3471,1,
        0,0,0,3475,3473,1,0,0,0,3476,325,1,0,0,0,3477,3481,5,340,0,0,3478,
        3479,4,163,19,0,3479,3481,5,329,0,0,3480,3477,1,0,0,0,3480,3478,
        1,0,0,0,3481,327,1,0,0,0,3482,3483,5,340,0,0,3483,329,1,0,0,0,3484,
        3486,4,165,20,0,3485,3487,5,315,0,0,3486,3485,1,0,0,0,3486,3487,
        1,0,0,0,3487,3488,1,0,0,0,3488,3528,5,334,0,0,3489,3491,4,165,21,
        0,3490,3492,5,315,0,0,3491,3490,1,0,0,0,3491,3492,1,0,0,0,3492,3493,
        1,0,0,0,3493,3528,5,335,0,0,3494,3496,4,165,22,0,3495,3497,5,315,
        0,0,3496,3495,1,0,0,0,3496,3497,1,0,0,0,3497,3498,1,0,0,0,3498,3528,
        7,53,0,0,3499,3501,5,315,0,0,3500,3499,1,0,0,0,3500,3501,1,0,0,0,
        3501,3502,1,0,0,0,3502,3528,5,333,0,0,3503,3505,5,315,0,0,3504,3503,
        1,0,0,0,3504,3505,1,0,0,0,3505,3506,1,0,0,0,3506,3528,5,330,0,0,
        3507,3509,5,315,0,0,3508,3507,1,0,0,0,3508,3509,1,0,0,0,3509,3510,
        1,0,0,0,3510,3528,5,331,0,0,3511,3513,5,315,0,0,3512,3511,1,0,0,
        0,3512,3513,1,0,0,0,3513,3514,1,0,0,0,3514,3528,5,332,0,0,3515,3517,
        5,315,0,0,3516,3515,1,0,0,0,3516,3517,1,0,0,0,3517,3518,1,0,0,0,
        3518,3528,5,337,0,0,3519,3521,5,315,0,0,3520,3519,1,0,0,0,3520,3521,
        1,0,0,0,3521,3522,1,0,0,0,3522,3528,5,336,0,0,3523,3525,5,315,0,
        0,3524,3523,1,0,0,0,3524,3525,1,0,0,0,3525,3526,1,0,0,0,3526,3528,
        5,338,0,0,3527,3484,1,0,0,0,3527,3489,1,0,0,0,3527,3494,1,0,0,0,
        3527,3500,1,0,0,0,3527,3504,1,0,0,0,3527,3508,1,0,0,0,3527,3512,
        1,0,0,0,3527,3516,1,0,0,0,3527,3520,1,0,0,0,3527,3524,1,0,0,0,3528,
        331,1,0,0,0,3529,3530,5,278,0,0,3530,3541,3,278,139,0,3531,3541,
        3,34,17,0,3532,3541,3,276,138,0,3533,3534,7,54,0,0,3534,3535,5,170,
        0,0,3535,3541,5,171,0,0,3536,3537,5,237,0,0,3537,3541,3,284,142,
        0,3538,3539,5,81,0,0,3539,3541,5,69,0,0,3540,3529,1,0,0,0,3540,3531,
        1,0,0,0,3540,3532,1,0,0,0,3540,3533,1,0,0,0,3540,3536,1,0,0,0,3540,
        3538,1,0,0,0,3541,333,1,0,0,0,3542,3546,5,328,0,0,3543,3544,4,167,
        23,0,3544,3546,5,329,0,0,3545,3542,1,0,0,0,3545,3543,1,0,0,0,3546,
        335,1,0,0,0,3547,3550,3,334,167,0,3548,3550,5,171,0,0,3549,3547,
        1,0,0,0,3549,3548,1,0,0,0,3550,337,1,0,0,0,3551,3554,5,333,0,0,3552,
        3554,3,334,167,0,3553,3551,1,0,0,0,3553,3552,1,0,0,0,3554,339,1,
        0,0,0,3555,3556,7,55,0,0,3556,341,1,0,0,0,3557,3558,7,56,0,0,3558,
        343,1,0,0,0,3559,3560,7,57,0,0,3560,345,1,0,0,0,466,350,375,388,
        395,403,405,425,429,435,438,441,448,451,455,458,465,476,478,486,
        489,493,496,502,513,519,524,558,571,596,605,609,615,619,624,630,
        642,650,656,669,674,690,697,701,707,722,726,732,738,741,744,750,
        754,762,764,773,776,785,790,796,803,806,812,823,826,830,835,840,
        847,850,853,860,865,874,882,888,891,894,900,904,909,912,916,918,
        926,934,937,942,948,954,957,961,964,968,996,999,1003,1009,1012,1015,
        1021,1029,1034,1040,1046,1054,1061,1069,1086,1100,1103,1109,1118,
        1127,1135,1140,1145,1152,1158,1163,1171,1174,1178,1190,1194,1201,
        1317,1325,1333,1342,1352,1356,1359,1365,1371,1383,1395,1400,1409,
        1417,1424,1426,1429,1434,1438,1443,1446,1451,1460,1465,1468,1473,
        1477,1482,1484,1488,1497,1505,1511,1522,1529,1538,1543,1546,1568,
        1570,1579,1586,1589,1596,1600,1606,1614,1625,1636,1644,1650,1662,
        1669,1676,1688,1696,1702,1708,1711,1720,1723,1732,1735,1744,1747,
        1756,1759,1762,1767,1769,1773,1785,1792,1799,1802,1804,1816,1820,
        1824,1830,1834,1842,1846,1849,1852,1855,1859,1863,1868,1872,1875,
        1878,1881,1885,1890,1894,1897,1900,1903,1905,1911,1918,1923,1926,
        1929,1933,1943,1947,1949,1952,1956,1962,1966,1977,1987,1991,2003,
        2015,2030,2035,2041,2048,2064,2069,2082,2087,2095,2101,2105,2108,
        2111,2118,2124,2133,2143,2158,2163,2165,2169,2178,2191,2196,2200,
        2208,2211,2215,2229,2242,2247,2251,2254,2258,2264,2267,2274,2286,
        2297,2310,2321,2326,2334,2339,2346,2355,2358,2363,2370,2373,2378,
        2384,2390,2395,2399,2405,2409,2412,2417,2420,2425,2429,2432,2435,
        2441,2446,2453,2456,2474,2476,2479,2490,2499,2506,2514,2521,2525,
        2528,2536,2544,2550,2558,2570,2573,2579,2583,2585,2594,2606,2608,
        2615,2622,2628,2634,2636,2643,2651,2659,2665,2670,2677,2683,2687,
        2689,2696,2705,2712,2722,2727,2731,2740,2753,2755,2763,2765,2769,
        2777,2786,2792,2800,2805,2817,2822,2825,2831,2835,2840,2845,2850,
        2856,2877,2879,2908,2912,2921,2925,2943,2946,2954,2963,2972,2995,
        3006,3013,3016,3025,3029,3033,3045,3070,3077,3080,3095,3116,3120,
        3122,3132,3134,3149,3151,3164,3168,3175,3180,3188,3193,3202,3219,
        3223,3229,3235,3244,3248,3250,3257,3264,3267,3270,3273,3283,3290,
        3293,3300,3308,3315,3322,3327,3332,3335,3348,3368,3378,3381,3390,
        3393,3395,3398,3401,3419,3428,3435,3442,3449,3459,3462,3467,3475,
        3480,3486,3491,3496,3500,3504,3508,3512,3516,3520,3524,3527,3540,
        3545,3549,3553
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBaseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "')'", "','", "'.'", "'['", 
                     "']'", "'ADD'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                     "'AND'", "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", 
                     "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", 
                     "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", 
                     "'CATALOGS'", "'CHANGE'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
                     "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", 
                     "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPACTIONS'", "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", 
                     "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", 
                     "'DATA'", "'DATABASE'", "'DATABASES'", "'DATEADD'", 
                     "'DATEDIFF'", "'DBPROPERTIES'", "'DEFAULT'", "'DEFINED'", 
                     "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DIV'", "'DROP'", "'ELSE'", "'END'", 
                     "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", 
                     "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
                     "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", 
                     "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", 
                     "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", 
                     "'HOURS'", "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", 
                     "'INCLUDE'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", 
                     "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
                     "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", 
                     "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", 
                     "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", 
                     "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", 
                     "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'", 
                     "'MINUTE'", "'MINUTES'", "'MONTH'", "'MONTHS'", "'MSCK'", 
                     "'NAMESPACE'", "'NAMESPACES'", "'NANOSECOND'", "'NANOSECONDS'", 
                     "'NATURAL'", "'NO'", "<INVALID>", "'NULL'", "'NULLS'", 
                     "'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENTILE_CONT'", 
                     "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", "'PLACING'", 
                     "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
                     "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", 
                     "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", "'RECOVER'", 
                     "'REDUCE'", "'REFERENCES'", "'REFRESH'", "'RENAME'", 
                     "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'RESET'", 
                     "'RESPECT'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", "<INVALID>", 
                     "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
                     "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", 
                     "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", 
                     "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", "'SHOW'", 
                     "'SKEWED'", "'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", 
                     "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", 
                     "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM_TIME'", 
                     "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
                     "'TARGET'", "'TBLPROPERTIES'", "<INVALID>", "'TERMINATED'", 
                     "'THEN'", "'TIME'", "'TIMESTAMP'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TO'", "'TOUCH'", "'TRAILING'", 
                     "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", 
                     "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", 
                     "'USE'", "'USER'", "'USING'", "'VALUES'", "'VERSION'", 
                     "'VIEW'", "'VIEWS'", "'WEEK'", "'WEEKS'", "'WHEN'", 
                     "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", 
                     "'YEARS'", "'ZONE'", "<INVALID>", "'<=>'", "'<>'", 
                     "'!='", "'<'", "<INVALID>", "'>'", "<INVALID>", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
                     "'^'", "':'", "'->'", "'/*+'", "'*/'" ]

    symbolicNames = [ "<INVALID>", "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", 
                      "COMMA", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "ADD", 
                      "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANTI", 
                      "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", "AS", "ASC", 
                      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", 
                      "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CATALOG", "CATALOGS", "CHANGE", "CHECK", "CLEAR", 
                      "CLUSTER", "CLUSTERED", "CODEGEN", "COLLATE", "COLLECTION", 
                      "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMPACT", 
                      "COMPACTIONS", "COMPUTE", "CONCATENATE", "CONSTRAINT", 
                      "COST", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "DAY", "DAYS", "DAYOFYEAR", "DATA", "DATABASE", "DATABASES", 
                      "DATEADD", "DATEDIFF", "DBPROPERTIES", "DEFAULT", 
                      "DEFINED", "DELETE", "DELIMITED", "DESC", "DESCRIBE", 
                      "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", 
                      "DIV", "DROP", "ELSE", "END", "ESCAPE", "ESCAPED", 
                      "EXCEPT", "EXCHANGE", "EXCLUDE", "EXISTS", "EXPLAIN", 
                      "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", 
                      "FETCH", "FIELDS", "FILTER", "FILEFORMAT", "FIRST", 
                      "FOLLOWING", "FOR", "FOREIGN", "FORMAT", "FORMATTED", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", 
                      "GRANT", "GROUP", "GROUPING", "HAVING", "HOUR", "HOURS", 
                      "IF", "IGNORE", "IMPORT", "IN", "INCLUDE", "INDEX", 
                      "INDEXES", "INNER", "INPATH", "INPUTFORMAT", "INSERT", 
                      "INTERSECT", "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", 
                      "KEYS", "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", 
                      "LIKE", "ILIKE", "LIMIT", "LINES", "LIST", "LOAD", 
                      "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", "MACRO", 
                      "MAP", "MATCHED", "MERGE", "MICROSECOND", "MICROSECONDS", 
                      "MILLISECOND", "MILLISECONDS", "MINUTE", "MINUTES", 
                      "MONTH", "MONTHS", "MSCK", "NAMESPACE", "NAMESPACES", 
                      "NANOSECOND", "NANOSECONDS", "NATURAL", "NO", "NOT", 
                      "NULL", "NULLS", "OF", "OFFSET", "ON", "ONLY", "OPTION", 
                      "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", 
                      "OVER", "OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION", 
                      "PARTITIONED", "PARTITIONS", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", 
                      "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", "QUARTER", 
                      "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", 
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
                      "REPAIR", "REPEATABLE", "REPLACE", "RESET", "RESPECT", 
                      "RESTRICT", "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", 
                      "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", 
                      "SCHEMA", "SCHEMAS", "SELECT", "SEMI", "SEPARATED", 
                      "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET", 
                      "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", "SORT", 
                      "SORTED", "SOURCE", "START", "STATISTICS", "STORED", 
                      "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", "SYNC", 
                      "SYSTEM_TIME", "SYSTEM_VERSION", "TABLE", "TABLES", 
                      "TABLESAMPLE", "TARGET", "TBLPROPERTIES", "TEMPORARY", 
                      "TERMINATED", "THEN", "TIME", "TIMESTAMP", "TIMESTAMPADD", 
                      "TIMESTAMPDIFF", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TRY_CAST", "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", 
                      "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNPIVOT", 
                      "UNSET", "UPDATE", "USE", "USER", "USING", "VALUES", 
                      "VERSION", "VIEW", "VIEWS", "WEEK", "WEEKS", "WHEN", 
                      "WHERE", "WINDOW", "WITH", "WITHIN", "YEAR", "YEARS", 
                      "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "COLON", "ARROW", "HENT_START", "HENT_END", 
                      "STRING", "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", 
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", 
                      "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", 
                      "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", 
                      "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleMultipartIdentifier = 3
    RULE_singleFunctionIdentifier = 4
    RULE_singleDataType = 5
    RULE_singleTableSchema = 6
    RULE_statement = 7
    RULE_timezone = 8
    RULE_configKey = 9
    RULE_configValue = 10
    RULE_unsupportedHiveNativeCommands = 11
    RULE_createTableHeader = 12
    RULE_replaceTableHeader = 13
    RULE_bucketSpec = 14
    RULE_skewSpec = 15
    RULE_locationSpec = 16
    RULE_commentSpec = 17
    RULE_query = 18
    RULE_insertInto = 19
    RULE_partitionSpecLocation = 20
    RULE_partitionSpec = 21
    RULE_partitionVal = 22
    RULE_namespace = 23
    RULE_namespaces = 24
    RULE_describeFuncName = 25
    RULE_describeColName = 26
    RULE_ctes = 27
    RULE_namedQuery = 28
    RULE_tableProvider = 29
    RULE_createTableClauses = 30
    RULE_propertyList = 31
    RULE_property = 32
    RULE_propertyKey = 33
    RULE_propertyValue = 34
    RULE_constantList = 35
    RULE_nestedConstantList = 36
    RULE_createFileFormat = 37
    RULE_fileFormat = 38
    RULE_storageHandler = 39
    RULE_resource = 40
    RULE_dmlStatementNoWith = 41
    RULE_queryOrganization = 42
    RULE_multiInsertQueryBody = 43
    RULE_queryTerm = 44
    RULE_queryPrimary = 45
    RULE_sortItem = 46
    RULE_fromStatement = 47
    RULE_fromStatementBody = 48
    RULE_querySpecification = 49
    RULE_transformClause = 50
    RULE_selectClause = 51
    RULE_setClause = 52
    RULE_matchedClause = 53
    RULE_notMatchedClause = 54
    RULE_notMatchedBySourceClause = 55
    RULE_matchedAction = 56
    RULE_notMatchedAction = 57
    RULE_notMatchedBySourceAction = 58
    RULE_assignmentList = 59
    RULE_assignment = 60
    RULE_whereClause = 61
    RULE_havingClause = 62
    RULE_hint = 63
    RULE_hintStatement = 64
    RULE_fromClause = 65
    RULE_temporalClause = 66
    RULE_aggregationClause = 67
    RULE_groupByClause = 68
    RULE_groupingAnalytics = 69
    RULE_groupingElement = 70
    RULE_groupingSet = 71
    RULE_pivotClause = 72
    RULE_pivotColumn = 73
    RULE_pivotValue = 74
    RULE_unpivotClause = 75
    RULE_unpivotNullClause = 76
    RULE_unpivotOperator = 77
    RULE_unpivotSingleValueColumnClause = 78
    RULE_unpivotMultiValueColumnClause = 79
    RULE_unpivotColumnSet = 80
    RULE_unpivotValueColumn = 81
    RULE_unpivotNameColumn = 82
    RULE_unpivotColumnAndAlias = 83
    RULE_unpivotColumn = 84
    RULE_unpivotAlias = 85
    RULE_lateralView = 86
    RULE_setQuantifier = 87
    RULE_relation = 88
    RULE_relationExtension = 89
    RULE_joinRelation = 90
    RULE_joinType = 91
    RULE_joinCriteria = 92
    RULE_sample = 93
    RULE_sampleMethod = 94
    RULE_identifierList = 95
    RULE_identifierSeq = 96
    RULE_orderedIdentifierList = 97
    RULE_orderedIdentifier = 98
    RULE_identifierCommentList = 99
    RULE_identifierComment = 100
    RULE_relationPrimary = 101
    RULE_inlineTable = 102
    RULE_functionTable = 103
    RULE_tableAlias = 104
    RULE_rowFormat = 105
    RULE_multipartIdentifierList = 106
    RULE_multipartIdentifier = 107
    RULE_multipartIdentifierPropertyList = 108
    RULE_multipartIdentifierProperty = 109
    RULE_tableIdentifier = 110
    RULE_functionIdentifier = 111
    RULE_namedExpression = 112
    RULE_namedExpressionSeq = 113
    RULE_partitionFieldList = 114
    RULE_partitionField = 115
    RULE_transform = 116
    RULE_transformArgument = 117
    RULE_expression = 118
    RULE_expressionSeq = 119
    RULE_booleanExpression = 120
    RULE_predicate = 121
    RULE_valueExpression = 122
    RULE_datetimeUnit = 123
    RULE_primaryExpression = 124
    RULE_constant = 125
    RULE_comparisonOperator = 126
    RULE_arithmeticOperator = 127
    RULE_predicateOperator = 128
    RULE_booleanValue = 129
    RULE_interval = 130
    RULE_errorCapturingMultiUnitsInterval = 131
    RULE_multiUnitsInterval = 132
    RULE_errorCapturingUnitToUnitInterval = 133
    RULE_unitToUnitInterval = 134
    RULE_intervalValue = 135
    RULE_unitInMultiUnits = 136
    RULE_unitInUnitToUnit = 137
    RULE_colPosition = 138
    RULE_dataType = 139
    RULE_qualifiedColTypeWithPositionList = 140
    RULE_qualifiedColTypeWithPosition = 141
    RULE_defaultExpression = 142
    RULE_colTypeList = 143
    RULE_colType = 144
    RULE_createOrReplaceTableColTypeList = 145
    RULE_createOrReplaceTableColType = 146
    RULE_colDefinitionOption = 147
    RULE_complexColTypeList = 148
    RULE_complexColType = 149
    RULE_whenClause = 150
    RULE_windowClause = 151
    RULE_namedWindow = 152
    RULE_windowSpec = 153
    RULE_windowFrame = 154
    RULE_frameBound = 155
    RULE_qualifiedNameList = 156
    RULE_functionName = 157
    RULE_qualifiedName = 158
    RULE_errorCapturingIdentifier = 159
    RULE_errorCapturingIdentifierExtra = 160
    RULE_identifier = 161
    RULE_strictIdentifier = 162
    RULE_quotedIdentifier = 163
    RULE_backQuotedIdentifier = 164
    RULE_number = 165
    RULE_alterColumnAction = 166
    RULE_stringLit = 167
    RULE_comment = 168
    RULE_version = 169
    RULE_ansiNonReserved = 170
    RULE_strictNonReserved = 171
    RULE_nonReserved = 172

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleMultipartIdentifier", "singleFunctionIdentifier", 
                   "singleDataType", "singleTableSchema", "statement", "timezone", 
                   "configKey", "configValue", "unsupportedHiveNativeCommands", 
                   "createTableHeader", "replaceTableHeader", "bucketSpec", 
                   "skewSpec", "locationSpec", "commentSpec", "query", "insertInto", 
                   "partitionSpecLocation", "partitionSpec", "partitionVal", 
                   "namespace", "namespaces", "describeFuncName", "describeColName", 
                   "ctes", "namedQuery", "tableProvider", "createTableClauses", 
                   "propertyList", "property", "propertyKey", "propertyValue", 
                   "constantList", "nestedConstantList", "createFileFormat", 
                   "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", 
                   "queryOrganization", "multiInsertQueryBody", "queryTerm", 
                   "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", 
                   "querySpecification", "transformClause", "selectClause", 
                   "setClause", "matchedClause", "notMatchedClause", "notMatchedBySourceClause", 
                   "matchedAction", "notMatchedAction", "notMatchedBySourceAction", 
                   "assignmentList", "assignment", "whereClause", "havingClause", 
                   "hint", "hintStatement", "fromClause", "temporalClause", 
                   "aggregationClause", "groupByClause", "groupingAnalytics", 
                   "groupingElement", "groupingSet", "pivotClause", "pivotColumn", 
                   "pivotValue", "unpivotClause", "unpivotNullClause", "unpivotOperator", 
                   "unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause", 
                   "unpivotColumnSet", "unpivotValueColumn", "unpivotNameColumn", 
                   "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", 
                   "lateralView", "setQuantifier", "relation", "relationExtension", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "multipartIdentifierPropertyList", "multipartIdentifierProperty", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "partitionFieldList", "partitionField", 
                   "transform", "transformArgument", "expression", "expressionSeq", 
                   "booleanExpression", "predicate", "valueExpression", 
                   "datetimeUnit", "primaryExpression", "constant", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "errorCapturingMultiUnitsInterval", "multiUnitsInterval", 
                   "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
                   "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "defaultExpression", 
                   "colTypeList", "colType", "createOrReplaceTableColTypeList", 
                   "createOrReplaceTableColType", "colDefinitionOption", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "backQuotedIdentifier", "number", "alterColumnAction", 
                   "stringLit", "comment", "version", "ansiNonReserved", 
                   "strictNonReserved", "nonReserved" ]

    EOF = Token.EOF
    SEMICOLON=1
    LEFT_PAREN=2
    RIGHT_PAREN=3
    COMMA=4
    DOT=5
    LEFT_BRACKET=6
    RIGHT_BRACKET=7
    ADD=8
    AFTER=9
    ALL=10
    ALTER=11
    ANALYZE=12
    AND=13
    ANTI=14
    ANY=15
    ANY_VALUE=16
    ARCHIVE=17
    ARRAY=18
    AS=19
    ASC=20
    AT=21
    AUTHORIZATION=22
    BETWEEN=23
    BOTH=24
    BUCKET=25
    BUCKETS=26
    BY=27
    CACHE=28
    CASCADE=29
    CASE=30
    CAST=31
    CATALOG=32
    CATALOGS=33
    CHANGE=34
    CHECK=35
    CLEAR=36
    CLUSTER=37
    CLUSTERED=38
    CODEGEN=39
    COLLATE=40
    COLLECTION=41
    COLUMN=42
    COLUMNS=43
    COMMENT=44
    COMMIT=45
    COMPACT=46
    COMPACTIONS=47
    COMPUTE=48
    CONCATENATE=49
    CONSTRAINT=50
    COST=51
    CREATE=52
    CROSS=53
    CUBE=54
    CURRENT=55
    CURRENT_DATE=56
    CURRENT_TIME=57
    CURRENT_TIMESTAMP=58
    CURRENT_USER=59
    DAY=60
    DAYS=61
    DAYOFYEAR=62
    DATA=63
    DATABASE=64
    DATABASES=65
    DATEADD=66
    DATEDIFF=67
    DBPROPERTIES=68
    DEFAULT=69
    DEFINED=70
    DELETE=71
    DELIMITED=72
    DESC=73
    DESCRIBE=74
    DFS=75
    DIRECTORIES=76
    DIRECTORY=77
    DISTINCT=78
    DISTRIBUTE=79
    DIV=80
    DROP=81
    ELSE=82
    END=83
    ESCAPE=84
    ESCAPED=85
    EXCEPT=86
    EXCHANGE=87
    EXCLUDE=88
    EXISTS=89
    EXPLAIN=90
    EXPORT=91
    EXTENDED=92
    EXTERNAL=93
    EXTRACT=94
    FALSE=95
    FETCH=96
    FIELDS=97
    FILTER=98
    FILEFORMAT=99
    FIRST=100
    FOLLOWING=101
    FOR=102
    FOREIGN=103
    FORMAT=104
    FORMATTED=105
    FROM=106
    FULL=107
    FUNCTION=108
    FUNCTIONS=109
    GLOBAL=110
    GRANT=111
    GROUP=112
    GROUPING=113
    HAVING=114
    HOUR=115
    HOURS=116
    IF=117
    IGNORE=118
    IMPORT=119
    IN=120
    INCLUDE=121
    INDEX=122
    INDEXES=123
    INNER=124
    INPATH=125
    INPUTFORMAT=126
    INSERT=127
    INTERSECT=128
    INTERVAL=129
    INTO=130
    IS=131
    ITEMS=132
    JOIN=133
    KEYS=134
    LAST=135
    LATERAL=136
    LAZY=137
    LEADING=138
    LEFT=139
    LIKE=140
    ILIKE=141
    LIMIT=142
    LINES=143
    LIST=144
    LOAD=145
    LOCAL=146
    LOCATION=147
    LOCK=148
    LOCKS=149
    LOGICAL=150
    MACRO=151
    MAP=152
    MATCHED=153
    MERGE=154
    MICROSECOND=155
    MICROSECONDS=156
    MILLISECOND=157
    MILLISECONDS=158
    MINUTE=159
    MINUTES=160
    MONTH=161
    MONTHS=162
    MSCK=163
    NAMESPACE=164
    NAMESPACES=165
    NANOSECOND=166
    NANOSECONDS=167
    NATURAL=168
    NO=169
    NOT=170
    NULL=171
    NULLS=172
    OF=173
    OFFSET=174
    ON=175
    ONLY=176
    OPTION=177
    OPTIONS=178
    OR=179
    ORDER=180
    OUT=181
    OUTER=182
    OUTPUTFORMAT=183
    OVER=184
    OVERLAPS=185
    OVERLAY=186
    OVERWRITE=187
    PARTITION=188
    PARTITIONED=189
    PARTITIONS=190
    PERCENTILE_CONT=191
    PERCENTILE_DISC=192
    PERCENTLIT=193
    PIVOT=194
    PLACING=195
    POSITION=196
    PRECEDING=197
    PRIMARY=198
    PRINCIPALS=199
    PROPERTIES=200
    PURGE=201
    QUARTER=202
    QUERY=203
    RANGE=204
    RECORDREADER=205
    RECORDWRITER=206
    RECOVER=207
    REDUCE=208
    REFERENCES=209
    REFRESH=210
    RENAME=211
    REPAIR=212
    REPEATABLE=213
    REPLACE=214
    RESET=215
    RESPECT=216
    RESTRICT=217
    REVOKE=218
    RIGHT=219
    RLIKE=220
    ROLE=221
    ROLES=222
    ROLLBACK=223
    ROLLUP=224
    ROW=225
    ROWS=226
    SECOND=227
    SECONDS=228
    SCHEMA=229
    SCHEMAS=230
    SELECT=231
    SEMI=232
    SEPARATED=233
    SERDE=234
    SERDEPROPERTIES=235
    SESSION_USER=236
    SET=237
    SETMINUS=238
    SETS=239
    SHOW=240
    SKEWED=241
    SOME=242
    SORT=243
    SORTED=244
    SOURCE=245
    START=246
    STATISTICS=247
    STORED=248
    STRATIFY=249
    STRUCT=250
    SUBSTR=251
    SUBSTRING=252
    SYNC=253
    SYSTEM_TIME=254
    SYSTEM_VERSION=255
    TABLE=256
    TABLES=257
    TABLESAMPLE=258
    TARGET=259
    TBLPROPERTIES=260
    TEMPORARY=261
    TERMINATED=262
    THEN=263
    TIME=264
    TIMESTAMP=265
    TIMESTAMPADD=266
    TIMESTAMPDIFF=267
    TO=268
    TOUCH=269
    TRAILING=270
    TRANSACTION=271
    TRANSACTIONS=272
    TRANSFORM=273
    TRIM=274
    TRUE=275
    TRUNCATE=276
    TRY_CAST=277
    TYPE=278
    UNARCHIVE=279
    UNBOUNDED=280
    UNCACHE=281
    UNION=282
    UNIQUE=283
    UNKNOWN=284
    UNLOCK=285
    UNPIVOT=286
    UNSET=287
    UPDATE=288
    USE=289
    USER=290
    USING=291
    VALUES=292
    VERSION=293
    VIEW=294
    VIEWS=295
    WEEK=296
    WEEKS=297
    WHEN=298
    WHERE=299
    WINDOW=300
    WITH=301
    WITHIN=302
    YEAR=303
    YEARS=304
    ZONE=305
    EQ=306
    NSEQ=307
    NEQ=308
    NEQJ=309
    LT=310
    LTE=311
    GT=312
    GTE=313
    PLUS=314
    MINUS=315
    ASTERISK=316
    SLASH=317
    PERCENT=318
    TILDE=319
    AMPERSAND=320
    PIPE=321
    CONCAT_PIPE=322
    HAT=323
    COLON=324
    ARROW=325
    HENT_START=326
    HENT_END=327
    STRING=328
    DOUBLEQUOTED_STRING=329
    BIGINT_LITERAL=330
    SMALLINT_LITERAL=331
    TINYINT_LITERAL=332
    INTEGER_VALUE=333
    EXPONENT_VALUE=334
    DECIMAL_VALUE=335
    FLOAT_LITERAL=336
    DOUBLE_LITERAL=337
    BIGDECIMAL_LITERAL=338
    IDENTIFIER=339
    BACKQUOTED_IDENTIFIER=340
    SIMPLE_COMMENT=341
    BRACKETED_COMMENT=342
    WS=343
    UNRECOGNIZED=344

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    """
    When false, INTERSECT is given the greater precedence over the other set
    operations (UNION, EXCEPT and MINUS) as per the SQL standard.
    """
    legacy_setops_precedence_enabled: bool = False

    """
    When false, a literal with an exponent would be converted into
    double type rather than decimal type.
    """
    legacy_exponent_literal_as_decimal_enabled: bool = False

    """
    When true, the behavior of keywords follows ANSI SQL standard.
    """
    SQL_standard_keyword_behavior: bool = False

    """
    When true, double quoted literals are identifiers rather than STRINGs.
    """
    double_quoted_identifiers: bool = False


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SEMICOLON)
            else:
                return self.getToken(SqlBaseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.statement()
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 347
                self.match(SqlBaseParser.SEMICOLON)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 353
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.namedExpression()
            self.state = 356
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.tableIdentifier()
            self.state = 359
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleMultipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleMultipartIdentifier" ):
                listener.enterSingleMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleMultipartIdentifier" ):
                listener.exitSingleMultipartIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = SqlBaseParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.multipartIdentifier()
            self.state = 362
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.functionIdentifier()
            self.state = 365
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.dataType()
            self.state = 368
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = SqlBaseParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.colTypeList()
            self.state = 371
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropNamespace" ):
                listener.enterDropNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropNamespace" ):
                listener.exitDropNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class SetCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCatalog" ):
                listener.enterSetCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCatalog" ):
                listener.exitSetCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetCatalog" ):
                return visitor.visitSetCatalog(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DropIndexContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentNamespace" ):
                listener.enterShowCurrentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentNamespace" ):
                listener.exitShowCurrentNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def namespaces(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespacesContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNamespaces" ):
                listener.enterShowNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNamespaces" ):
                listener.exitShowNamespaces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.ReplaceTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def createOrReplaceTableColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTable" ):
                listener.enterReplaceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTable" ):
                listener.exitReplaceTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTables" ):
                listener.enterAnalyzeTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTables" ):
                listener.exitAnalyzeTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyzeTables" ):
                return visitor.visitAnalyzeTables(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceLocation" ):
                listener.enterSetNamespaceLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceLocation" ):
                listener.exitSetNamespaceLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceProperties" ):
                listener.enterSetNamespaceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceProperties" ):
                listener.exitSetNamespaceProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class SetQuotedConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def configValue(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuotedConfiguration" ):
                listener.enterSetQuotedConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuotedConfiguration" ):
                listener.exitSetQuotedConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuotedConfiguration" ):
                return visitor.visitSetQuotedConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # StringLitContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveReplaceColumns" ):
                listener.enterHiveReplaceColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveReplaceColumns" ):
                listener.exitHiveReplaceColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def comment(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentNamespace" ):
                listener.enterCommentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentNamespace" ):
                listener.exitCommentNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ResetQuotedConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetQuotedConfiguration" ):
                listener.enterResetQuotedConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetQuotedConfiguration" ):
                listener.exitResetQuotedConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetQuotedConfiguration" ):
                return visitor.visitResetQuotedConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def createOrReplaceTableColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # PropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeRelation" ):
                listener.enterDescribeRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeRelation" ):
                listener.exitDescribeRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.from_ = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableColumn" ):
                listener.enterRenameTableColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableColumn" ):
                listener.exitRenameTableColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveChangeColumn" ):
                listener.enterHiveChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveChangeColumn" ):
                listener.exitHiveChangeColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)

        def timezone(self):
            return self.getTypedRuleContext(SqlBaseParser.TimezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTimeZone" ):
                return visitor.visitSetTimeZone(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableExtendedContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableExtended" ):
                listener.enterShowTableExtended(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableExtended" ):
                listener.exitShowTableExtended(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTableExtended" ):
                return visitor.visitShowTableExtended(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeNamespace" ):
                listener.enterDescribeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeNamespace" ):
                listener.exitDescribeNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ALTER)
            else:
                return self.getToken(SqlBaseParser.ALTER, i)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterColumnActionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlterColumn" ):
                listener.enterAlterTableAlterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlterColumn" ):
                listener.exitAlterTableAlterColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class RefreshFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshFunction" ):
                listener.enterRefreshFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshFunction" ):
                listener.exitRefreshFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshFunction" ):
                return visitor.visitRefreshFunction(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def comment(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateIndexContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.indexType = None # IdentifierContext
            self.columns = None # MultipartIdentifierPropertyListContext
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def multipartIdentifierPropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierPropertyListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)


    class UseNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseNamespace" ):
                listener.enterUseNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseNamespace" ):
                listener.exitUseNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseNamespace" ):
                return visitor.visitUseNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DBPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PROPERTIES)
            else:
                return self.getToken(SqlBaseParser.PROPERTIES, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateNamespace" ):
                listener.enterCreateNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateNamespace" ):
                listener.exitCreateNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # PropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableColumns" ):
                listener.enterDropTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableColumns" ):
                listener.exitDropTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViews" ):
                listener.enterShowViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViews" ):
                listener.exitShowViews(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.legacy = None # MultipartIdentifierContext
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==301:
                    self.state = 374
                    self.ctes()


                self.state = 377
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 378
                self.match(SqlBaseParser.USE)
                self.state = 379
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UseNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 380
                self.match(SqlBaseParser.USE)
                self.state = 381
                self.namespace()
                self.state = 382
                self.multipartIdentifier()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.SetCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 384
                self.match(SqlBaseParser.SET)
                self.state = 385
                self.match(SqlBaseParser.CATALOG)
                self.state = 388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 386
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 387
                    self.stringLit()
                    pass


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 390
                self.match(SqlBaseParser.CREATE)
                self.state = 391
                self.namespace()
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.match(SqlBaseParser.IF)
                    self.state = 393
                    self.match(SqlBaseParser.NOT)
                    self.state = 394
                    self.match(SqlBaseParser.EXISTS)


                self.state = 397
                self.multipartIdentifier()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or _la==147 or _la==301:
                    self.state = 403
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [44]:
                        self.state = 398
                        self.commentSpec()
                        pass
                    elif token in [147]:
                        self.state = 399
                        self.locationSpec()
                        pass
                    elif token in [301]:
                        self.state = 400
                        self.match(SqlBaseParser.WITH)
                        self.state = 401
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==200):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 402
                        self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = SqlBaseParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 408
                self.match(SqlBaseParser.ALTER)
                self.state = 409
                self.namespace()
                self.state = 410
                self.multipartIdentifier()
                self.state = 411
                self.match(SqlBaseParser.SET)
                self.state = 412
                _la = self._input.LA(1)
                if not(_la==68 or _la==200):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 413
                self.propertyList()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 415
                self.match(SqlBaseParser.ALTER)
                self.state = 416
                self.namespace()
                self.state = 417
                self.multipartIdentifier()
                self.state = 418
                self.match(SqlBaseParser.SET)
                self.state = 419
                self.locationSpec()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 421
                self.match(SqlBaseParser.DROP)
                self.state = 422
                self.namespace()
                self.state = 425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 423
                    self.match(SqlBaseParser.IF)
                    self.state = 424
                    self.match(SqlBaseParser.EXISTS)


                self.state = 427
                self.multipartIdentifier()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29 or _la==217:
                    self.state = 428
                    _la = self._input.LA(1)
                    if not(_la==29 or _la==217):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 431
                self.match(SqlBaseParser.SHOW)
                self.state = 432
                self.namespaces()
                self.state = 435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 433
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 434
                    self.multipartIdentifier()


                self.state = 441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 438
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 437
                        self.match(SqlBaseParser.LIKE)


                    self.state = 440
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 443
                self.createTableHeader()
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 445
                    self.createOrReplaceTableColTypeList()
                    self.state = 446
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 450
                    self.tableProvider()


                self.state = 453
                self.createTableClauses()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==19 or _la==106 or _la==152 or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 281474985099265) != 0) or _la==292 or _la==301:
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==19:
                        self.state = 454
                        self.match(SqlBaseParser.AS)


                    self.state = 457
                    self.query()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 460
                self.match(SqlBaseParser.CREATE)
                self.state = 461
                self.match(SqlBaseParser.TABLE)
                self.state = 465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 462
                    self.match(SqlBaseParser.IF)
                    self.state = 463
                    self.match(SqlBaseParser.NOT)
                    self.state = 464
                    self.match(SqlBaseParser.EXISTS)


                self.state = 467
                localctx.target = self.tableIdentifier()
                self.state = 468
                self.match(SqlBaseParser.LIKE)
                self.state = 469
                localctx.source = self.tableIdentifier()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==147 or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & 34368126977) != 0) or _la==291:
                    self.state = 476
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [291]:
                        self.state = 470
                        self.tableProvider()
                        pass
                    elif token in [225]:
                        self.state = 471
                        self.rowFormat()
                        pass
                    elif token in [248]:
                        self.state = 472
                        self.createFileFormat()
                        pass
                    elif token in [147]:
                        self.state = 473
                        self.locationSpec()
                        pass
                    elif token in [260]:
                        self.state = 474
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 475
                        localctx.tableProps = self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 481
                self.replaceTableHeader()
                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 483
                    self.createOrReplaceTableColTypeList()
                    self.state = 484
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 488
                    self.tableProvider()


                self.state = 491
                self.createTableClauses()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==19 or _la==106 or _la==152 or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 281474985099265) != 0) or _la==292 or _la==301:
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==19:
                        self.state = 492
                        self.match(SqlBaseParser.AS)


                    self.state = 495
                    self.query()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 498
                self.match(SqlBaseParser.ANALYZE)
                self.state = 499
                self.match(SqlBaseParser.TABLE)
                self.state = 500
                self.multipartIdentifier()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 501
                    self.partitionSpec()


                self.state = 504
                self.match(SqlBaseParser.COMPUTE)
                self.state = 505
                self.match(SqlBaseParser.STATISTICS)
                self.state = 513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 506
                    self.identifier()

                elif la_ == 2:
                    self.state = 507
                    self.match(SqlBaseParser.FOR)
                    self.state = 508
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 509
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 510
                    self.match(SqlBaseParser.FOR)
                    self.state = 511
                    self.match(SqlBaseParser.ALL)
                    self.state = 512
                    self.match(SqlBaseParser.COLUMNS)


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.AnalyzeTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 515
                self.match(SqlBaseParser.ANALYZE)
                self.state = 516
                self.match(SqlBaseParser.TABLES)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106 or _la==120:
                    self.state = 517
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 518
                    self.multipartIdentifier()


                self.state = 521
                self.match(SqlBaseParser.COMPUTE)
                self.state = 522
                self.match(SqlBaseParser.STATISTICS)
                self.state = 524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 523
                    self.identifier()


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 526
                self.match(SqlBaseParser.ALTER)
                self.state = 527
                self.match(SqlBaseParser.TABLE)
                self.state = 528
                self.multipartIdentifier()
                self.state = 529
                self.match(SqlBaseParser.ADD)
                self.state = 530
                _la = self._input.LA(1)
                if not(_la==42 or _la==43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 531
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 533
                self.match(SqlBaseParser.ALTER)
                self.state = 534
                self.match(SqlBaseParser.TABLE)
                self.state = 535
                self.multipartIdentifier()
                self.state = 536
                self.match(SqlBaseParser.ADD)
                self.state = 537
                _la = self._input.LA(1)
                if not(_la==42 or _la==43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 538
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 539
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 540
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 542
                self.match(SqlBaseParser.ALTER)
                self.state = 543
                self.match(SqlBaseParser.TABLE)
                self.state = 544
                localctx.table = self.multipartIdentifier()
                self.state = 545
                self.match(SqlBaseParser.RENAME)
                self.state = 546
                self.match(SqlBaseParser.COLUMN)
                self.state = 547
                localctx.from_ = self.multipartIdentifier()
                self.state = 548
                self.match(SqlBaseParser.TO)
                self.state = 549
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 551
                self.match(SqlBaseParser.ALTER)
                self.state = 552
                self.match(SqlBaseParser.TABLE)
                self.state = 553
                self.multipartIdentifier()
                self.state = 554
                self.match(SqlBaseParser.DROP)
                self.state = 555
                _la = self._input.LA(1)
                if not(_la==42 or _la==43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 556
                    self.match(SqlBaseParser.IF)
                    self.state = 557
                    self.match(SqlBaseParser.EXISTS)


                self.state = 560
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 561
                localctx.columns = self.multipartIdentifierList()
                self.state = 562
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 564
                self.match(SqlBaseParser.ALTER)
                self.state = 565
                self.match(SqlBaseParser.TABLE)
                self.state = 566
                self.multipartIdentifier()
                self.state = 567
                self.match(SqlBaseParser.DROP)
                self.state = 568
                _la = self._input.LA(1)
                if not(_la==42 or _la==43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 569
                    self.match(SqlBaseParser.IF)
                    self.state = 570
                    self.match(SqlBaseParser.EXISTS)


                self.state = 573
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 575
                self.match(SqlBaseParser.ALTER)
                self.state = 576
                _la = self._input.LA(1)
                if not(_la==256 or _la==294):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 577
                localctx.from_ = self.multipartIdentifier()
                self.state = 578
                self.match(SqlBaseParser.RENAME)
                self.state = 579
                self.match(SqlBaseParser.TO)
                self.state = 580
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 582
                self.match(SqlBaseParser.ALTER)
                self.state = 583
                _la = self._input.LA(1)
                if not(_la==256 or _la==294):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 584
                self.multipartIdentifier()
                self.state = 585
                self.match(SqlBaseParser.SET)
                self.state = 586
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 587
                self.propertyList()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 589
                self.match(SqlBaseParser.ALTER)
                self.state = 590
                _la = self._input.LA(1)
                if not(_la==256 or _la==294):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 591
                self.multipartIdentifier()
                self.state = 592
                self.match(SqlBaseParser.UNSET)
                self.state = 593
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 594
                    self.match(SqlBaseParser.IF)
                    self.state = 595
                    self.match(SqlBaseParser.EXISTS)


                self.state = 598
                self.propertyList()
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 600
                self.match(SqlBaseParser.ALTER)
                self.state = 601
                self.match(SqlBaseParser.TABLE)
                self.state = 602
                localctx.table = self.multipartIdentifier()
                self.state = 603
                _la = self._input.LA(1)
                if not(_la==11 or _la==34):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.match(SqlBaseParser.COLUMN)


                self.state = 607
                localctx.column = self.multipartIdentifier()
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==44 or _la==81 or _la==100 or _la==237 or _la==278:
                    self.state = 608
                    self.alterColumnAction()


                pass

            elif la_ == 25:
                localctx = SqlBaseParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 611
                self.match(SqlBaseParser.ALTER)
                self.state = 612
                self.match(SqlBaseParser.TABLE)
                self.state = 613
                localctx.table = self.multipartIdentifier()
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 614
                    self.partitionSpec()


                self.state = 617
                self.match(SqlBaseParser.CHANGE)
                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 618
                    self.match(SqlBaseParser.COLUMN)


                self.state = 621
                localctx.colName = self.multipartIdentifier()
                self.state = 622
                self.colType()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==100:
                    self.state = 623
                    self.colPosition()


                pass

            elif la_ == 26:
                localctx = SqlBaseParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 626
                self.match(SqlBaseParser.ALTER)
                self.state = 627
                self.match(SqlBaseParser.TABLE)
                self.state = 628
                localctx.table = self.multipartIdentifier()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 629
                    self.partitionSpec()


                self.state = 632
                self.match(SqlBaseParser.REPLACE)
                self.state = 633
                self.match(SqlBaseParser.COLUMNS)
                self.state = 634
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 635
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 636
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 638
                self.match(SqlBaseParser.ALTER)
                self.state = 639
                self.match(SqlBaseParser.TABLE)
                self.state = 640
                self.multipartIdentifier()
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 641
                    self.partitionSpec()


                self.state = 644
                self.match(SqlBaseParser.SET)
                self.state = 645
                self.match(SqlBaseParser.SERDE)
                self.state = 646
                self.stringLit()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==301:
                    self.state = 647
                    self.match(SqlBaseParser.WITH)
                    self.state = 648
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 649
                    self.propertyList()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 652
                self.match(SqlBaseParser.ALTER)
                self.state = 653
                self.match(SqlBaseParser.TABLE)
                self.state = 654
                self.multipartIdentifier()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 655
                    self.partitionSpec()


                self.state = 658
                self.match(SqlBaseParser.SET)
                self.state = 659
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 660
                self.propertyList()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 662
                self.match(SqlBaseParser.ALTER)
                self.state = 663
                _la = self._input.LA(1)
                if not(_la==256 or _la==294):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 664
                self.multipartIdentifier()
                self.state = 665
                self.match(SqlBaseParser.ADD)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 666
                    self.match(SqlBaseParser.IF)
                    self.state = 667
                    self.match(SqlBaseParser.NOT)
                    self.state = 668
                    self.match(SqlBaseParser.EXISTS)


                self.state = 672 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 671
                    self.partitionSpecLocation()
                    self.state = 674 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==188):
                        break

                pass

            elif la_ == 30:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 676
                self.match(SqlBaseParser.ALTER)
                self.state = 677
                self.match(SqlBaseParser.TABLE)
                self.state = 678
                self.multipartIdentifier()
                self.state = 679
                localctx.from_ = self.partitionSpec()
                self.state = 680
                self.match(SqlBaseParser.RENAME)
                self.state = 681
                self.match(SqlBaseParser.TO)
                self.state = 682
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 684
                self.match(SqlBaseParser.ALTER)
                self.state = 685
                _la = self._input.LA(1)
                if not(_la==256 or _la==294):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 686
                self.multipartIdentifier()
                self.state = 687
                self.match(SqlBaseParser.DROP)
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 688
                    self.match(SqlBaseParser.IF)
                    self.state = 689
                    self.match(SqlBaseParser.EXISTS)


                self.state = 692
                self.partitionSpec()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 693
                    self.match(SqlBaseParser.COMMA)
                    self.state = 694
                    self.partitionSpec()
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 700
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 32:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 703
                self.match(SqlBaseParser.ALTER)
                self.state = 704
                self.match(SqlBaseParser.TABLE)
                self.state = 705
                self.multipartIdentifier()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 706
                    self.partitionSpec()


                self.state = 709
                self.match(SqlBaseParser.SET)
                self.state = 710
                self.locationSpec()
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 712
                self.match(SqlBaseParser.ALTER)
                self.state = 713
                self.match(SqlBaseParser.TABLE)
                self.state = 714
                self.multipartIdentifier()
                self.state = 715
                self.match(SqlBaseParser.RECOVER)
                self.state = 716
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 718
                self.match(SqlBaseParser.DROP)
                self.state = 719
                self.match(SqlBaseParser.TABLE)
                self.state = 722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.match(SqlBaseParser.IF)
                    self.state = 721
                    self.match(SqlBaseParser.EXISTS)


                self.state = 724
                self.multipartIdentifier()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 725
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 35:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 728
                self.match(SqlBaseParser.DROP)
                self.state = 729
                self.match(SqlBaseParser.VIEW)
                self.state = 732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.match(SqlBaseParser.IF)
                    self.state = 731
                    self.match(SqlBaseParser.EXISTS)


                self.state = 734
                self.multipartIdentifier()
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 735
                self.match(SqlBaseParser.CREATE)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 736
                    self.match(SqlBaseParser.OR)
                    self.state = 737
                    self.match(SqlBaseParser.REPLACE)


                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110 or _la==261:
                    self.state = 741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==110:
                        self.state = 740
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 743
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 746
                self.match(SqlBaseParser.VIEW)
                self.state = 750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 747
                    self.match(SqlBaseParser.IF)
                    self.state = 748
                    self.match(SqlBaseParser.NOT)
                    self.state = 749
                    self.match(SqlBaseParser.EXISTS)


                self.state = 752
                self.multipartIdentifier()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 753
                    self.identifierCommentList()


                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or _la==189 or _la==260:
                    self.state = 762
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [44]:
                        self.state = 756
                        self.commentSpec()
                        pass
                    elif token in [189]:
                        self.state = 757
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 758
                        self.match(SqlBaseParser.ON)
                        self.state = 759
                        self.identifierList()
                        pass
                    elif token in [260]:
                        self.state = 760
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 761
                        self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 767
                self.match(SqlBaseParser.AS)
                self.state = 768
                self.query()
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 770
                self.match(SqlBaseParser.CREATE)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 771
                    self.match(SqlBaseParser.OR)
                    self.state = 772
                    self.match(SqlBaseParser.REPLACE)


                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 775
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 778
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 779
                self.match(SqlBaseParser.VIEW)
                self.state = 780
                self.tableIdentifier()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 781
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 782
                    self.colTypeList()
                    self.state = 783
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 787
                self.tableProvider()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 788
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 789
                    self.propertyList()


                pass

            elif la_ == 38:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 792
                self.match(SqlBaseParser.ALTER)
                self.state = 793
                self.match(SqlBaseParser.VIEW)
                self.state = 794
                self.multipartIdentifier()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 795
                    self.match(SqlBaseParser.AS)


                self.state = 798
                self.query()
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 800
                self.match(SqlBaseParser.CREATE)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 801
                    self.match(SqlBaseParser.OR)
                    self.state = 802
                    self.match(SqlBaseParser.REPLACE)


                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 805
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 808
                self.match(SqlBaseParser.FUNCTION)
                self.state = 812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 809
                    self.match(SqlBaseParser.IF)
                    self.state = 810
                    self.match(SqlBaseParser.NOT)
                    self.state = 811
                    self.match(SqlBaseParser.EXISTS)


                self.state = 814
                self.multipartIdentifier()
                self.state = 815
                self.match(SqlBaseParser.AS)
                self.state = 816
                localctx.className = self.stringLit()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 817
                    self.match(SqlBaseParser.USING)
                    self.state = 818
                    self.resource()
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 819
                        self.match(SqlBaseParser.COMMA)
                        self.state = 820
                        self.resource()
                        self.state = 825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 828
                self.match(SqlBaseParser.DROP)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 829
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 832
                self.match(SqlBaseParser.FUNCTION)
                self.state = 835
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 833
                    self.match(SqlBaseParser.IF)
                    self.state = 834
                    self.match(SqlBaseParser.EXISTS)


                self.state = 837
                self.multipartIdentifier()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 838
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==51 or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 288230376151719937) != 0):
                    self.state = 839
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==51 or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 288230376151719937) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 842
                self.statement()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 843
                self.match(SqlBaseParser.SHOW)
                self.state = 844
                self.match(SqlBaseParser.TABLES)
                self.state = 847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 845
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 846
                    self.multipartIdentifier()


                self.state = 853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 850
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 849
                        self.match(SqlBaseParser.LIKE)


                    self.state = 852
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.ShowTableExtendedContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 855
                self.match(SqlBaseParser.SHOW)
                self.state = 856
                self.match(SqlBaseParser.TABLE)
                self.state = 857
                self.match(SqlBaseParser.EXTENDED)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106 or _la==120:
                    self.state = 858
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 859
                    localctx.ns = self.multipartIdentifier()


                self.state = 862
                self.match(SqlBaseParser.LIKE)
                self.state = 863
                localctx.pattern = self.stringLit()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 864
                    self.partitionSpec()


                pass

            elif la_ == 44:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 867
                self.match(SqlBaseParser.SHOW)
                self.state = 868
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 869
                localctx.table = self.multipartIdentifier()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 870
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 871
                    localctx.key = self.propertyKey()
                    self.state = 872
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass

            elif la_ == 45:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 876
                self.match(SqlBaseParser.SHOW)
                self.state = 877
                self.match(SqlBaseParser.COLUMNS)
                self.state = 878
                _la = self._input.LA(1)
                if not(_la==106 or _la==120):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 879
                localctx.table = self.multipartIdentifier()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106 or _la==120:
                    self.state = 880
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 881
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 884
                self.match(SqlBaseParser.SHOW)
                self.state = 885
                self.match(SqlBaseParser.VIEWS)
                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 886
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 887
                    self.multipartIdentifier()


                self.state = 894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        self.state = 890
                        self.match(SqlBaseParser.LIKE)


                    self.state = 893
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 896
                self.match(SqlBaseParser.SHOW)
                self.state = 897
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 898
                self.multipartIdentifier()
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 899
                    self.partitionSpec()


                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 902
                self.match(SqlBaseParser.SHOW)
                self.state = 904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 903
                    self.identifier()


                self.state = 906
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 907
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 908
                    localctx.ns = self.multipartIdentifier()


                self.state = 918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 912
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 911
                        self.match(SqlBaseParser.LIKE)


                    self.state = 916
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 914
                        localctx.legacy = self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 915
                        localctx.pattern = self.stringLit()
                        pass




                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 920
                self.match(SqlBaseParser.SHOW)
                self.state = 921
                self.match(SqlBaseParser.CREATE)
                self.state = 922
                self.match(SqlBaseParser.TABLE)
                self.state = 923
                self.multipartIdentifier()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 924
                    self.match(SqlBaseParser.AS)
                    self.state = 925
                    self.match(SqlBaseParser.SERDE)


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 928
                self.match(SqlBaseParser.SHOW)
                self.state = 929
                self.match(SqlBaseParser.CURRENT)
                self.state = 930
                self.namespace()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 931
                self.match(SqlBaseParser.SHOW)
                self.state = 932
                self.match(SqlBaseParser.CATALOGS)
                self.state = 937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 934
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 933
                        self.match(SqlBaseParser.LIKE)


                    self.state = 936
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 52:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 939
                _la = self._input.LA(1)
                if not(_la==73 or _la==74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 940
                self.match(SqlBaseParser.FUNCTION)
                self.state = 942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 941
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 944
                self.describeFuncName()
                pass

            elif la_ == 53:
                localctx = SqlBaseParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 945
                _la = self._input.LA(1)
                if not(_la==73 or _la==74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 946
                self.namespace()
                self.state = 948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 950
                self.multipartIdentifier()
                pass

            elif la_ == 54:
                localctx = SqlBaseParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 952
                _la = self._input.LA(1)
                if not(_la==73 or _la==74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 953
                    self.match(SqlBaseParser.TABLE)


                self.state = 957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 956
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==105):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 959
                self.multipartIdentifier()
                self.state = 961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 960
                    self.partitionSpec()


                self.state = 964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 963
                    self.describeColName()


                pass

            elif la_ == 55:
                localctx = SqlBaseParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 966
                _la = self._input.LA(1)
                if not(_la==73 or _la==74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 967
                    self.match(SqlBaseParser.QUERY)


                self.state = 970
                self.query()
                pass

            elif la_ == 56:
                localctx = SqlBaseParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 971
                self.match(SqlBaseParser.COMMENT)
                self.state = 972
                self.match(SqlBaseParser.ON)
                self.state = 973
                self.namespace()
                self.state = 974
                self.multipartIdentifier()
                self.state = 975
                self.match(SqlBaseParser.IS)
                self.state = 976
                self.comment()
                pass

            elif la_ == 57:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 978
                self.match(SqlBaseParser.COMMENT)
                self.state = 979
                self.match(SqlBaseParser.ON)
                self.state = 980
                self.match(SqlBaseParser.TABLE)
                self.state = 981
                self.multipartIdentifier()
                self.state = 982
                self.match(SqlBaseParser.IS)
                self.state = 983
                self.comment()
                pass

            elif la_ == 58:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 985
                self.match(SqlBaseParser.REFRESH)
                self.state = 986
                self.match(SqlBaseParser.TABLE)
                self.state = 987
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = SqlBaseParser.RefreshFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 988
                self.match(SqlBaseParser.REFRESH)
                self.state = 989
                self.match(SqlBaseParser.FUNCTION)
                self.state = 990
                self.multipartIdentifier()
                pass

            elif la_ == 60:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 991
                self.match(SqlBaseParser.REFRESH)
                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 992
                    self.stringLit()
                    pass

                elif la_ == 2:
                    self.state = 996
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 993
                            self.matchWildcard() 
                        self.state = 998
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                    pass


                pass

            elif la_ == 61:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1001
                self.match(SqlBaseParser.CACHE)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1002
                    self.match(SqlBaseParser.LAZY)


                self.state = 1005
                self.match(SqlBaseParser.TABLE)
                self.state = 1006
                self.multipartIdentifier()
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 1007
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1008
                    localctx.options = self.propertyList()


                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==19 or _la==106 or _la==152 or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 281474985099265) != 0) or _la==292 or _la==301:
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==19:
                        self.state = 1011
                        self.match(SqlBaseParser.AS)


                    self.state = 1014
                    self.query()


                pass

            elif la_ == 62:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1017
                self.match(SqlBaseParser.UNCACHE)
                self.state = 1018
                self.match(SqlBaseParser.TABLE)
                self.state = 1021
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1019
                    self.match(SqlBaseParser.IF)
                    self.state = 1020
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1023
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1024
                self.match(SqlBaseParser.CLEAR)
                self.state = 1025
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 64:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1026
                self.match(SqlBaseParser.LOAD)
                self.state = 1027
                self.match(SqlBaseParser.DATA)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1028
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1031
                self.match(SqlBaseParser.INPATH)
                self.state = 1032
                localctx.path = self.stringLit()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1033
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 1036
                self.match(SqlBaseParser.INTO)
                self.state = 1037
                self.match(SqlBaseParser.TABLE)
                self.state = 1038
                self.multipartIdentifier()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1039
                    self.partitionSpec()


                pass

            elif la_ == 65:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1042
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 1043
                self.match(SqlBaseParser.TABLE)
                self.state = 1044
                self.multipartIdentifier()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1045
                    self.partitionSpec()


                pass

            elif la_ == 66:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1048
                self.match(SqlBaseParser.MSCK)
                self.state = 1049
                self.match(SqlBaseParser.REPAIR)
                self.state = 1050
                self.match(SqlBaseParser.TABLE)
                self.state = 1051
                self.multipartIdentifier()
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==81 or _la==253:
                    self.state = 1052
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==8 or _la==81 or _la==253):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1053
                    self.match(SqlBaseParser.PARTITIONS)


                pass

            elif la_ == 67:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1056
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==8 or _la==144):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1057
                self.identifier()
                self.state = 1061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1058
                        self.matchWildcard() 
                    self.state = 1063
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                pass

            elif la_ == 68:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1064
                self.match(SqlBaseParser.SET)
                self.state = 1065
                self.match(SqlBaseParser.ROLE)
                self.state = 1069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1066
                        self.matchWildcard() 
                    self.state = 1071
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                pass

            elif la_ == 69:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1072
                self.match(SqlBaseParser.SET)
                self.state = 1073
                self.match(SqlBaseParser.TIME)
                self.state = 1074
                self.match(SqlBaseParser.ZONE)
                self.state = 1075
                self.interval()
                pass

            elif la_ == 70:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1076
                self.match(SqlBaseParser.SET)
                self.state = 1077
                self.match(SqlBaseParser.TIME)
                self.state = 1078
                self.match(SqlBaseParser.ZONE)
                self.state = 1079
                self.timezone()
                pass

            elif la_ == 71:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1080
                self.match(SqlBaseParser.SET)
                self.state = 1081
                self.match(SqlBaseParser.TIME)
                self.state = 1082
                self.match(SqlBaseParser.ZONE)
                self.state = 1086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1083
                        self.matchWildcard() 
                    self.state = 1088
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                pass

            elif la_ == 72:
                localctx = SqlBaseParser.SetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1089
                self.match(SqlBaseParser.SET)
                self.state = 1090
                self.configKey()
                self.state = 1091
                self.match(SqlBaseParser.EQ)
                self.state = 1092
                self.configValue()
                pass

            elif la_ == 73:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1094
                self.match(SqlBaseParser.SET)
                self.state = 1095
                self.configKey()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 1096
                    self.match(SqlBaseParser.EQ)
                    self.state = 1100
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1097
                            self.matchWildcard() 
                        self.state = 1102
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,108,self._ctx)



                pass

            elif la_ == 74:
                localctx = SqlBaseParser.SetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1105
                self.match(SqlBaseParser.SET)
                self.state = 1109
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1106
                        self.matchWildcard() 
                    self.state = 1111
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                self.state = 1112
                self.match(SqlBaseParser.EQ)
                self.state = 1113
                self.configValue()
                pass

            elif la_ == 75:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1114
                self.match(SqlBaseParser.SET)
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1115
                        self.matchWildcard() 
                    self.state = 1120
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                pass

            elif la_ == 76:
                localctx = SqlBaseParser.ResetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1121
                self.match(SqlBaseParser.RESET)
                self.state = 1122
                self.configKey()
                pass

            elif la_ == 77:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1123
                self.match(SqlBaseParser.RESET)
                self.state = 1127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1124
                        self.matchWildcard() 
                    self.state = 1129
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                pass

            elif la_ == 78:
                localctx = SqlBaseParser.CreateIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 1130
                self.match(SqlBaseParser.CREATE)
                self.state = 1131
                self.match(SqlBaseParser.INDEX)
                self.state = 1135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1132
                    self.match(SqlBaseParser.IF)
                    self.state = 1133
                    self.match(SqlBaseParser.NOT)
                    self.state = 1134
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1137
                self.identifier()
                self.state = 1138
                self.match(SqlBaseParser.ON)
                self.state = 1140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1139
                    self.match(SqlBaseParser.TABLE)


                self.state = 1142
                self.multipartIdentifier()
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 1143
                    self.match(SqlBaseParser.USING)
                    self.state = 1144
                    localctx.indexType = self.identifier()


                self.state = 1147
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1148
                localctx.columns = self.multipartIdentifierPropertyList()
                self.state = 1149
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 1150
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1151
                    localctx.options = self.propertyList()


                pass

            elif la_ == 79:
                localctx = SqlBaseParser.DropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 79)
                self.state = 1154
                self.match(SqlBaseParser.DROP)
                self.state = 1155
                self.match(SqlBaseParser.INDEX)
                self.state = 1158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1156
                    self.match(SqlBaseParser.IF)
                    self.state = 1157
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1160
                self.identifier()
                self.state = 1161
                self.match(SqlBaseParser.ON)
                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1162
                    self.match(SqlBaseParser.TABLE)


                self.state = 1165
                self.multipartIdentifier()
                pass

            elif la_ == 80:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 80)
                self.state = 1167
                self.unsupportedHiveNativeCommands()
                self.state = 1171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1168
                        self.matchWildcard() 
                    self.state = 1173
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimezone" ):
                listener.enterTimezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimezone" ):
                listener.exitTimezone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimezone" ):
                return visitor.visitTimezone(self)
            else:
                return visitor.visitChildren(self)




    def timezone(self):

        localctx = SqlBaseParser.TimezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_timezone)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1176
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                self.match(SqlBaseParser.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_configKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigKey" ):
                listener.enterConfigKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigKey" ):
                listener.exitConfigKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigKey" ):
                return visitor.visitConfigKey(self)
            else:
                return visitor.visitChildren(self)




    def configKey(self):

        localctx = SqlBaseParser.ConfigKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_configKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.quotedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def backQuotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.BackQuotedIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_configValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigValue" ):
                listener.enterConfigValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigValue" ):
                listener.exitConfigValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigValue" ):
                return visitor.visitConfigValue(self)
            else:
                return visitor.visitChildren(self)




    def configValue(self):

        localctx = SqlBaseParser.ConfigValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.backQuotedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1185
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1186
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1187
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1188
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 1190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1189
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1192
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 1194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1193
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1196
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1197
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1198
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1199
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1203
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1204
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1205
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1206
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1207
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1208
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 1209
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1210
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 1211
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1212
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 1213
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1214
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1215
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1216
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1217
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 1218
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1219
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1220
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1221
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1222
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1223
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1224
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1225
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1226
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1227
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1228
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1229
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1230
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1231
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1232
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1233
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1234
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1235
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1236
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1237
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1238
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1239
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1240
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1241
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1242
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1243
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1244
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1245
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1246
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1247
                self.tableIdentifier()
                self.state = 1248
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1249
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1251
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1252
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1253
                self.tableIdentifier()
                self.state = 1254
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 1255
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1257
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1258
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1259
                self.tableIdentifier()
                self.state = 1260
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1261
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1263
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1264
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1265
                self.tableIdentifier()
                self.state = 1266
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 1267
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1269
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1270
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1271
                self.tableIdentifier()
                self.state = 1272
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1273
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1275
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1276
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1277
                self.tableIdentifier()
                self.state = 1278
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1279
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 1280
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 1281
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1283
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1284
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1285
                self.tableIdentifier()
                self.state = 1286
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1287
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 1288
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1290
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1291
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1292
                self.tableIdentifier()
                self.state = 1293
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 1294
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1296
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1297
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1298
                self.tableIdentifier()
                self.state = 1299
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 1300
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1302
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1303
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1304
                self.tableIdentifier()
                self.state = 1305
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 1306
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1308
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1309
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1310
                self.tableIdentifier()
                self.state = 1311
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1313
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1314
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1315
                self.tableIdentifier()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1316
                    self.partitionSpec()


                self.state = 1319
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1321
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1322
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1323
                self.tableIdentifier()
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1324
                    self.partitionSpec()


                self.state = 1327
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1329
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1330
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1331
                self.tableIdentifier()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1332
                    self.partitionSpec()


                self.state = 1335
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1336
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1338
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1339
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1340
                self.tableIdentifier()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1341
                    self.partitionSpec()


                self.state = 1344
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 1345
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1347
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 1348
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1349
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1350
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1351
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(SqlBaseParser.CREATE)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1355
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1358
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 1361
            self.match(SqlBaseParser.TABLE)
            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1362
                self.match(SqlBaseParser.IF)
                self.state = 1363
                self.match(SqlBaseParser.NOT)
                self.state = 1364
                self.match(SqlBaseParser.EXISTS)


            self.state = 1367
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_replaceTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTableHeader" ):
                listener.enterReplaceTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTableHeader" ):
                listener.exitReplaceTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = SqlBaseParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1369
                self.match(SqlBaseParser.CREATE)
                self.state = 1370
                self.match(SqlBaseParser.OR)


            self.state = 1373
            self.match(SqlBaseParser.REPLACE)
            self.state = 1374
            self.match(SqlBaseParser.TABLE)
            self.state = 1375
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1378
            self.match(SqlBaseParser.BY)
            self.state = 1379
            self.identifierList()
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==244:
                self.state = 1380
                self.match(SqlBaseParser.SORTED)
                self.state = 1381
                self.match(SqlBaseParser.BY)
                self.state = 1382
                self.orderedIdentifierList()


            self.state = 1385
            self.match(SqlBaseParser.INTO)
            self.state = 1386
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1387
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(SqlBaseParser.SKEWED)
            self.state = 1390
            self.match(SqlBaseParser.BY)
            self.state = 1391
            self.identifierList()
            self.state = 1392
            self.match(SqlBaseParser.ON)
            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1393
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1394
                self.nestedConstantList()
                pass


            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1397
                self.match(SqlBaseParser.STORED)
                self.state = 1398
                self.match(SqlBaseParser.AS)
                self.state = 1399
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(SqlBaseParser.LOCATION)
            self.state = 1403
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_commentSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentSpec" ):
                listener.enterCommentSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentSpec" ):
                listener.exitCommentSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = SqlBaseParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(SqlBaseParser.COMMENT)
            self.state = 1406
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==301:
                self.state = 1408
                self.ctes()


            self.state = 1411
            self.queryTerm(0)
            self.state = 1412
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertIntoReplaceWhereContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoReplaceWhere" ):
                listener.enterInsertIntoReplaceWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoReplaceWhere" ):
                listener.exitInsertIntoReplaceWhere(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoReplaceWhere" ):
                return visitor.visitInsertIntoReplaceWhere(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.match(SqlBaseParser.INSERT)
                self.state = 1415
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.match(SqlBaseParser.TABLE)


                self.state = 1419
                self.multipartIdentifier()
                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1420
                    self.partitionSpec()
                    self.state = 1424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==117:
                        self.state = 1421
                        self.match(SqlBaseParser.IF)
                        self.state = 1422
                        self.match(SqlBaseParser.NOT)
                        self.state = 1423
                        self.match(SqlBaseParser.EXISTS)




                self.state = 1429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1428
                    self.identifierList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.match(SqlBaseParser.INSERT)
                self.state = 1432
                self.match(SqlBaseParser.INTO)
                self.state = 1434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1433
                    self.match(SqlBaseParser.TABLE)


                self.state = 1436
                self.multipartIdentifier()
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1437
                    self.partitionSpec()


                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1440
                    self.match(SqlBaseParser.IF)
                    self.state = 1441
                    self.match(SqlBaseParser.NOT)
                    self.state = 1442
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1445
                    self.identifierList()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.InsertIntoReplaceWhereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1448
                self.match(SqlBaseParser.INSERT)
                self.state = 1449
                self.match(SqlBaseParser.INTO)
                self.state = 1451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self.match(SqlBaseParser.TABLE)


                self.state = 1453
                self.multipartIdentifier()
                self.state = 1454
                self.match(SqlBaseParser.REPLACE)
                self.state = 1455
                self.whereClause()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1457
                self.match(SqlBaseParser.INSERT)
                self.state = 1458
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1459
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1462
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1463
                localctx.path = self.stringLit()
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 1464
                    self.rowFormat()


                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==248:
                    self.state = 1467
                    self.createFileFormat()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1470
                self.match(SqlBaseParser.INSERT)
                self.state = 1471
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1472
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1475
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1476
                    localctx.path = self.stringLit()


                self.state = 1479
                self.tableProvider()
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 1480
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1481
                    localctx.options = self.propertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.partitionSpec()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 1487
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(SqlBaseParser.PARTITION)
            self.state = 1491
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1492
            self.partitionVal()
            self.state = 1497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1493
                self.match(SqlBaseParser.COMMA)
                self.state = 1494
                self.partitionVal()
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1500
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1502
                self.identifier()
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 1503
                    self.match(SqlBaseParser.EQ)
                    self.state = 1504
                    self.constant()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.identifier()
                self.state = 1508
                self.match(SqlBaseParser.EQ)
                self.state = 1509
                self.match(SqlBaseParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = SqlBaseParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            _la = self._input.LA(1)
            if not(_la==64 or _la==164 or _la==229):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaces" ):
                listener.enterNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaces" ):
                listener.exitNamespaces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaces" ):
                return visitor.visitNamespaces(self)
            else:
                return visitor.visitChildren(self)




    def namespaces(self):

        localctx = SqlBaseParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_namespaces)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            _la = self._input.LA(1)
            if not(_la==65 or _la==165 or _la==230):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_describeFuncName)
        try:
            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1518
                self.stringLit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1519
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1520
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1521
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1525
                self.match(SqlBaseParser.DOT)
                self.state = 1526
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.match(SqlBaseParser.WITH)
            self.state = 1533
            self.namedQuery()
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1534
                self.match(SqlBaseParser.COMMA)
                self.state = 1535
                self.namedQuery()
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            localctx.name = self.errorCapturingIdentifier()
            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1542
                localctx.columnAliases = self.identifierList()


            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 1545
                self.match(SqlBaseParser.AS)


            self.state = 1548
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1549
            self.query()
            self.state = 1550
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(SqlBaseParser.USING)
            self.state = 1553
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # PropertyListContext
            self.partitioning = None # PartitionFieldListContext
            self.tableProps = None # PropertyListContext

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,i)


        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPTIONS)
            else:
                return self.getToken(SqlBaseParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)

        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)


        def partitionFieldList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionFieldListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionFieldListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableClauses" ):
                listener.enterCreateTableClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableClauses" ):
                listener.exitCreateTableClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = SqlBaseParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38 or _la==44 or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 4400193994753) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & 34368192513) != 0):
                self.state = 1568
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [178]:
                    self.state = 1555
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1556
                    localctx.options = self.propertyList()
                    pass
                elif token in [189]:
                    self.state = 1557
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 1558
                    self.match(SqlBaseParser.BY)
                    self.state = 1559
                    localctx.partitioning = self.partitionFieldList()
                    pass
                elif token in [241]:
                    self.state = 1560
                    self.skewSpec()
                    pass
                elif token in [38]:
                    self.state = 1561
                    self.bucketSpec()
                    pass
                elif token in [225]:
                    self.state = 1562
                    self.rowFormat()
                    pass
                elif token in [248]:
                    self.state = 1563
                    self.createFileFormat()
                    pass
                elif token in [147]:
                    self.state = 1564
                    self.locationSpec()
                    pass
                elif token in [44]:
                    self.state = 1565
                    self.commentSpec()
                    pass
                elif token in [260]:
                    self.state = 1566
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 1567
                    localctx.tableProps = self.propertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyList" ):
                return visitor.visitPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def propertyList(self):

        localctx = SqlBaseParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1574
            self.property_()
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1575
                self.match(SqlBaseParser.COMMA)
                self.state = 1576
                self.property_()
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1582
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # PropertyKeyContext
            self.value = None # PropertyValueContext

        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def propertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty" ):
                return visitor.visitProperty(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SqlBaseParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            localctx.key = self.propertyKey()
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1585
                    self.match(SqlBaseParser.EQ)


                self.state = 1588
                localctx.value = self.propertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyKey" ):
                listener.enterPropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyKey" ):
                listener.exitPropertyKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyKey" ):
                return visitor.visitPropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def propertyKey(self):

        localctx = SqlBaseParser.PropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_propertyKey)
        try:
            self.state = 1600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self.identifier()
                self.state = 1596
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1592
                        self.match(SqlBaseParser.DOT)
                        self.state = 1593
                        self.identifier() 
                    self.state = 1598
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyValue" ):
                listener.enterPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyValue" ):
                listener.exitPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyValue" ):
                return visitor.visitPropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def propertyValue(self):

        localctx = SqlBaseParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_propertyValue)
        try:
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1602
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1603
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1604
                self.booleanValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1605
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1609
            self.constant()
            self.state = 1614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1610
                self.match(SqlBaseParser.COMMA)
                self.state = 1611
                self.constant()
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1617
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1620
            self.constantList()
            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1621
                self.match(SqlBaseParser.COMMA)
                self.state = 1622
                self.constantList()
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1628
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createFileFormat)
        try:
            self.state = 1636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1630
                self.match(SqlBaseParser.STORED)
                self.state = 1631
                self.match(SqlBaseParser.AS)
                self.state = 1632
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.match(SqlBaseParser.STORED)
                self.state = 1634
                self.match(SqlBaseParser.BY)
                self.state = 1635
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # StringLitContext
            self.outFmt = None # StringLitContext
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fileFormat)
        try:
            self.state = 1644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1639
                localctx.inFmt = self.stringLit()
                self.state = 1640
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1641
                localctx.outFmt = self.stringLit()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1643
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.stringLit()
            self.state = 1650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1647
                self.match(SqlBaseParser.WITH)
                self.state = 1648
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1649
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.identifier()
            self.state = 1653
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteFromTable" ):
                listener.enterDeleteFromTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteFromTable" ):
                listener.exitDeleteFromTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateTable" ):
                listener.enterUpdateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateTable" ):
                listener.exitUpdateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedClauseContext,i)

        def notMatchedBySourceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedBySourceClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedBySourceClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeIntoTable" ):
                listener.enterMergeIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeIntoTable" ):
                listener.exitMergeIntoTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = SqlBaseParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1655
                self.insertInto()
                self.state = 1656
                self.query()
                pass
            elif token in [106]:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.fromClause()
                self.state = 1660 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1659
                    self.multiInsertQueryBody()
                    self.state = 1662 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==127):
                        break

                pass
            elif token in [71]:
                localctx = SqlBaseParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1664
                self.match(SqlBaseParser.DELETE)
                self.state = 1665
                self.match(SqlBaseParser.FROM)
                self.state = 1666
                self.multipartIdentifier()
                self.state = 1667
                self.tableAlias()
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 1668
                    self.whereClause()


                pass
            elif token in [288]:
                localctx = SqlBaseParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1671
                self.match(SqlBaseParser.UPDATE)
                self.state = 1672
                self.multipartIdentifier()
                self.state = 1673
                self.tableAlias()
                self.state = 1674
                self.setClause()
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 1675
                    self.whereClause()


                pass
            elif token in [154]:
                localctx = SqlBaseParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1678
                self.match(SqlBaseParser.MERGE)
                self.state = 1679
                self.match(SqlBaseParser.INTO)
                self.state = 1680
                localctx.target = self.multipartIdentifier()
                self.state = 1681
                localctx.targetAlias = self.tableAlias()
                self.state = 1682
                self.match(SqlBaseParser.USING)
                self.state = 1688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1683
                    localctx.source = self.multipartIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1684
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 1685
                    localctx.sourceQuery = self.query()
                    self.state = 1686
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass


                self.state = 1690
                localctx.sourceAlias = self.tableAlias()
                self.state = 1691
                self.match(SqlBaseParser.ON)
                self.state = 1692
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 1696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1693
                        self.matchedClause() 
                    self.state = 1698
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                self.state = 1702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1699
                        self.notMatchedClause() 
                    self.state = 1704
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 1705
                    self.notMatchedBySourceClause()
                    self.state = 1710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1713
                self.match(SqlBaseParser.ORDER)
                self.state = 1714
                self.match(SqlBaseParser.BY)
                self.state = 1715
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1716
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1717
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 1722
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)



            self.state = 1735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1725
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1726
                self.match(SqlBaseParser.BY)
                self.state = 1727
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1728
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1729
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 1734
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)



            self.state = 1747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1737
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1738
                self.match(SqlBaseParser.BY)
                self.state = 1739
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1740
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1741
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 1746
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)



            self.state = 1759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1749
                self.match(SqlBaseParser.SORT)
                self.state = 1750
                self.match(SqlBaseParser.BY)
                self.state = 1751
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1752
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1753
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 1758
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)



            self.state = 1762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1761
                self.windowClause()


            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1764
                self.match(SqlBaseParser.LIMIT)
                self.state = 1767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1765
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1766
                    localctx.limit = self.expression()
                    pass




            self.state = 1773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1771
                self.match(SqlBaseParser.OFFSET)
                self.state = 1772
                localctx.offset = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.insertInto()
            self.state = 1776
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1779
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1802
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1781
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1782
                        if not legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "legacy_setops_precedence_enabled")
                        self.state = 1783
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==86 or _la==128 or _la==238 or _la==282):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1785
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==10 or _la==78:
                            self.state = 1784
                            self.setQuantifier()


                        self.state = 1787
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1788
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1789
                        if not legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enabled")
                        self.state = 1790
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1792
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==10 or _la==78:
                            self.state = 1791
                            self.setQuantifier()


                        self.state = 1794
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1795
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1796
                        if not legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enabled")
                        self.state = 1797
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==86 or _la==238 or _la==282):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1799
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==10 or _la==78:
                            self.state = 1798
                            self.setQuantifier()


                        self.state = 1801
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_queryPrimary)
        try:
            self.state = 1816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [152, 208, 231]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.querySpecification()
                pass
            elif token in [106]:
                localctx = SqlBaseParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1808
                self.fromStatement()
                pass
            elif token in [256]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1809
                self.match(SqlBaseParser.TABLE)
                self.state = 1810
                self.multipartIdentifier()
                pass
            elif token in [292]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1811
                self.inlineTable()
                pass
            elif token in [2]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1812
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1813
                self.query()
                self.state = 1814
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.expression()
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1819
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==20 or _la==73):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1822
                self.match(SqlBaseParser.NULLS)
                self.state = 1823
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==100 or _la==135):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = SqlBaseParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.fromClause()
            self.state = 1828 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1827
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 1830 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatementBody" ):
                listener.enterFromStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatementBody" ):
                listener.exitFromStatementBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = SqlBaseParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_fromStatementBody)
        try:
            self.state = 1859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1832
                self.transformClause()
                self.state = 1834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1833
                    self.whereClause()


                self.state = 1836
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.selectClause()
                self.state = 1842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1839
                        self.lateralView() 
                    self.state = 1844
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                self.state = 1846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1845
                    self.whereClause()


                self.state = 1849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1848
                    self.aggregationClause()


                self.state = 1852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1851
                    self.havingClause()


                self.state = 1855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1854
                    self.windowClause()


                self.state = 1857
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuerySpecification" ):
                listener.enterRegularQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuerySpecification" ):
                listener.exitRegularQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformQuerySpecification" ):
                listener.enterTransformQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformQuerySpecification" ):
                listener.exitTransformQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_querySpecification)
        try:
            self.state = 1905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1861
                self.transformClause()
                self.state = 1863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1862
                    self.fromClause()


                self.state = 1868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1865
                        self.lateralView() 
                    self.state = 1870
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.whereClause()


                self.state = 1875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1874
                    self.aggregationClause()


                self.state = 1878
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1877
                    self.havingClause()


                self.state = 1881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1880
                    self.windowClause()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1883
                self.selectClause()
                self.state = 1885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1884
                    self.fromClause()


                self.state = 1890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1887
                        self.lateralView() 
                    self.state = 1892
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

                self.state = 1894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1893
                    self.whereClause()


                self.state = 1897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1896
                    self.aggregationClause()


                self.state = 1900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1899
                    self.havingClause()


                self.state = 1903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1902
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # StringLitContext
            self.script = None # StringLitContext
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # StringLitContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def expressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionSeqContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformClause" ):
                listener.enterTransformClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformClause" ):
                listener.exitTransformClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = SqlBaseParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [231]:
                self.state = 1907
                self.match(SqlBaseParser.SELECT)
                self.state = 1908
                localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                self.state = 1909
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1910
                    self.setQuantifier()


                self.state = 1913
                self.expressionSeq()
                self.state = 1914
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            elif token in [152]:
                self.state = 1916
                localctx.kind = self.match(SqlBaseParser.MAP)
                self.state = 1918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1917
                    self.setQuantifier()


                self.state = 1920
                self.expressionSeq()
                pass
            elif token in [208]:
                self.state = 1921
                localctx.kind = self.match(SqlBaseParser.REDUCE)
                self.state = 1923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1922
                    self.setQuantifier()


                self.state = 1925
                self.expressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225:
                self.state = 1928
                localctx.inRowFormat = self.rowFormat()


            self.state = 1933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 1931
                self.match(SqlBaseParser.RECORDWRITER)
                self.state = 1932
                localctx.recordWriter = self.stringLit()


            self.state = 1935
            self.match(SqlBaseParser.USING)
            self.state = 1936
            localctx.script = self.stringLit()
            self.state = 1949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1937
                self.match(SqlBaseParser.AS)
                self.state = 1947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1938
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 1939
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 1940
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 1943
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                    if la_ == 1:
                        self.state = 1941
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1942
                        self.colTypeList()
                        pass


                    self.state = 1945
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass




            self.state = 1952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 1951
                localctx.outRowFormat = self.rowFormat()


            self.state = 1956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1954
                self.match(SqlBaseParser.RECORDREADER)
                self.state = 1955
                localctx.recordReader = self.stringLit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = SqlBaseParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1958
            self.match(SqlBaseParser.SELECT)
            self.state = 1962
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1959
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 1964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1965
                self.setQuantifier()


            self.state = 1968
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = SqlBaseParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.match(SqlBaseParser.SET)
            self.state = 1971
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedClause" ):
                listener.enterMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedClause" ):
                listener.exitMatchedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = SqlBaseParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.match(SqlBaseParser.WHEN)
            self.state = 1974
            self.match(SqlBaseParser.MATCHED)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1975
                self.match(SqlBaseParser.AND)
                self.state = 1976
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 1979
            self.match(SqlBaseParser.THEN)
            self.state = 1980
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedActionContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedClause" ):
                listener.enterNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedClause" ):
                listener.exitNotMatchedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = SqlBaseParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(SqlBaseParser.WHEN)
            self.state = 1983
            self.match(SqlBaseParser.NOT)
            self.state = 1984
            self.match(SqlBaseParser.MATCHED)
            self.state = 1987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1985
                self.match(SqlBaseParser.BY)
                self.state = 1986
                self.match(SqlBaseParser.TARGET)


            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1989
                self.match(SqlBaseParser.AND)
                self.state = 1990
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 1993
            self.match(SqlBaseParser.THEN)
            self.state = 1994
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedBySourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedBySourceCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedBySourceAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedBySourceActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedBySourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedBySourceClause" ):
                listener.enterNotMatchedBySourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedBySourceClause" ):
                listener.exitNotMatchedBySourceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedBySourceClause" ):
                return visitor.visitNotMatchedBySourceClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedBySourceClause(self):

        localctx = SqlBaseParser.NotMatchedBySourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_notMatchedBySourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(SqlBaseParser.WHEN)
            self.state = 1997
            self.match(SqlBaseParser.NOT)
            self.state = 1998
            self.match(SqlBaseParser.MATCHED)
            self.state = 1999
            self.match(SqlBaseParser.BY)
            self.state = 2000
            self.match(SqlBaseParser.SOURCE)
            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 2001
                self.match(SqlBaseParser.AND)
                self.state = 2002
                localctx.notMatchedBySourceCond = self.booleanExpression(0)


            self.state = 2005
            self.match(SqlBaseParser.THEN)
            self.state = 2006
            self.notMatchedBySourceAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedAction" ):
                listener.enterMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedAction" ):
                listener.exitMatchedAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = SqlBaseParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_matchedAction)
        try:
            self.state = 2015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2008
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2009
                self.match(SqlBaseParser.UPDATE)
                self.state = 2010
                self.match(SqlBaseParser.SET)
                self.state = 2011
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2012
                self.match(SqlBaseParser.UPDATE)
                self.state = 2013
                self.match(SqlBaseParser.SET)
                self.state = 2014
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedAction" ):
                listener.enterNotMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedAction" ):
                listener.exitNotMatchedAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = SqlBaseParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.match(SqlBaseParser.INSERT)
                self.state = 2018
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2019
                self.match(SqlBaseParser.INSERT)
                self.state = 2020
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2021
                localctx.columns = self.multipartIdentifierList()
                self.state = 2022
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2023
                self.match(SqlBaseParser.VALUES)
                self.state = 2024
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2025
                self.expression()
                self.state = 2030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2026
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2027
                    self.expression()
                    self.state = 2032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2033
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedBySourceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedBySourceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedBySourceAction" ):
                listener.enterNotMatchedBySourceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedBySourceAction" ):
                listener.exitNotMatchedBySourceAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedBySourceAction" ):
                return visitor.visitNotMatchedBySourceAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedBySourceAction(self):

        localctx = SqlBaseParser.NotMatchedBySourceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_notMatchedBySourceAction)
        try:
            self.state = 2041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2037
                self.match(SqlBaseParser.DELETE)
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2038
                self.match(SqlBaseParser.UPDATE)
                self.state = 2039
                self.match(SqlBaseParser.SET)
                self.state = 2040
                self.assignmentList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = SqlBaseParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.assignment()
            self.state = 2048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2044
                self.match(SqlBaseParser.COMMA)
                self.state = 2045
                self.assignment()
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = SqlBaseParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            localctx.key = self.multipartIdentifier()
            self.state = 2052
            self.match(SqlBaseParser.EQ)
            self.state = 2053
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = SqlBaseParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(SqlBaseParser.WHERE)
            self.state = 2056
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = SqlBaseParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self.match(SqlBaseParser.HAVING)
            self.state = 2059
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def HENT_START(self):
            return self.getToken(SqlBaseParser.HENT_START, 0)

        def HENT_END(self):
            return self.getToken(SqlBaseParser.HENT_END, 0)

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.match(SqlBaseParser.HENT_START)
            self.state = 2062
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2064
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                    if la_ == 1:
                        self.state = 2063
                        self.match(SqlBaseParser.COMMA)


                    self.state = 2066
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 2071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

            self.state = 2072
            self.match(SqlBaseParser.HENT_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2074
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2075
                localctx.hintName = self.identifier()
                self.state = 2076
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2077
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2078
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2079
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2085
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def unpivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.match(SqlBaseParser.FROM)
            self.state = 2090
            self.relation()
            self.state = 2095
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2091
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2092
                    self.relation() 
                self.state = 2097
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

            self.state = 2101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2098
                    self.lateralView() 
                self.state = 2103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

            self.state = 2105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2104
                self.pivotClause()


            self.state = 2108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 2107
                self.unpivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timestamp = None # ValueExpressionContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def version(self):
            return self.getTypedRuleContext(SqlBaseParser.VersionContext,0)


        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_temporalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalClause" ):
                listener.enterTemporalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalClause" ):
                listener.exitTemporalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemporalClause" ):
                return visitor.visitTemporalClause(self)
            else:
                return visitor.visitChildren(self)




    def temporalClause(self):

        localctx = SqlBaseParser.TemporalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_temporalClause)
        self._la = 0 # Token type
        try:
            self.state = 2124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2110
                    self.match(SqlBaseParser.FOR)


                self.state = 2113
                _la = self._input.LA(1)
                if not(_la==255 or _la==293):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2114
                self.match(SqlBaseParser.AS)
                self.state = 2115
                self.match(SqlBaseParser.OF)
                self.state = 2116
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2117
                    self.match(SqlBaseParser.FOR)


                self.state = 2120
                _la = self._input.LA(1)
                if not(_la==254 or _la==265):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2121
                self.match(SqlBaseParser.AS)
                self.state = 2122
                self.match(SqlBaseParser.OF)
                self.state = 2123
                localctx.timestamp = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._groupByClause = None # GroupByClauseContext
            self.groupingExpressionsWithGroupingAnalytics = list() # of GroupByClauseContexts
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupByClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupByClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationClause" ):
                listener.enterAggregationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationClause" ):
                listener.exitAggregationClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = SqlBaseParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2126
                self.match(SqlBaseParser.GROUP)
                self.state = 2127
                self.match(SqlBaseParser.BY)
                self.state = 2128
                localctx._groupByClause = self.groupByClause()
                localctx.groupingExpressionsWithGroupingAnalytics.append(localctx._groupByClause)
                self.state = 2133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2129
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2130
                        localctx._groupByClause = self.groupByClause()
                        localctx.groupingExpressionsWithGroupingAnalytics.append(localctx._groupByClause) 
                    self.state = 2135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2136
                self.match(SqlBaseParser.GROUP)
                self.state = 2137
                self.match(SqlBaseParser.BY)
                self.state = 2138
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2139
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2140
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2145
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                self.state = 2163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2146
                    self.match(SqlBaseParser.WITH)
                    self.state = 2147
                    localctx.kind = self.match(SqlBaseParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2148
                    self.match(SqlBaseParser.WITH)
                    self.state = 2149
                    localctx.kind = self.match(SqlBaseParser.CUBE)

                elif la_ == 3:
                    self.state = 2150
                    localctx.kind = self.match(SqlBaseParser.GROUPING)
                    self.state = 2151
                    self.match(SqlBaseParser.SETS)
                    self.state = 2152
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2153
                    self.groupingSet()
                    self.state = 2158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2154
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2155
                        self.groupingSet()
                        self.state = 2160
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2161
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingAnalytics(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingAnalyticsContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = SqlBaseParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_groupByClause)
        try:
            self.state = 2169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2167
                self.groupingAnalytics()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2168
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingAnalyticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingAnalytics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingAnalytics" ):
                listener.enterGroupingAnalytics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingAnalytics" ):
                listener.exitGroupingAnalytics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingAnalytics" ):
                return visitor.visitGroupingAnalytics(self)
            else:
                return visitor.visitChildren(self)




    def groupingAnalytics(self):

        localctx = SqlBaseParser.GroupingAnalyticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_groupingAnalytics)
        self._la = 0 # Token type
        try:
            self.state = 2196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 224]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2171
                _la = self._input.LA(1)
                if not(_la==54 or _la==224):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2172
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2173
                self.groupingSet()
                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2174
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2175
                    self.groupingSet()
                    self.state = 2180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2181
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.match(SqlBaseParser.GROUPING)
                self.state = 2184
                self.match(SqlBaseParser.SETS)
                self.state = 2185
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2186
                self.groupingElement()
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2187
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2188
                    self.groupingElement()
                    self.state = 2193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2194
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingAnalytics(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingAnalyticsContext,0)


        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingElement" ):
                listener.enterGroupingElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingElement" ):
                listener.exitGroupingElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingElement" ):
                return visitor.visitGroupingElement(self)
            else:
                return visitor.visitChildren(self)




    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_groupingElement)
        try:
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2198
                self.groupingAnalytics()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2199
                self.groupingSet()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2202
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 2203
                    self.expression()
                    self.state = 2208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2204
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2205
                        self.expression()
                        self.state = 2210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2213
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2214
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PivotValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = SqlBaseParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(SqlBaseParser.PIVOT)
            self.state = 2218
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2219
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2220
            self.match(SqlBaseParser.FOR)
            self.state = 2221
            self.pivotColumn()
            self.state = 2222
            self.match(SqlBaseParser.IN)
            self.state = 2223
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2224
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2225
                self.match(SqlBaseParser.COMMA)
                self.state = 2226
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2232
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2233
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = SqlBaseParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2237
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2238
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2239
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2245
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = SqlBaseParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self.expression()
            self.state = 2254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2250
                    self.match(SqlBaseParser.AS)


                self.state = 2253
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullOperator = None # UnpivotNullClauseContext
            self.operator = None # UnpivotOperatorContext

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotOperatorContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def unpivotNullClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNullClauseContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotClause" ):
                listener.enterUnpivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotClause" ):
                listener.exitUnpivotClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotClause" ):
                return visitor.visitUnpivotClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotClause(self):

        localctx = SqlBaseParser.UnpivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_unpivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self.match(SqlBaseParser.UNPIVOT)
            self.state = 2258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88 or _la==121:
                self.state = 2257
                localctx.nullOperator = self.unpivotNullClause()


            self.state = 2260
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2261
            localctx.operator = self.unpivotOperator()
            self.state = 2262
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2263
                    self.match(SqlBaseParser.AS)


                self.state = 2266
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotNullClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotNullClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotNullClause" ):
                listener.enterUnpivotNullClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotNullClause" ):
                listener.exitUnpivotNullClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotNullClause" ):
                return visitor.visitUnpivotNullClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotNullClause(self):

        localctx = SqlBaseParser.UnpivotNullClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_unpivotNullClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            _la = self._input.LA(1)
            if not(_la==88 or _la==121):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2270
            self.match(SqlBaseParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivotSingleValueColumnClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotSingleValueColumnClauseContext,0)


        def unpivotMultiValueColumnClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotMultiValueColumnClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotOperator" ):
                listener.enterUnpivotOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotOperator" ):
                listener.exitUnpivotOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotOperator" ):
                return visitor.visitUnpivotOperator(self)
            else:
                return visitor.visitChildren(self)




    def unpivotOperator(self):

        localctx = SqlBaseParser.UnpivotOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_unpivotOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2272
                self.unpivotSingleValueColumnClause()
                pass

            elif la_ == 2:
                self.state = 2273
                self.unpivotMultiValueColumnClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotSingleValueColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotColumnAndAlias = None # UnpivotColumnAndAliasContext
            self.unpivotColumns = list() # of UnpivotColumnAndAliasContexts

        def unpivotValueColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotValueColumnContext,0)


        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def unpivotNameColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNameColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotColumnAndAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnAndAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnAndAliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotSingleValueColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotSingleValueColumnClause" ):
                listener.enterUnpivotSingleValueColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotSingleValueColumnClause" ):
                listener.exitUnpivotSingleValueColumnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotSingleValueColumnClause" ):
                return visitor.visitUnpivotSingleValueColumnClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotSingleValueColumnClause(self):

        localctx = SqlBaseParser.UnpivotSingleValueColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_unpivotSingleValueColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self.unpivotValueColumn()
            self.state = 2277
            self.match(SqlBaseParser.FOR)
            self.state = 2278
            self.unpivotNameColumn()
            self.state = 2279
            self.match(SqlBaseParser.IN)
            self.state = 2280
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2281
            localctx._unpivotColumnAndAlias = self.unpivotColumnAndAlias()
            localctx.unpivotColumns.append(localctx._unpivotColumnAndAlias)
            self.state = 2286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2282
                self.match(SqlBaseParser.COMMA)
                self.state = 2283
                localctx._unpivotColumnAndAlias = self.unpivotColumnAndAlias()
                localctx.unpivotColumns.append(localctx._unpivotColumnAndAlias)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2289
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotMultiValueColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotValueColumn = None # UnpivotValueColumnContext
            self.unpivotValueColumns = list() # of UnpivotValueColumnContexts
            self._unpivotColumnSet = None # UnpivotColumnSetContext
            self.unpivotColumnSets = list() # of UnpivotColumnSetContexts

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def unpivotNameColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNameColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def unpivotValueColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotValueColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotValueColumnContext,i)


        def unpivotColumnSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotMultiValueColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotMultiValueColumnClause" ):
                listener.enterUnpivotMultiValueColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotMultiValueColumnClause" ):
                listener.exitUnpivotMultiValueColumnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotMultiValueColumnClause" ):
                return visitor.visitUnpivotMultiValueColumnClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotMultiValueColumnClause(self):

        localctx = SqlBaseParser.UnpivotMultiValueColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_unpivotMultiValueColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2292
            localctx._unpivotValueColumn = self.unpivotValueColumn()
            localctx.unpivotValueColumns.append(localctx._unpivotValueColumn)
            self.state = 2297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2293
                self.match(SqlBaseParser.COMMA)
                self.state = 2294
                localctx._unpivotValueColumn = self.unpivotValueColumn()
                localctx.unpivotValueColumns.append(localctx._unpivotValueColumn)
                self.state = 2299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2300
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2301
            self.match(SqlBaseParser.FOR)
            self.state = 2302
            self.unpivotNameColumn()
            self.state = 2303
            self.match(SqlBaseParser.IN)
            self.state = 2304
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2305
            localctx._unpivotColumnSet = self.unpivotColumnSet()
            localctx.unpivotColumnSets.append(localctx._unpivotColumnSet)
            self.state = 2310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2306
                self.match(SqlBaseParser.COMMA)
                self.state = 2307
                localctx._unpivotColumnSet = self.unpivotColumnSet()
                localctx.unpivotColumnSets.append(localctx._unpivotColumnSet)
                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2313
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotColumn = None # UnpivotColumnContext
            self.unpivotColumns = list() # of UnpivotColumnContexts

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def unpivotAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumnSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumnSet" ):
                listener.enterUnpivotColumnSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumnSet" ):
                listener.exitUnpivotColumnSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotColumnSet" ):
                return visitor.visitUnpivotColumnSet(self)
            else:
                return visitor.visitChildren(self)




    def unpivotColumnSet(self):

        localctx = SqlBaseParser.UnpivotColumnSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_unpivotColumnSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2316
            localctx._unpivotColumn = self.unpivotColumn()
            localctx.unpivotColumns.append(localctx._unpivotColumn)
            self.state = 2321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2317
                self.match(SqlBaseParser.COMMA)
                self.state = 2318
                localctx._unpivotColumn = self.unpivotColumn()
                localctx.unpivotColumns.append(localctx._unpivotColumn)
                self.state = 2323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2324
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2325
                self.unpivotAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotValueColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotValueColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotValueColumn" ):
                listener.enterUnpivotValueColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotValueColumn" ):
                listener.exitUnpivotValueColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotValueColumn" ):
                return visitor.visitUnpivotValueColumn(self)
            else:
                return visitor.visitChildren(self)




    def unpivotValueColumn(self):

        localctx = SqlBaseParser.UnpivotValueColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_unpivotValueColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotNameColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotNameColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotNameColumn" ):
                listener.enterUnpivotNameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotNameColumn" ):
                listener.exitUnpivotNameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotNameColumn" ):
                return visitor.visitUnpivotNameColumn(self)
            else:
                return visitor.visitChildren(self)




    def unpivotNameColumn(self):

        localctx = SqlBaseParser.UnpivotNameColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_unpivotNameColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnAndAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnContext,0)


        def unpivotAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumnAndAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumnAndAlias" ):
                listener.enterUnpivotColumnAndAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumnAndAlias" ):
                listener.exitUnpivotColumnAndAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotColumnAndAlias" ):
                return visitor.visitUnpivotColumnAndAlias(self)
            else:
                return visitor.visitChildren(self)




    def unpivotColumnAndAlias(self):

        localctx = SqlBaseParser.UnpivotColumnAndAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unpivotColumnAndAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.unpivotColumn()
            self.state = 2334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 2333
                self.unpivotAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumn" ):
                listener.enterUnpivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumn" ):
                listener.exitUnpivotColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotColumn" ):
                return visitor.visitUnpivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def unpivotColumn(self):

        localctx = SqlBaseParser.UnpivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_unpivotColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotAlias" ):
                listener.enterUnpivotAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotAlias" ):
                listener.exitUnpivotAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotAlias" ):
                return visitor.visitUnpivotAlias(self)
            else:
                return visitor.visitChildren(self)




    def unpivotAlias(self):

        localctx = SqlBaseParser.UnpivotAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_unpivotAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2338
                self.match(SqlBaseParser.AS)


            self.state = 2341
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self.match(SqlBaseParser.LATERAL)
            self.state = 2344
            self.match(SqlBaseParser.VIEW)
            self.state = 2346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2345
                self.match(SqlBaseParser.OUTER)


            self.state = 2348
            self.qualifiedName()
            self.state = 2349
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2350
                self.expression()
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2351
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2352
                    self.expression()
                    self.state = 2357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2360
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2361
            localctx.tblName = self.identifier()
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2362
                    self.match(SqlBaseParser.AS)


                self.state = 2365
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2366
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2367
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            _la = self._input.LA(1)
            if not(_la==10 or _la==78):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def relationExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationExtensionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationExtensionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2377
                self.match(SqlBaseParser.LATERAL)


            self.state = 2380
            self.relationPrimary()
            self.state = 2384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2381
                    self.relationExtension() 
                self.state = 2386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,0)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def unpivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationExtension" ):
                listener.enterRelationExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationExtension" ):
                listener.exitRelationExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationExtension" ):
                return visitor.visitRelationExtension(self)
            else:
                return visitor.visitChildren(self)




    def relationExtension(self):

        localctx = SqlBaseParser.RelationExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_relationExtension)
        try:
            self.state = 2390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 53, 107, 124, 133, 139, 168, 219, 232]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.joinRelation()
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2388
                self.pivotClause()
                pass
            elif token in [286]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2389
                self.unpivotClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_joinRelation)
        try:
            self.state = 2409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 53, 107, 124, 133, 139, 219, 232]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2392
                self.joinType()
                self.state = 2393
                self.match(SqlBaseParser.JOIN)
                self.state = 2395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2394
                    self.match(SqlBaseParser.LATERAL)


                self.state = 2397
                localctx.right = self.relationPrimary()
                self.state = 2399
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2398
                    self.joinCriteria()


                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2401
                self.match(SqlBaseParser.NATURAL)
                self.state = 2402
                self.joinType()
                self.state = 2403
                self.match(SqlBaseParser.JOIN)
                self.state = 2405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2404
                    self.match(SqlBaseParser.LATERAL)


                self.state = 2407
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2411
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2414
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2415
                self.match(SqlBaseParser.LEFT)
                self.state = 2417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 2416
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 2419
                    self.match(SqlBaseParser.LEFT)


                self.state = 2422
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2423
                self.match(SqlBaseParser.RIGHT)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 2424
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2427
                self.match(SqlBaseParser.FULL)
                self.state = 2429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 2428
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 2431
                    self.match(SqlBaseParser.LEFT)


                self.state = 2434
                self.match(SqlBaseParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_joinCriteria)
        try:
            self.state = 2441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [175]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.match(SqlBaseParser.ON)
                self.state = 2438
                self.booleanExpression(0)
                pass
            elif token in [291]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2439
                self.match(SqlBaseParser.USING)
                self.state = 2440
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seed = None # Token

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def sampleMethod(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleMethodContext,0)


        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 2444
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2445
                self.sampleMethod()


            self.state = 2448
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2449
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2450
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2451
                localctx.seed = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2452
                self.match(SqlBaseParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)
        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)
        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = SqlBaseParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 2455
                    localctx.negativeSign = self.match(SqlBaseParser.MINUS)


                self.state = 2458
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==333 or _la==335):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2459
                self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2460
                self.expression()
                self.state = 2461
                self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2463
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 2464
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2465
                self.match(SqlBaseParser.OUT)
                self.state = 2466
                self.match(SqlBaseParser.OF)
                self.state = 2467
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==175:
                    self.state = 2468
                    self.match(SqlBaseParser.ON)
                    self.state = 2474
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                    if la_ == 1:
                        self.state = 2469
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2470
                        self.qualifiedName()
                        self.state = 2471
                        self.match(SqlBaseParser.LEFT_PAREN)
                        self.state = 2472
                        self.match(SqlBaseParser.RIGHT_PAREN)
                        pass




                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2478
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2481
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2482
            self.identifierSeq()
            self.state = 2483
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2486
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2487
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2494
            self.orderedIdentifier()
            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2495
                self.match(SqlBaseParser.COMMA)
                self.state = 2496
                self.orderedIdentifier()
                self.state = 2501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2502
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==73:
                self.state = 2505
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==20 or _la==73):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2509
            self.identifierComment()
            self.state = 2514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2510
                self.match(SqlBaseParser.COMMA)
                self.state = 2511
                self.identifierComment()
                self.state = 2516
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2517
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2519
            self.identifier()
            self.state = 2521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 2520
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def temporalClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TemporalClauseContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_relationPrimary)
        try:
            self.state = 2550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2523
                self.multipartIdentifier()
                self.state = 2525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2524
                    self.temporalClause()


                self.state = 2528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                if la_ == 1:
                    self.state = 2527
                    self.sample()


                self.state = 2530
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2532
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2533
                self.query()
                self.state = 2534
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2535
                    self.sample()


                self.state = 2538
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2540
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2541
                self.relation()
                self.state = 2542
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2543
                    self.sample()


                self.state = 2546
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2548
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2549
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(SqlBaseParser.VALUES)
            self.state = 2553
            self.expression()
            self.state = 2558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2554
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2555
                    self.expression() 
                self.state = 2560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

            self.state = 2561
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # FunctionNameContext

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = SqlBaseParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563
            localctx.funcName = self.functionName()
            self.state = 2564
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2565
                self.expression()
                self.state = 2570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2566
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2567
                    self.expression()
                    self.state = 2572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2575
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2576
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = SqlBaseParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 2579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2578
                    self.match(SqlBaseParser.AS)


                self.state = 2581
                self.strictIdentifier()
                self.state = 2583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2582
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # StringLitContext
            self.props = None # PropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # StringLitContext
            self.escapedBy = None # StringLitContext
            self.collectionItemsTerminatedBy = None # StringLitContext
            self.keysTerminatedBy = None # StringLitContext
            self.linesSeparatedBy = None # StringLitContext
            self.nullDefinedAs = None # StringLitContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_rowFormat)
        try:
            self.state = 2636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2587
                self.match(SqlBaseParser.ROW)
                self.state = 2588
                self.match(SqlBaseParser.FORMAT)
                self.state = 2589
                self.match(SqlBaseParser.SERDE)
                self.state = 2590
                localctx.name = self.stringLit()
                self.state = 2594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2591
                    self.match(SqlBaseParser.WITH)
                    self.state = 2592
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 2593
                    localctx.props = self.propertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2596
                self.match(SqlBaseParser.ROW)
                self.state = 2597
                self.match(SqlBaseParser.FORMAT)
                self.state = 2598
                self.match(SqlBaseParser.DELIMITED)
                self.state = 2608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2599
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 2600
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2601
                    self.match(SqlBaseParser.BY)
                    self.state = 2602
                    localctx.fieldsTerminatedBy = self.stringLit()
                    self.state = 2606
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                    if la_ == 1:
                        self.state = 2603
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 2604
                        self.match(SqlBaseParser.BY)
                        self.state = 2605
                        localctx.escapedBy = self.stringLit()




                self.state = 2615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 2610
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 2611
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 2612
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2613
                    self.match(SqlBaseParser.BY)
                    self.state = 2614
                    localctx.collectionItemsTerminatedBy = self.stringLit()


                self.state = 2622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 2617
                    self.match(SqlBaseParser.MAP)
                    self.state = 2618
                    self.match(SqlBaseParser.KEYS)
                    self.state = 2619
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2620
                    self.match(SqlBaseParser.BY)
                    self.state = 2621
                    localctx.keysTerminatedBy = self.stringLit()


                self.state = 2628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 2624
                    self.match(SqlBaseParser.LINES)
                    self.state = 2625
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2626
                    self.match(SqlBaseParser.BY)
                    self.state = 2627
                    localctx.linesSeparatedBy = self.stringLit()


                self.state = 2634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 2630
                    self.match(SqlBaseParser.NULL)
                    self.state = 2631
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 2632
                    self.match(SqlBaseParser.AS)
                    self.state = 2633
                    localctx.nullDefinedAs = self.stringLit()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierList" ):
                listener.enterMultipartIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierList" ):
                listener.exitMultipartIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = SqlBaseParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.multipartIdentifier()
            self.state = 2643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2639
                self.match(SqlBaseParser.COMMA)
                self.state = 2640
                self.multipartIdentifier()
                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifier" ):
                listener.enterMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifier" ):
                listener.exitMultipartIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = SqlBaseParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2647
                    self.match(SqlBaseParser.DOT)
                    self.state = 2648
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifierProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierPropertyList" ):
                listener.enterMultipartIdentifierPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierPropertyList" ):
                listener.exitMultipartIdentifierPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierPropertyList" ):
                return visitor.visitMultipartIdentifierPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierPropertyList(self):

        localctx = SqlBaseParser.MultipartIdentifierPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_multipartIdentifierPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2654
            self.multipartIdentifierProperty()
            self.state = 2659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2655
                self.match(SqlBaseParser.COMMA)
                self.state = 2656
                self.multipartIdentifierProperty()
                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # PropertyListContext

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierProperty" ):
                listener.enterMultipartIdentifierProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierProperty" ):
                listener.exitMultipartIdentifierProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierProperty" ):
                return visitor.visitMultipartIdentifierProperty(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierProperty(self):

        localctx = SqlBaseParser.MultipartIdentifierPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_multipartIdentifierProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            self.multipartIdentifier()
            self.state = 2665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 2663
                self.match(SqlBaseParser.OPTIONS)
                self.state = 2664
                localctx.options = self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2667
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2668
                self.match(SqlBaseParser.DOT)


            self.state = 2672
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2674
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2675
                self.match(SqlBaseParser.DOT)


            self.state = 2679
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2681
            self.expression()
            self.state = 2689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 2683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 2682
                    self.match(SqlBaseParser.AS)


                self.state = 2687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 2685
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2686
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2691
            self.namedExpression()
            self.state = 2696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2692
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2693
                    self.namedExpression() 
                self.state = 2698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._partitionField = None # PartitionFieldContext
            self.fields = list() # of PartitionFieldContexts

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def partitionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFieldList" ):
                listener.enterPartitionFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFieldList" ):
                listener.exitPartitionFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFieldList" ):
                return visitor.visitPartitionFieldList(self)
            else:
                return visitor.visitChildren(self)




    def partitionFieldList(self):

        localctx = SqlBaseParser.PartitionFieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_partitionFieldList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2699
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2700
            localctx._partitionField = self.partitionField()
            localctx.fields.append(localctx._partitionField)
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2701
                self.match(SqlBaseParser.COMMA)
                self.state = 2702
                localctx._partitionField = self.partitionField()
                localctx.fields.append(localctx._partitionField)
                self.state = 2707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2708
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionField

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionColumnContext(PartitionFieldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PartitionFieldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionColumn" ):
                listener.enterPartitionColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionColumn" ):
                listener.exitPartitionColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionColumn" ):
                return visitor.visitPartitionColumn(self)
            else:
                return visitor.visitChildren(self)


    class PartitionTransformContext(PartitionFieldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PartitionFieldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transform(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTransform" ):
                listener.enterPartitionTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTransform" ):
                listener.exitPartitionTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionTransform" ):
                return visitor.visitPartitionTransform(self)
            else:
                return visitor.visitChildren(self)



    def partitionField(self):

        localctx = SqlBaseParser.PartitionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_partitionField)
        try:
            self.state = 2712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PartitionTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2710
                self.transform()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PartitionColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2711
                self.colType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentityTransform" ):
                listener.enterIdentityTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentityTransform" ):
                listener.exitIdentityTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransformArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApplyTransform" ):
                listener.enterApplyTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApplyTransform" ):
                listener.exitApplyTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = SqlBaseParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 2727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2714
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2715
                localctx.transformName = self.identifier()
                self.state = 2716
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2717
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2718
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2719
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2725
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformArgument" ):
                listener.enterTransformArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformArgument" ):
                listener.exitTransformArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = SqlBaseParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_transformArgument)
        try:
            self.state = 2731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2729
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2730
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2733
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSeq" ):
                listener.enterExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSeq" ):
                listener.exitExpressionSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionSeq" ):
                return visitor.visitExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def expressionSeq(self):

        localctx = SqlBaseParser.ExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_expressionSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2735
            self.expression()
            self.state = 2740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2736
                self.match(SqlBaseParser.COMMA)
                self.state = 2737
                self.expression()
                self.state = 2742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2744
                self.match(SqlBaseParser.NOT)
                self.state = 2745
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2746
                self.match(SqlBaseParser.EXISTS)
                self.state = 2747
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2748
                self.query()
                self.state = 2749
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2751
                self.valueExpression(0)
                self.state = 2753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 2752
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2763
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2757
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2758
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 2759
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2760
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2761
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 2762
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 2767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # StringLitContext
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2768
                    self.match(SqlBaseParser.NOT)


                self.state = 2771
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 2772
                localctx.lower = self.valueExpression(0)
                self.state = 2773
                self.match(SqlBaseParser.AND)
                self.state = 2774
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2776
                    self.match(SqlBaseParser.NOT)


                self.state = 2779
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 2780
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2781
                self.expression()
                self.state = 2786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2782
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2783
                    self.expression()
                    self.state = 2788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2789
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2791
                    self.match(SqlBaseParser.NOT)


                self.state = 2794
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 2795
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2796
                self.query()
                self.state = 2797
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2799
                    self.match(SqlBaseParser.NOT)


                self.state = 2802
                localctx.kind = self.match(SqlBaseParser.RLIKE)
                self.state = 2803
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2804
                    self.match(SqlBaseParser.NOT)


                self.state = 2807
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==140 or _la==141):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2808
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==10 or _la==15 or _la==242):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2809
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2810
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 2811
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2812
                    self.expression()
                    self.state = 2817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2813
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2814
                        self.expression()
                        self.state = 2819
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2820
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2824
                    self.match(SqlBaseParser.NOT)


                self.state = 2827
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==140 or _la==141):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2828
                localctx.pattern = self.valueExpression(0)
                self.state = 2831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 2829
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 2830
                    localctx.escapeChar = self.stringLit()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2833
                self.match(SqlBaseParser.IS)
                self.state = 2835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2834
                    self.match(SqlBaseParser.NOT)


                self.state = 2837
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2838
                self.match(SqlBaseParser.IS)
                self.state = 2840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2839
                    self.match(SqlBaseParser.NOT)


                self.state = 2842
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==95 or _la==275 or _la==284):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2843
                self.match(SqlBaseParser.IS)
                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 2844
                    self.match(SqlBaseParser.NOT)


                self.state = 2847
                localctx.kind = self.match(SqlBaseParser.DISTINCT)
                self.state = 2848
                self.match(SqlBaseParser.FROM)
                self.state = 2849
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 244
        self.enterRecursionRule(localctx, 244, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2853
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2854
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 35) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2855
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2877
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2858
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2859
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==80 or ((((_la - 316)) & ~0x3f) == 0 and ((1 << (_la - 316)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2860
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2861
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2862
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 259) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2863
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2864
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2865
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 2866
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2867
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2868
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 2869
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2870
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2871
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 2872
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2873
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2874
                        self.comparisonOperator()
                        self.state = 2875
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 2881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DatetimeUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_datetimeUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeUnit" ):
                listener.enterDatetimeUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeUnit" ):
                listener.exitDatetimeUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatetimeUnit" ):
                return visitor.visitDatetimeUnit(self)
            else:
                return visitor.visitChildren(self)




    def datetimeUnit(self):

        localctx = SqlBaseParser.DatetimeUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_datetimeUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2882
            _la = self._input.LA(1)
            if not(_la==60 or _la==62 or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 93458488360961) != 0) or _la==202 or _la==227 or _la==296 or _la==303):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class TimestampaddContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.unit = None # DatetimeUnitContext
            self.unitsAmount = None # ValueExpressionContext
            self.timestamp = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def datetimeUnit(self):
            return self.getTypedRuleContext(SqlBaseParser.DatetimeUnitContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)
        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampadd" ):
                listener.enterTimestampadd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampadd" ):
                listener.exitTimestampadd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampadd" ):
                return visitor.visitTimestampadd(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.str_ = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.len_ = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def ARROW(self):
            return self.getToken(SqlBaseParser.ARROW, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class Any_valueContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_value" ):
                listener.enterAny_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_value" ):
                listener.exitAny_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_value" ):
                return visitor.visitAny_value(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class CurrentLikeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentLike" ):
                listener.enterCurrentLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentLike" ):
                listener.exitCurrentLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentLike" ):
                return visitor.visitCurrentLike(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.input_ = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay" ):
                listener.enterOverlay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay" ):
                listener.exitOverlay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_BRACKET(self):
            return self.getToken(SqlBaseParser.LEFT_BRACKET, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(SqlBaseParser.RIGHT_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class TimestampdiffContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.unit = None # DatetimeUnitContext
            self.startTimestamp = None # ValueExpressionContext
            self.endTimestamp = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def datetimeUnit(self):
            return self.getTypedRuleContext(SqlBaseParser.DatetimeUnitContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)
        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampdiff" ):
                listener.enterTimestampdiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampdiff" ):
                listener.exitTimestampdiff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampdiff" ):
                return visitor.visitTimestampdiff(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class PercentileContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.percentage = None # ValueExpressionContext
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)
        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)
        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self):
            return self.getTypedRuleContext(SqlBaseParser.SortItemContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def PERCENTILE_CONT(self):
            return self.getToken(SqlBaseParser.PERCENTILE_CONT, 0)
        def PERCENTILE_DISC(self):
            return self.getToken(SqlBaseParser.PERCENTILE_DISC, 0)
        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPercentile" ):
                listener.enterPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPercentile" ):
                listener.exitPercentile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPercentile" ):
                return visitor.visitPercentile(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.nullsOption = None # Token
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)
        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)
        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)
        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.str_ = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 248
        self.enterRecursionRule(localctx, 248, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.CurrentLikeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2885
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 936748722493063168) != 0) or _la==290):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimestampaddContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2886
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==66 or _la==266):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2887
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2888
                localctx.unit = self.datetimeUnit()
                self.state = 2889
                self.match(SqlBaseParser.COMMA)
                self.state = 2890
                localctx.unitsAmount = self.valueExpression(0)
                self.state = 2891
                self.match(SqlBaseParser.COMMA)
                self.state = 2892
                localctx.timestamp = self.valueExpression(0)
                self.state = 2893
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TimestampdiffContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2895
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==67 or _la==267):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2896
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2897
                localctx.unit = self.datetimeUnit()
                self.state = 2898
                self.match(SqlBaseParser.COMMA)
                self.state = 2899
                localctx.startTimestamp = self.valueExpression(0)
                self.state = 2900
                self.match(SqlBaseParser.COMMA)
                self.state = 2901
                localctx.endTimestamp = self.valueExpression(0)
                self.state = 2902
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2904
                self.match(SqlBaseParser.CASE)
                self.state = 2906 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2905
                    self.whenClause()
                    self.state = 2908 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==298):
                        break

                self.state = 2912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2910
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2911
                    localctx.elseExpression = self.expression()


                self.state = 2914
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2916
                self.match(SqlBaseParser.CASE)
                self.state = 2917
                localctx.value = self.expression()
                self.state = 2919 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2918
                    self.whenClause()
                    self.state = 2921 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==298):
                        break

                self.state = 2925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2923
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2924
                    localctx.elseExpression = self.expression()


                self.state = 2927
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2929
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==31 or _la==277):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2930
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2931
                self.expression()
                self.state = 2932
                self.match(SqlBaseParser.AS)
                self.state = 2933
                self.dataType()
                self.state = 2934
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2936
                self.match(SqlBaseParser.STRUCT)
                self.state = 2937
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2938
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 2943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2939
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2940
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 2945
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2948
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2949
                self.match(SqlBaseParser.FIRST)
                self.state = 2950
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2951
                self.expression()
                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2952
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2953
                    self.match(SqlBaseParser.NULLS)


                self.state = 2956
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.Any_valueContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2958
                self.match(SqlBaseParser.ANY_VALUE)
                self.state = 2959
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2960
                self.expression()
                self.state = 2963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2961
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2962
                    self.match(SqlBaseParser.NULLS)


                self.state = 2965
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2967
                self.match(SqlBaseParser.LAST)
                self.state = 2968
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2969
                self.expression()
                self.state = 2972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2970
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2971
                    self.match(SqlBaseParser.NULLS)


                self.state = 2974
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2976
                self.match(SqlBaseParser.POSITION)
                self.state = 2977
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2978
                localctx.substr = self.valueExpression(0)
                self.state = 2979
                self.match(SqlBaseParser.IN)
                self.state = 2980
                localctx.str_ = self.valueExpression(0)
                self.state = 2981
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2983
                self.constant()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2984
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2985
                self.qualifiedName()
                self.state = 2986
                self.match(SqlBaseParser.DOT)
                self.state = 2987
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2989
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2990
                self.namedExpression()
                self.state = 2993 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2991
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2992
                    self.namedExpression()
                    self.state = 2995 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 2997
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2999
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3000
                self.query()
                self.state = 3001
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3003
                self.functionName()
                self.state = 3004
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 3006
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                    if la_ == 1:
                        self.state = 3005
                        self.setQuantifier()


                    self.state = 3008
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 3013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3009
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3010
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 3015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3018
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 3019
                    self.match(SqlBaseParser.FILTER)
                    self.state = 3020
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3021
                    self.match(SqlBaseParser.WHERE)
                    self.state = 3022
                    localctx.where = self.booleanExpression(0)
                    self.state = 3023
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 3029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                if la_ == 1:
                    self.state = 3027
                    localctx.nullsOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==118 or _la==216):
                        localctx.nullsOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3028
                    self.match(SqlBaseParser.NULLS)


                self.state = 3033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 3031
                    self.match(SqlBaseParser.OVER)
                    self.state = 3032
                    self.windowSpec()


                pass

            elif la_ == 18:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3035
                self.identifier()
                self.state = 3036
                self.match(SqlBaseParser.ARROW)
                self.state = 3037
                self.expression()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3039
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3040
                self.identifier()
                self.state = 3043 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3041
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3042
                    self.identifier()
                    self.state = 3045 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 3047
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3048
                self.match(SqlBaseParser.ARROW)
                self.state = 3049
                self.expression()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3051
                self.identifier()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3052
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3053
                self.expression()
                self.state = 3054
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3056
                self.match(SqlBaseParser.EXTRACT)
                self.state = 3057
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3058
                localctx.field = self.identifier()
                self.state = 3059
                self.match(SqlBaseParser.FROM)
                self.state = 3060
                localctx.source = self.valueExpression(0)
                self.state = 3061
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3063
                _la = self._input.LA(1)
                if not(_la==251 or _la==252):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3064
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3065
                localctx.str_ = self.valueExpression(0)
                self.state = 3066
                _la = self._input.LA(1)
                if not(_la==4 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3067
                localctx.pos = self.valueExpression(0)
                self.state = 3070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==102:
                    self.state = 3068
                    _la = self._input.LA(1)
                    if not(_la==4 or _la==102):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3069
                    localctx.len_ = self.valueExpression(0)


                self.state = 3072
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3074
                self.match(SqlBaseParser.TRIM)
                self.state = 3075
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                if la_ == 1:
                    self.state = 3076
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==138 or _la==270):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
                if la_ == 1:
                    self.state = 3079
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3082
                self.match(SqlBaseParser.FROM)
                self.state = 3083
                localctx.srcStr = self.valueExpression(0)
                self.state = 3084
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3086
                self.match(SqlBaseParser.OVERLAY)
                self.state = 3087
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3088
                localctx.input_ = self.valueExpression(0)
                self.state = 3089
                self.match(SqlBaseParser.PLACING)
                self.state = 3090
                localctx.replace = self.valueExpression(0)
                self.state = 3091
                self.match(SqlBaseParser.FROM)
                self.state = 3092
                localctx.position = self.valueExpression(0)
                self.state = 3095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 3093
                    self.match(SqlBaseParser.FOR)
                    self.state = 3094
                    localctx.length = self.valueExpression(0)


                self.state = 3097
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.PercentileContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3099
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==191 or _la==192):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3100
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3101
                localctx.percentage = self.valueExpression(0)
                self.state = 3102
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3103
                self.match(SqlBaseParser.WITHIN)
                self.state = 3104
                self.match(SqlBaseParser.GROUP)
                self.state = 3105
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3106
                self.match(SqlBaseParser.ORDER)
                self.state = 3107
                self.match(SqlBaseParser.BY)
                self.state = 3108
                self.sortItem()
                self.state = 3109
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3116
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
                if la_ == 1:
                    self.state = 3110
                    self.match(SqlBaseParser.FILTER)
                    self.state = 3111
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3112
                    self.match(SqlBaseParser.WHERE)
                    self.state = 3113
                    localctx.where = self.booleanExpression(0)
                    self.state = 3114
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 3120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                if la_ == 1:
                    self.state = 3118
                    self.match(SqlBaseParser.OVER)
                    self.state = 3119
                    self.windowSpec()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3134
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3132
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3124
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 3125
                        self.match(SqlBaseParser.LEFT_BRACKET)
                        self.state = 3126
                        localctx.index = self.valueExpression(0)
                        self.state = 3127
                        self.match(SqlBaseParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3129
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3130
                        self.match(SqlBaseParser.DOT)
                        self.state = 3131
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3136
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class ParameterLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterLiteral" ):
                listener.enterParameterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterLiteral" ):
                listener.exitParameterLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterLiteral" ):
                return visitor.visitParameterLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_constant)
        try:
            self.state = 3151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3137
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ParameterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3138
                self.match(SqlBaseParser.COLON)
                self.state = 3139
                self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3140
                self.interval()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3141
                self.identifier()
                self.state = 3142
                self.stringLit()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3144
                self.number()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3145
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3147 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3146
                        self.stringLit()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3149 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,401,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3153
            _la = self._input.LA(1)
            if not(((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            _la = self._input.LA(1)
            if not(_la==80 or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            _la = self._input.LA(1)
            if not(_la==13 or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 577586652210266113) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3159
            _la = self._input.LA(1)
            if not(_la==95 or _la==275):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.match(SqlBaseParser.INTERVAL)
            self.state = 3164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 3162
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3163
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # MultiUnitsIntervalContext

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingMultiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingMultiUnitsInterval" ):
                listener.enterErrorCapturingMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingMultiUnitsInterval" ):
                listener.exitErrorCapturingMultiUnitsInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            localctx.body = self.multiUnitsInterval()
            self.state = 3168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.state = 3167
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unitInMultiUnits = None # UnitInMultiUnitsContext
            self.unit = list() # of UnitInMultiUnitsContexts

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,i)


        def unitInMultiUnits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitInMultiUnitsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitInMultiUnitsContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiUnitsInterval" ):
                listener.enterMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiUnitsInterval" ):
                listener.exitMultiUnitsInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = SqlBaseParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3173 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3170
                    self.intervalValue()
                    self.state = 3171
                    localctx._unitInMultiUnits = self.unitInMultiUnits()
                    localctx.unit.append(localctx._unitInMultiUnits)

                else:
                    raise NoViableAltException(self)
                self.state = 3175 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,405,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingUnitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingUnitToUnitInterval" ):
                listener.enterErrorCapturingUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingUnitToUnitInterval" ):
                listener.exitErrorCapturingUnitToUnitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3177
            localctx.body = self.unitToUnitInterval()
            self.state = 3180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 3178
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3179
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.from_ = None # UnitInUnitToUnitContext
            self.to = None # UnitInUnitToUnitContext

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def unitInUnitToUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitInUnitToUnitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitInUnitToUnitContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitToUnitInterval" ):
                listener.enterUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitToUnitInterval" ):
                listener.exitUnitToUnitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = SqlBaseParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3182
            localctx.value = self.intervalValue()
            self.state = 3183
            localctx.from_ = self.unitInUnitToUnit()
            self.state = 3184
            self.match(SqlBaseParser.TO)
            self.state = 3185
            localctx.to = self.unitInUnitToUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3187
                _la = self._input.LA(1)
                if not(_la==314 or _la==315):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 3190
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.state = 3191
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                self.state = 3192
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitInMultiUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitInMultiUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitInMultiUnits" ):
                listener.enterUnitInMultiUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitInMultiUnits" ):
                listener.exitUnitInMultiUnits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitInMultiUnits" ):
                return visitor.visitUnitInMultiUnits(self)
            else:
                return visitor.visitChildren(self)




    def unitInMultiUnits(self):

        localctx = SqlBaseParser.UnitInMultiUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_unitInMultiUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            _la = self._input.LA(1)
            if not(_la==60 or _la==61 or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 7035774906138627) != 0) or _la==227 or _la==228 or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & 387) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitInUnitToUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitInUnitToUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitInUnitToUnit" ):
                listener.enterUnitInUnitToUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitInUnitToUnit" ):
                listener.exitUnitInUnitToUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitInUnitToUnit" ):
                return visitor.visitUnitInUnitToUnit(self)
            else:
                return visitor.visitChildren(self)




    def unitInUnitToUnit(self):

        localctx = SqlBaseParser.UnitInUnitToUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_unitInUnitToUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3197
            _la = self._input.LA(1)
            if not(_la==60 or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 87960930222081) != 0) or _la==227 or _la==303):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_colPosition)
        try:
            self.state = 3202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3199
                localctx.position = self.match(SqlBaseParser.FIRST)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3200
                localctx.position = self.match(SqlBaseParser.AFTER)
                self.state = 3201
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex_ = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class YearMonthIntervalDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.from_ = None # Token
            self.to = None # Token
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)
        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MONTH)
            else:
                return self.getToken(SqlBaseParser.MONTH, i)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearMonthIntervalDataType" ):
                listener.enterYearMonthIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearMonthIntervalDataType" ):
                listener.exitYearMonthIntervalDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYearMonthIntervalDataType" ):
                return visitor.visitYearMonthIntervalDataType(self)
            else:
                return visitor.visitChildren(self)


    class DayTimeIntervalDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.from_ = None # Token
            self.to = None # Token
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)
        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.HOUR)
            else:
                return self.getToken(SqlBaseParser.HOUR, i)
        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUTE)
            else:
                return self.getToken(SqlBaseParser.MINUTE, i)
        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SECOND)
            else:
                return self.getToken(SqlBaseParser.SECOND, i)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayTimeIntervalDataType" ):
                listener.enterDayTimeIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayTimeIntervalDataType" ):
                listener.exitDayTimeIntervalDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDayTimeIntervalDataType" ):
                return visitor.visitDayTimeIntervalDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3204
                localctx.complex_ = self.match(SqlBaseParser.ARRAY)
                self.state = 3205
                self.match(SqlBaseParser.LT)
                self.state = 3206
                self.dataType()
                self.state = 3207
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3209
                localctx.complex_ = self.match(SqlBaseParser.MAP)
                self.state = 3210
                self.match(SqlBaseParser.LT)
                self.state = 3211
                self.dataType()
                self.state = 3212
                self.match(SqlBaseParser.COMMA)
                self.state = 3213
                self.dataType()
                self.state = 3214
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3216
                localctx.complex_ = self.match(SqlBaseParser.STRUCT)
                self.state = 3223
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [310]:
                    self.state = 3217
                    self.match(SqlBaseParser.LT)
                    self.state = 3219
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                    if la_ == 1:
                        self.state = 3218
                        self.complexColTypeList()


                    self.state = 3221
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [308]:
                    self.state = 3222
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.YearMonthIntervalDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3225
                self.match(SqlBaseParser.INTERVAL)
                self.state = 3226
                localctx.from_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==161 or _la==303):
                    localctx.from_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 3227
                    self.match(SqlBaseParser.TO)
                    self.state = 3228
                    localctx.to = self.match(SqlBaseParser.MONTH)


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DayTimeIntervalDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3231
                self.match(SqlBaseParser.INTERVAL)
                self.state = 3232
                localctx.from_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==60 or _la==115 or _la==159 or _la==227):
                    localctx.from_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3233
                    self.match(SqlBaseParser.TO)
                    self.state = 3234
                    localctx.to = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==115 or _la==159 or _la==227):
                        localctx.to = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3237
                self.identifier()
                self.state = 3248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
                if la_ == 1:
                    self.state = 3238
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3239
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 3244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3240
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3241
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 3246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3247
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPositionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPositionList" ):
                listener.enterQualifiedColTypeWithPositionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPositionList" ):
                listener.exitQualifiedColTypeWithPositionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3252
            self.qualifiedColTypeWithPosition()
            self.state = 3257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3253
                self.match(SqlBaseParser.COMMA)
                self.state = 3254
                self.qualifiedColTypeWithPosition()
                self.state = 3259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPosition" ):
                listener.enterQualifiedColTypeWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPosition" ):
                listener.exitQualifiedColTypeWithPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3260
            localctx.name = self.multipartIdentifier()
            self.state = 3261
            self.dataType()
            self.state = 3264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 3262
                self.match(SqlBaseParser.NOT)
                self.state = 3263
                self.match(SqlBaseParser.NULL)


            self.state = 3267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 3266
                self.defaultExpression()


            self.state = 3270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 3269
                self.commentSpec()


            self.state = 3273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==100:
                self.state = 3272
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_defaultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultExpression" ):
                listener.enterDefaultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultExpression" ):
                listener.exitDefaultExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultExpression" ):
                return visitor.visitDefaultExpression(self)
            else:
                return visitor.visitChildren(self)




    def defaultExpression(self):

        localctx = SqlBaseParser.DefaultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_defaultExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.match(SqlBaseParser.DEFAULT)
            self.state = 3276
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3278
            self.colType()
            self.state = 3283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3279
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3280
                    self.colType() 
                self.state = 3285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3286
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3287
            self.dataType()
            self.state = 3290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 3288
                self.match(SqlBaseParser.NOT)
                self.state = 3289
                self.match(SqlBaseParser.NULL)


            self.state = 3293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 3292
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateOrReplaceTableColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createOrReplaceTableColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateOrReplaceTableColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createOrReplaceTableColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateOrReplaceTableColTypeList" ):
                listener.enterCreateOrReplaceTableColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateOrReplaceTableColTypeList" ):
                listener.exitCreateOrReplaceTableColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateOrReplaceTableColTypeList" ):
                return visitor.visitCreateOrReplaceTableColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def createOrReplaceTableColTypeList(self):

        localctx = SqlBaseParser.CreateOrReplaceTableColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_createOrReplaceTableColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3295
            self.createOrReplaceTableColType()
            self.state = 3300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3296
                self.match(SqlBaseParser.COMMA)
                self.state = 3297
                self.createOrReplaceTableColType()
                self.state = 3302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateOrReplaceTableColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def colDefinitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColDefinitionOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColDefinitionOptionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createOrReplaceTableColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateOrReplaceTableColType" ):
                listener.enterCreateOrReplaceTableColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateOrReplaceTableColType" ):
                listener.exitCreateOrReplaceTableColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateOrReplaceTableColType" ):
                return visitor.visitCreateOrReplaceTableColType(self)
            else:
                return visitor.visitChildren(self)




    def createOrReplaceTableColType(self):

        localctx = SqlBaseParser.CreateOrReplaceTableColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_createOrReplaceTableColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3303
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3304
            self.dataType()
            self.state = 3308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44 or _la==69 or _la==170:
                self.state = 3305
                self.colDefinitionOption()
                self.state = 3310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColDefinitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colDefinitionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColDefinitionOption" ):
                listener.enterColDefinitionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColDefinitionOption" ):
                listener.exitColDefinitionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColDefinitionOption" ):
                return visitor.visitColDefinitionOption(self)
            else:
                return visitor.visitChildren(self)




    def colDefinitionOption(self):

        localctx = SqlBaseParser.ColDefinitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_colDefinitionOption)
        try:
            self.state = 3315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3311
                self.match(SqlBaseParser.NOT)
                self.state = 3312
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3313
                self.defaultExpression()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3314
                self.commentSpec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3317
            self.complexColType()
            self.state = 3322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3318
                self.match(SqlBaseParser.COMMA)
                self.state = 3319
                self.complexColType()
                self.state = 3324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.identifier()
            self.state = 3327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 3326
                self.match(SqlBaseParser.COLON)


            self.state = 3329
            self.dataType()
            self.state = 3332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 3330
                self.match(SqlBaseParser.NOT)
                self.state = 3331
                self.match(SqlBaseParser.NULL)


            self.state = 3335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 3334
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3337
            self.match(SqlBaseParser.WHEN)
            self.state = 3338
            localctx.condition = self.expression()
            self.state = 3339
            self.match(SqlBaseParser.THEN)
            self.state = 3340
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = SqlBaseParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self.match(SqlBaseParser.WINDOW)
            self.state = 3343
            self.namedWindow()
            self.state = 3348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,432,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3344
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3345
                    self.namedWindow() 
                self.state = 3350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,432,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3351
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3352
            self.match(SqlBaseParser.AS)
            self.state = 3353
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3355
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3356
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3357
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3358
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3360
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3395
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37]:
                    self.state = 3361
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 3362
                    self.match(SqlBaseParser.BY)
                    self.state = 3363
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3364
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3365
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3370
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [3, 79, 180, 188, 204, 226, 243]:
                    self.state = 3381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==79 or _la==188:
                        self.state = 3371
                        _la = self._input.LA(1)
                        if not(_la==79 or _la==188):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3372
                        self.match(SqlBaseParser.BY)
                        self.state = 3373
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3378
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 3374
                            self.match(SqlBaseParser.COMMA)
                            self.state = 3375
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3380
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==180 or _la==243:
                        self.state = 3383
                        _la = self._input.LA(1)
                        if not(_la==180 or _la==243):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3384
                        self.match(SqlBaseParser.BY)
                        self.state = 3385
                        self.sortItem()
                        self.state = 3390
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 3386
                            self.match(SqlBaseParser.COMMA)
                            self.state = 3387
                            self.sortItem()
                            self.state = 3392
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204 or _la==226:
                    self.state = 3397
                    self.windowFrame()


                self.state = 3400
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_windowFrame)
        try:
            self.state = 3419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3403
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 3404
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3405
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 3406
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3407
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 3408
                self.match(SqlBaseParser.BETWEEN)
                self.state = 3409
                localctx.start = self.frameBound()
                self.state = 3410
                self.match(SqlBaseParser.AND)
                self.state = 3411
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3413
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 3414
                self.match(SqlBaseParser.BETWEEN)
                self.state = 3415
                localctx.start = self.frameBound()
                self.state = 3416
                self.match(SqlBaseParser.AND)
                self.state = 3417
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3421
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 3422
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==101 or _la==197):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3423
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 3424
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3425
                self.expression()
                self.state = 3426
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==101 or _la==197):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = SqlBaseParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            self.qualifiedName()
            self.state = 3435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3431
                self.match(SqlBaseParser.COMMA)
                self.state = 3432
                self.qualifiedName()
                self.state = 3437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = SqlBaseParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_functionName)
        try:
            self.state = 3442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3438
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3439
                self.match(SqlBaseParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3440
                self.match(SqlBaseParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3441
                self.match(SqlBaseParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            self.identifier()
            self.state = 3449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,445,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3445
                    self.match(SqlBaseParser.DOT)
                    self.state = 3446
                    self.identifier() 
                self.state = 3451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,445,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingIdentifier" ):
                listener.enterErrorCapturingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingIdentifier" ):
                listener.exitErrorCapturingIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3452
            self.identifier()
            self.state = 3453
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUS)
            else:
                return self.getToken(SqlBaseParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorIdent" ):
                listener.enterErrorIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorIdent" ):
                listener.exitErrorIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealIdent" ):
                listener.enterRealIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealIdent" ):
                listener.exitRealIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealIdent" ):
                return visitor.visitRealIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 3462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3457 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3455
                        self.match(SqlBaseParser.MINUS)
                        self.state = 3456
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3459 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,446,self._ctx)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_identifier)
        try:
            self.state = 3467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3464
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3465
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!SQL_standard_keyword_behavior")
                self.state = 3466
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_strictIdentifier)
        try:
            self.state = 3475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3469
                self.match(SqlBaseParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3470
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3471
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "SQL_standard_keyword_behavior")
                self.state = 3472
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3473
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!SQL_standard_keyword_behavior")
                self.state = 3474
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def DOUBLEQUOTED_STRING(self):
            return self.getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_quotedIdentifier)
        try:
            self.state = 3480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3477
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3478
                if not double_quoted_identifiers:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "double_quoted_identifiers")
                self.state = 3479
                self.match(SqlBaseParser.DOUBLEQUOTED_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BackQuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_backQuotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def backQuotedIdentifier(self):

        localctx = SqlBaseParser.BackQuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_backQuotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3482
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyDecimalLiteral" ):
                listener.enterLegacyDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyDecimalLiteral" ):
                listener.exitLegacyDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentLiteral" ):
                listener.enterExponentLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentLiteral" ):
                listener.exitExponentLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FloatLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT_LITERAL(self):
            return self.getToken(SqlBaseParser.FLOAT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3484
                if not legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!legacy_exponent_literal_as_decimal_enabled")
                self.state = 3486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3485
                    self.match(SqlBaseParser.MINUS)


                self.state = 3488
                self.match(SqlBaseParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3489
                if not legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!legacy_exponent_literal_as_decimal_enabled")
                self.state = 3491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3490
                    self.match(SqlBaseParser.MINUS)


                self.state = 3493
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3494
                if not legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "legacy_exponent_literal_as_decimal_enabled")
                self.state = 3496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3495
                    self.match(SqlBaseParser.MINUS)


                self.state = 3498
                _la = self._input.LA(1)
                if not(_la==334 or _la==335):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3499
                    self.match(SqlBaseParser.MINUS)


                self.state = 3502
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3503
                    self.match(SqlBaseParser.MINUS)


                self.state = 3506
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3507
                    self.match(SqlBaseParser.MINUS)


                self.state = 3510
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3511
                    self.match(SqlBaseParser.MINUS)


                self.state = 3514
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3515
                    self.match(SqlBaseParser.MINUS)


                self.state = 3518
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.FloatLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3519
                    self.match(SqlBaseParser.MINUS)


                self.state = 3522
                self.match(SqlBaseParser.FLOAT_LITERAL)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 3524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3523
                    self.match(SqlBaseParser.MINUS)


                self.state = 3526
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token
            self.dropDefault = None # Token

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterColumnAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnAction" ):
                listener.enterAlterColumnAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnAction" ):
                listener.exitAlterColumnAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = SqlBaseParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3529
                self.match(SqlBaseParser.TYPE)
                self.state = 3530
                self.dataType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3531
                self.commentSpec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3532
                self.colPosition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3533
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==81 or _la==237):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3534
                self.match(SqlBaseParser.NOT)
                self.state = 3535
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3536
                self.match(SqlBaseParser.SET)
                self.state = 3537
                self.defaultExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3538
                localctx.dropDefault = self.match(SqlBaseParser.DROP)
                self.state = 3539
                self.match(SqlBaseParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def DOUBLEQUOTED_STRING(self):
            return self.getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLit" ):
                listener.enterStringLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLit" ):
                listener.exitStringLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLit" ):
                return visitor.visitStringLit(self)
            else:
                return visitor.visitChildren(self)




    def stringLit(self):

        localctx = SqlBaseParser.StringLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_stringLit)
        try:
            self.state = 3545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3542
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3543
                if not double_quoted_identifiers:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!double_quoted_identifiers")
                self.state = 3544
                self.match(SqlBaseParser.DOUBLEQUOTED_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = SqlBaseParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_comment)
        try:
            self.state = 3549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3547
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3548
                self.match(SqlBaseParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SqlBaseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_version)
        try:
            self.state = 3553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3551
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3552
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ansiNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsiNonReserved" ):
                listener.enterAnsiNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsiNonReserved" ):
                listener.exitAnsiNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = SqlBaseParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1095506144518513920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1226541253418303489) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4526990087983987049) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9222800015863250911) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 503550320826175) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictNonReserved" ):
                listener.enterStrictNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictNonReserved" ):
                listener.exitStrictNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = SqlBaseParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            _la = self._input.LA(1)
            if not(_la==14 or _la==53 or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 10278509576454145) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 2251799813685377) != 0) or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & 577586652210266177) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(SqlBaseParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(SqlBaseParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(SqlBaseParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(SqlBaseParser.PERCENTILE_DISC, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(SqlBaseParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(SqlBaseParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3559
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254757632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152930300704063489) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -70918499992721) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -35734195011585) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 562932739997695) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[44] = self.queryTerm_sempred
        self._predicates[120] = self.booleanExpression_sempred
        self._predicates[122] = self.valueExpression_sempred
        self._predicates[124] = self.primaryExpression_sempred
        self._predicates[161] = self.identifier_sempred
        self._predicates[162] = self.strictIdentifier_sempred
        self._predicates[163] = self.quotedIdentifier_sempred
        self._predicates[165] = self.number_sempred
        self._predicates[167] = self.stringLit_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
        if predIndex == 0:
            return self.precpred(self._ctx, 3)
        if predIndex == 1:
            return self.legacy_setops_precedence_enabled
        if predIndex == 2:
            return self.precpred(self._ctx, 2)
        if predIndex == 3:
            return self.legacy_setops_precedence_enabled
        if predIndex == 4:
            return self.precpred(self._ctx, 1)
        if predIndex == 5:
            return self.legacy_setops_precedence_enabled

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
        if predIndex == 6:
            return self.precpred(self._ctx, 2)
        if predIndex == 7:
            return self.precpred(self._ctx, 1)

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
        if predIndex == 8:
            return self.precpred(self._ctx, 6)
        if predIndex == 9:
            return self.precpred(self._ctx, 5)
        if predIndex == 10:
            return self.precpred(self._ctx, 4)
        if predIndex == 11:
            return self.precpred(self._ctx, 3)
        if predIndex == 12:
            return self.precpred(self._ctx, 2)
        if predIndex == 13:
            return self.precpred(self._ctx, 1)

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
        if predIndex == 14:
            return self.precpred(self._ctx, 9)
        if predIndex == 15:
            return self.precpred(self._ctx, 7)

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
        if predIndex == 16:
            return self.SQL_standard_keyword_behavior

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
        if predIndex == 17:
            return self.SQL_standard_keyword_behavior
        if predIndex == 18:
            return self.SQL_standard_keyword_behavior

    def quotedIdentifier_sempred(self, localctx:QuotedIdentifierContext, predIndex:int):
        if predIndex == 19:
            return self.double_quoted_identifiers

    def number_sempred(self, localctx:NumberContext, predIndex:int):
        if predIndex == 20:
            return self.legacy_exponent_literal_as_decimal_enabled
        if predIndex == 21:
            return self.legacy_exponent_literal_as_decimal_enabled
        if predIndex == 22:
            return self.legacy_exponent_literal_as_decimal_enabled

    def stringLit_sempred(self, localctx:StringLitContext, predIndex:int):
        if predIndex == 23:
            return self.double_quoted_identifiers
