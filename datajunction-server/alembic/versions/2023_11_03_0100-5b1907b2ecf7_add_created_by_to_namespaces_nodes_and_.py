"""add created_by to namespaces, nodes, and tags

Revision ID: 5b1907b2ecf7
Revises: 87cf9c00ac00
Create Date: 2023-11-03 01:00:11.266047+00:00

"""
# pylint: disable=no-member, invalid-name, missing-function-docstring, unused-import, no-name-in-module

import uuid

import sqlalchemy as sa
import sqlmodel
from sqlalchemy import orm

from alembic import op

# revision identifiers, used by Alembic.
revision = "5b1907b2ecf7"
down_revision = "87cf9c00ac00"
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    conn.execute(
        sa.sql.text(
            "insert into users (username, password, oauth_provider, is_admin) values ('unknown', :pass, 'BASIC', 0)",  # pylint: disable=line-too-long
        ),
        {"pass": uuid.uuid4().hex},
    )
    unknown_user = conn.execute(
        sa.sql.text("select id from users where username='unknown'"),
    ).fetchone()
    unknown_user_id = unknown_user[0]
    with op.batch_alter_table("node", schema=None) as batch_op:
        batch_op.add_column(sa.Column("created_by_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            batch_op.f("fk_node_created_by_id_users"),
            "users",
            ["created_by_id"],
            ["id"],
        )

    with op.batch_alter_table("nodenamespace", schema=None) as batch_op:
        batch_op.add_column(sa.Column("created_by_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            batch_op.f("fk_nodenamespace_created_by_id_users"),
            "users",
            ["created_by_id"],
            ["id"],
        )

    with op.batch_alter_table("tag", schema=None) as batch_op:
        batch_op.add_column(sa.Column("created_by_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            batch_op.f("fk_tag_created_by_id_users"),
            "users",
            ["created_by_id"],
            ["id"],
        )

    conn.execute(
        sa.sql.text("update node set created_by_id=:unknown_user_id"),
        {"unknown_user_id": unknown_user_id},
    )
    conn.execute(
        sa.sql.text("update tag set created_by_id=:unknown_user_id"),
        {"unknown_user_id": unknown_user_id},
    )
    conn.execute(
        sa.sql.text("update nodenamespace set created_by_id=:unknown_user_id"),
        {"unknown_user_id": unknown_user_id},
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("tag", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_tag_created_by_id_users"),
            type_="foreignkey",
        )
        batch_op.drop_column("created_by_id")

    with op.batch_alter_table("nodenamespace", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_nodenamespace_created_by_id_users"),
            type_="foreignkey",
        )
        batch_op.drop_column("created_by_id")

    with op.batch_alter_table("node", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_node_created_by_id_users"),
            type_="foreignkey",
        )
        batch_op.drop_column("created_by_id")

    # ### end Alembic commands ###
