# Generated by ariadne-codegen

from .base_operation import GraphQLField


class AggregationRuleGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AggregationRuleGraphQLField":
        self._alias = alias
        return self


class AttributeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AttributeGraphQLField":
        self._alias = alias
        return self


class AttributeTypeNameGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AttributeTypeNameGraphQLField":
        self._alias = alias
        return self


class AvailabilityStateGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AvailabilityStateGraphQLField":
        self._alias = alias
        return self


class BackfillGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "BackfillGraphQLField":
        self._alias = alias
        return self


class CatalogGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CatalogGraphQLField":
        self._alias = alias
        return self


class ColumnGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ColumnGraphQLField":
        self._alias = alias
        return self


class ColumnMetadataGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ColumnMetadataGraphQLField":
        self._alias = alias
        return self


class DJErrorGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DJErrorGraphQLField":
        self._alias = alias
        return self


class DecomposedMetricGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DecomposedMetricGraphQLField":
        self._alias = alias
        return self


class DialectInfoGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DialectInfoGraphQLField":
        self._alias = alias
        return self


class DimensionAttributeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DimensionAttributeGraphQLField":
        self._alias = alias
        return self


class DimensionLinkGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DimensionLinkGraphQLField":
        self._alias = alias
        return self


class EngineGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "EngineGraphQLField":
        self._alias = alias
        return self


class GeneratedSQLGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "GeneratedSQLGraphQLField":
        self._alias = alias
        return self


class MaterializationConfigGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MaterializationConfigGraphQLField":
        self._alias = alias
        return self


class MetricComponentGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MetricComponentGraphQLField":
        self._alias = alias
        return self


class MetricMetadataGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MetricMetadataGraphQLField":
        self._alias = alias
        return self


class NodeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeGraphQLField":
        self._alias = alias
        return self


class NodeConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeConnectionGraphQLField":
        self._alias = alias
        return self


class NodeEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeEdgeGraphQLField":
        self._alias = alias
        return self


class NodeNameGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeNameGraphQLField":
        self._alias = alias
        return self


class NodeRevisionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeRevisionGraphQLField":
        self._alias = alias
        return self


class PageInfoGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PageInfoGraphQLField":
        self._alias = alias
        return self


class PartitionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PartitionGraphQLField":
        self._alias = alias
        return self


class PartitionAvailabilityGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PartitionAvailabilityGraphQLField":
        self._alias = alias
        return self


class PartitionBackfillGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PartitionBackfillGraphQLField":
        self._alias = alias
        return self


class SemanticEntityGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "SemanticEntityGraphQLField":
        self._alias = alias
        return self


class TagGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TagGraphQLField":
        self._alias = alias
        return self


class TagBaseGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TagBaseGraphQLField":
        self._alias = alias
        return self


class UnitGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UnitGraphQLField":
        self._alias = alias
        return self


class UserGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UserGraphQLField":
        self._alias = alias
        return self
