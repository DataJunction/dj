# Generated by ariadne-codegen
# Source: datajunction_server/api/graphql/schema.graphql

from enum import Enum


class Aggregability(str, Enum):
    FULL = "FULL"
    LIMITED = "LIMITED"
    NONE = "NONE"


class Dialect(str, Enum):
    SPARK = "SPARK"
    TRINO = "TRINO"
    DRUID = "DRUID"


class ErrorCode(str, Enum):
    UNKNOWN_ERROR = "UNKNOWN_ERROR"
    NOT_IMPLEMENTED_ERROR = "NOT_IMPLEMENTED_ERROR"
    ALREADY_EXISTS = "ALREADY_EXISTS"
    INVALID_FILTER_PATTERN = "INVALID_FILTER_PATTERN"
    INVALID_COLUMN_IN_FILTER = "INVALID_COLUMN_IN_FILTER"
    INVALID_VALUE_IN_FILTER = "INVALID_VALUE_IN_FILTER"
    INVALID_ARGUMENTS_TO_FUNCTION = "INVALID_ARGUMENTS_TO_FUNCTION"
    INVALID_SQL_QUERY = "INVALID_SQL_QUERY"
    MISSING_COLUMNS = "MISSING_COLUMNS"
    UNKNOWN_NODE = "UNKNOWN_NODE"
    NODE_TYPE_ERROR = "NODE_TYPE_ERROR"
    INVALID_DIMENSION_JOIN = "INVALID_DIMENSION_JOIN"
    INVALID_COLUMN = "INVALID_COLUMN"
    QUERY_SERVICE_ERROR = "QUERY_SERVICE_ERROR"
    INVALID_ORDER_BY = "INVALID_ORDER_BY"
    COMPOUND_BUILD_EXCEPTION = "COMPOUND_BUILD_EXCEPTION"
    MISSING_PARENT = "MISSING_PARENT"
    TYPE_INFERENCE = "TYPE_INFERENCE"
    MISSING_PARAMETER = "MISSING_PARAMETER"
    AUTHENTICATION_ERROR = "AUTHENTICATION_ERROR"
    OAUTH_ERROR = "OAUTH_ERROR"
    INVALID_LOGIN_CREDENTIALS = "INVALID_LOGIN_CREDENTIALS"
    USER_NOT_FOUND = "USER_NOT_FOUND"
    UNAUTHORIZED_ACCESS = "UNAUTHORIZED_ACCESS"
    INCOMPLETE_AUTHORIZATION = "INCOMPLETE_AUTHORIZATION"
    INVALID_PARENT = "INVALID_PARENT"
    INVALID_DIMENSION = "INVALID_DIMENSION"
    INVALID_METRIC = "INVALID_METRIC"


class JoinCardinality(str, Enum):
    ONE_TO_ONE = "ONE_TO_ONE"
    ONE_TO_MANY = "ONE_TO_MANY"
    MANY_TO_ONE = "MANY_TO_ONE"
    MANY_TO_MANY = "MANY_TO_MANY"


class JoinType(str, Enum):
    LEFT = "LEFT"
    RIGHT = "RIGHT"
    INNER = "INNER"
    FULL = "FULL"
    CROSS = "CROSS"


class MetricDirection(str, Enum):
    HIGHER_IS_BETTER = "HIGHER_IS_BETTER"
    LOWER_IS_BETTER = "LOWER_IS_BETTER"
    NEUTRAL = "NEUTRAL"


class NodeMode(str, Enum):
    PUBLISHED = "PUBLISHED"
    DRAFT = "DRAFT"


class NodeStatus(str, Enum):
    VALID = "VALID"
    INVALID = "INVALID"


class NodeType(str, Enum):
    SOURCE = "SOURCE"
    TRANSFORM = "TRANSFORM"
    METRIC = "METRIC"
    DIMENSION = "DIMENSION"
    CUBE = "CUBE"


class OAuthProvider(str, Enum):
    BASIC = "BASIC"
    GITHUB = "GITHUB"
    GOOGLE = "GOOGLE"


class PartitionType(str, Enum):
    TEMPORAL = "TEMPORAL"
    CATEGORICAL = "CATEGORICAL"


class SemanticType(str, Enum):
    MEASURE = "MEASURE"
    METRIC = "METRIC"
    DIMENSION = "DIMENSION"
    TIMESTAMP = "TIMESTAMP"
