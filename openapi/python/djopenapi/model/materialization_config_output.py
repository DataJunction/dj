# coding: utf-8

"""
    DJ server

    A DataJunction metrics layer  # noqa: E501

    The version of the OpenAPI document: 0.0.post1.dev1+gd5a7903
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from djopenapi import schemas  # noqa: F401


class MaterializationConfigOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Output for materialization config.
    """


    class MetaOapg:
        required = {
            "engine",
            "config",
        }
        
        class properties:
        
            @staticmethod
            def engine() -> typing.Type['EngineInfo']:
                return EngineInfo
            config = schemas.StrSchema
            __annotations__ = {
                "engine": engine,
                "config": config,
            }
    
    engine: 'EngineInfo'
    config: MetaOapg.properties.config
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engine"]) -> 'EngineInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["engine", "config", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engine"]) -> 'EngineInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["engine", "config", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        engine: 'EngineInfo',
        config: typing.Union[MetaOapg.properties.config, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MaterializationConfigOutput':
        return super().__new__(
            cls,
            *_args,
            engine=engine,
            config=config,
            _configuration=_configuration,
            **kwargs,
        )

from djopenapi.model.engine_info import EngineInfo
