# coding: utf-8

"""
    DJ server

    A DataJunction metrics layer  # noqa: E501

    The version of the OpenAPI document: 0.0.post1.dev1+gd5a7903
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from djopenapi import schemas  # noqa: F401


class ColumnOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A simplified column schema, without ID or dimensions.
    """


    class MetaOapg:
        required = {
            "name",
            "attributes",
            "type",
        }
        
        class properties:
            name = schemas.StrSchema
            type = schemas.DictSchema
            
            
            class attributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttributeOutput']:
                        return AttributeOutput
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AttributeOutput'], typing.List['AttributeOutput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttributeOutput':
                    return super().__getitem__(i)
        
            @staticmethod
            def dimension() -> typing.Type['NodeNameOutput']:
                return NodeNameOutput
            __annotations__ = {
                "name": name,
                "type": type,
                "attributes": attributes,
                "dimension": dimension,
            }
    
    name: MetaOapg.properties.name
    attributes: MetaOapg.properties.attributes
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dimension"]) -> 'NodeNameOutput': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "type", "attributes", "dimension", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dimension"]) -> typing.Union['NodeNameOutput', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "type", "attributes", "dimension", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        attributes: typing.Union[MetaOapg.properties.attributes, list, tuple, ],
        type: typing.Union[MetaOapg.properties.type, dict, frozendict.frozendict, ],
        dimension: typing.Union['NodeNameOutput', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ColumnOutput':
        return super().__new__(
            cls,
            *_args,
            name=name,
            attributes=attributes,
            type=type,
            dimension=dimension,
            _configuration=_configuration,
            **kwargs,
        )

from djopenapi.model.attribute_output import AttributeOutput
from djopenapi.model.node_name_output import NodeNameOutput
