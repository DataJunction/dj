# coding: utf-8

"""
    DJ server

    A DataJunction metrics layer  # noqa: E501

    The version of the OpenAPI document: 0.0.post1.dev1+gd5a7903
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from djopenapi import schemas  # noqa: F401


class AttributeType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Available attribute types for column metadata.
    """


    class MetaOapg:
        required = {
            "allowed_node_types",
            "name",
            "namespace",
            "description",
        }
        
        class properties:
            namespace = schemas.StrSchema
            name = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class allowed_node_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NodeType']:
                        return NodeType
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NodeType'], typing.List['NodeType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowed_node_types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NodeType':
                    return super().__getitem__(i)
            
            
            class uniqueness_scope(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UniquenessScope']:
                        return UniquenessScope
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UniquenessScope'], typing.List['UniquenessScope']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uniqueness_scope':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UniquenessScope':
                    return super().__getitem__(i)
            id = schemas.IntSchema
            __annotations__ = {
                "namespace": namespace,
                "name": name,
                "description": description,
                "allowed_node_types": allowed_node_types,
                "uniqueness_scope": uniqueness_scope,
                "id": id,
            }
    
    allowed_node_types: MetaOapg.properties.allowed_node_types
    name: MetaOapg.properties.name
    namespace: MetaOapg.properties.namespace
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_node_types"]) -> MetaOapg.properties.allowed_node_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueness_scope"]) -> MetaOapg.properties.uniqueness_scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["namespace", "name", "description", "allowed_node_types", "uniqueness_scope", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_node_types"]) -> MetaOapg.properties.allowed_node_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueness_scope"]) -> typing.Union[MetaOapg.properties.uniqueness_scope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["namespace", "name", "description", "allowed_node_types", "uniqueness_scope", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        allowed_node_types: typing.Union[MetaOapg.properties.allowed_node_types, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        namespace: typing.Union[MetaOapg.properties.namespace, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        uniqueness_scope: typing.Union[MetaOapg.properties.uniqueness_scope, list, tuple, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttributeType':
        return super().__new__(
            cls,
            *_args,
            allowed_node_types=allowed_node_types,
            name=name,
            namespace=namespace,
            description=description,
            uniqueness_scope=uniqueness_scope,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from djopenapi.model.node_type import NodeType
from djopenapi.model.uniqueness_scope import UniquenessScope
