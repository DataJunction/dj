"""Initial migration

Revision ID: 84fe8c1a644d
Revises:
Create Date: 2023-02-06 19:55:45.072298+00:00

"""
# pylint: disable=no-member, invalid-name, missing-function-docstring, unused-import, no-name-in-module

import sqlalchemy as sa
import sqlalchemy_utils
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision = "84fe8c1a644d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "availabilitystate",
        sa.Column("max_partition", sa.JSON(), nullable=True),
        sa.Column("min_partition", sa.JSON(), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("catalog", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("schema_", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("table", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("valid_through_ts", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_availabilitystate")),
    )
    op.create_table(
        "database",
        sa.Column("uuid", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("extra_params", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("URI", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("read_only", sa.Boolean(), nullable=False),
        sa.Column("async", sa.Boolean(), nullable=False),
        sa.Column("cost", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_database")),
        sa.UniqueConstraint("name", name=op.f("uq_database_name")),
    )
    op.create_table(
        "missingparent",
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_missingparent")),
    )
    op.create_table(
        "node",
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("SOURCE", "TRANSFORM", "METRIC", "DIMENSION", name="nodetype"),
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "current_version",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_node")),
        sa.UniqueConstraint("name", name=op.f("uq_node_name")),
    )
    op.create_table(
        "column",
        sa.Column(
            "type",
            sa.Enum(
                "BYTES",
                "STR",
                "FLOAT",
                "INT",
                "DECIMAL",
                "BOOL",
                "DATETIME",
                "DATE",
                "TIME",
                "TIMEDELTA",
                "LIST",
                "DICT",
                name="columntype",
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("dimension_id", sa.Integer(), nullable=True),
        sa.Column(
            "dimension_column",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["dimension_id"],
            ["node.id"],
            name=op.f("fk_column_dimension_id_node"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_column")),
    )
    op.create_table(
        "noderevision",
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("SOURCE", "TRANSFORM", "METRIC", "DIMENSION", name="nodetype"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("query", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("mode", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("version", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("reference_node_id", sa.Integer(), nullable=True),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["reference_node_id"],
            ["node.id"],
            name=op.f("fk_noderevision_reference_node_id_node"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_noderevision")),
    )
    op.create_table(
        "query",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("database_id", sa.Integer(), nullable=False),
        sa.Column("catalog", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("schema_", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "submitted_query",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("executed_query", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("scheduled", sa.DateTime(), nullable=True),
        sa.Column("started", sa.DateTime(), nullable=True),
        sa.Column("finished", sa.DateTime(), nullable=True),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("progress", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["database_id"],
            ["database.id"],
            name=op.f("fk_query_database_id_database"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_query")),
    )
    op.create_table(
        "table",
        sa.Column("catalog", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("schema_", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("table", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("cost", sa.Float(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("database_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["database_id"],
            ["database.id"],
            name=op.f("fk_table_database_id_database"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_table")),
    )
    op.create_table(
        "nodeavailabilitystate",
        sa.Column("availability_id", sa.Integer(), nullable=False),
        sa.Column("node_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["availability_id"],
            ["availabilitystate.id"],
            name=op.f("fk_nodeavailabilitystate_availability_id_availabilitystate"),
        ),
        sa.ForeignKeyConstraint(
            ["node_id"],
            ["noderevision.id"],
            name=op.f("fk_nodeavailabilitystate_node_id_noderevision"),
        ),
        sa.PrimaryKeyConstraint(
            "availability_id",
            "node_id",
            name=op.f("pk_nodeavailabilitystate"),
        ),
    )
    op.create_table(
        "nodecolumns",
        sa.Column("node_id", sa.Integer(), nullable=False),
        sa.Column("column_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["column_id"],
            ["column.id"],
            name=op.f("fk_nodecolumns_column_id_column"),
        ),
        sa.ForeignKeyConstraint(
            ["node_id"],
            ["noderevision.id"],
            name=op.f("fk_nodecolumns_node_id_noderevision"),
        ),
        sa.PrimaryKeyConstraint("node_id", "column_id", name=op.f("pk_nodecolumns")),
    )
    op.create_table(
        "nodemissingparents",
        sa.Column("missing_parent_id", sa.Integer(), nullable=False),
        sa.Column("referencing_node_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["missing_parent_id"],
            ["missingparent.id"],
            name=op.f("fk_nodemissingparents_missing_parent_id_missingparent"),
        ),
        sa.ForeignKeyConstraint(
            ["referencing_node_id"],
            ["noderevision.id"],
            name=op.f("fk_nodemissingparents_referencing_node_id_noderevision"),
        ),
        sa.PrimaryKeyConstraint(
            "missing_parent_id",
            "referencing_node_id",
            name=op.f("pk_nodemissingparents"),
        ),
    )
    op.create_table(
        "noderelationship",
        sa.Column("parent_id", sa.Integer(), nullable=False),
        sa.Column("parent_version", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("child_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["child_id"],
            ["noderevision.id"],
            name=op.f("fk_noderelationship_child_id_noderevision"),
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["node.id"],
            name=op.f("fk_noderelationship_parent_id_node"),
        ),
        sa.PrimaryKeyConstraint(
            "parent_id",
            "child_id",
            name=op.f("pk_noderelationship"),
        ),
    )
    op.create_table(
        "tablecolumns",
        sa.Column("table_id", sa.Integer(), nullable=False),
        sa.Column("column_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["column_id"],
            ["column.id"],
            name=op.f("fk_tablecolumns_column_id_column"),
        ),
        sa.ForeignKeyConstraint(
            ["table_id"],
            ["table.id"],
            name=op.f("fk_tablecolumns_table_id_table"),
        ),
        sa.PrimaryKeyConstraint("table_id", "column_id", name=op.f("pk_tablecolumns")),
    )
    op.create_table(
        "tablenoderevision",
        sa.Column("table_id", sa.Integer(), nullable=False),
        sa.Column("node_revision_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["node_revision_id"],
            ["noderevision.id"],
            name=op.f("fk_tablenoderevision_node_revision_id_noderevision"),
        ),
        sa.ForeignKeyConstraint(
            ["table_id"],
            ["table.id"],
            name=op.f("fk_tablenoderevision_table_id_table"),
        ),
        sa.PrimaryKeyConstraint(
            "table_id",
            "node_revision_id",
            name=op.f("pk_tablenoderevision"),
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tablenoderevision")
    op.drop_table("tablecolumns")
    op.drop_table("noderelationship")
    op.drop_table("nodemissingparents")
    op.drop_table("nodecolumns")
    op.drop_table("nodeavailabilitystate")
    op.drop_table("table")
    op.drop_table("query")
    op.drop_table("noderevision")
    op.drop_table("column")
    op.drop_table("node")
    op.drop_table("missingparent")
    op.drop_table("database")
    op.drop_table("availabilitystate")
    # ### end Alembic commands ###
