# coding: utf-8

"""
    DJ server

    A DataJunction metrics repository  # noqa: E501

    The version of the OpenAPI document: 0.0.post1.dev1+g8793b6c
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from djclient import schemas  # noqa: F401


class TableOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Output for table information.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
        
            @staticmethod
            def catalog() -> typing.Type['Catalog']:
                return Catalog
            schema_ = schemas.StrSchema
            table = schemas.StrSchema
        
            @staticmethod
            def database() -> typing.Type['Database']:
                return Database
            __annotations__ = {
                "id": id,
                "catalog": catalog,
                "schema_": schema_,
                "table": table,
                "database": database,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalog"]) -> 'Catalog': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schema_"]) -> MetaOapg.properties.schema_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["table"]) -> MetaOapg.properties.table: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["database"]) -> 'Database': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "catalog", "schema_", "table", "database", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalog"]) -> typing.Union['Catalog', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schema_"]) -> typing.Union[MetaOapg.properties.schema_, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["table"]) -> typing.Union[MetaOapg.properties.table, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["database"]) -> typing.Union['Database', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "catalog", "schema_", "table", "database", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        catalog: typing.Union['Catalog', schemas.Unset] = schemas.unset,
        schema_: typing.Union[MetaOapg.properties.schema_, str, schemas.Unset] = schemas.unset,
        table: typing.Union[MetaOapg.properties.table, str, schemas.Unset] = schemas.unset,
        database: typing.Union['Database', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TableOutput':
        return super().__new__(
            cls,
            *_args,
            id=id,
            catalog=catalog,
            schema_=schema_,
            table=table,
            database=database,
            _configuration=_configuration,
            **kwargs,
        )

from djclient.model.catalog import Catalog
from djclient.model.database import Database
