# coding: utf-8

"""
    DJ server

    A DataJunction metrics repository  # noqa: E501

    The version of the OpenAPI document: 0.0.post1.dev1+g8793b6c
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from djclient import schemas  # noqa: F401


class DJSQL(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Class for DJ SQL request.
    """


    class MetaOapg:
        required = {
            "sql",
        }
        
        class properties:
            sql = schemas.StrSchema
            database_name = schemas.StrSchema
            __annotations__ = {
                "sql": sql,
                "database_name": database_name,
            }
    
    sql: MetaOapg.properties.sql
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sql"]) -> MetaOapg.properties.sql: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["database_name"]) -> MetaOapg.properties.database_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sql", "database_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sql"]) -> MetaOapg.properties.sql: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["database_name"]) -> typing.Union[MetaOapg.properties.database_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sql", "database_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sql: typing.Union[MetaOapg.properties.sql, str, ],
        database_name: typing.Union[MetaOapg.properties.database_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DJSQL':
        return super().__new__(
            cls,
            *_args,
            sql=sql,
            database_name=database_name,
            _configuration=_configuration,
            **kwargs,
        )
