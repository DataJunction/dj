{
    "openapi": "3.1.0",
    "info": {
        "title": "DJ server",
        "description": "A DataJunction metrics layer",
        "license": {
            "name": "MIT License",
            "url": "https://mit-license.org/"
        },
        "version": "0.0.1a44"
    },
    "paths": {
        "/catalogs": {
            "get": {
                "tags": [
                    "catalogs"
                ],
                "summary": "List Catalogs",
                "description": "List all available catalogs",
                "operationId": "list_catalogs_catalogs_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CatalogInfo"
                                    },
                                    "type": "array",
                                    "title": "Response List Catalogs Catalogs Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "catalogs"
                ],
                "summary": "Add A Catalog",
                "description": "Add a Catalog",
                "operationId": "Add_A_Catalog_catalogs_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CatalogInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/catalogs/{name}": {
            "get": {
                "tags": [
                    "catalogs"
                ],
                "summary": "Get A Catalog",
                "description": "Return a catalog by name",
                "operationId": "Get_a_Catalog_catalogs__name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/catalogs/{name}/engines": {
            "post": {
                "tags": [
                    "catalogs"
                ],
                "summary": "Add Engines To A Catalog",
                "description": "Attach one or more engines to a catalog",
                "operationId": "Add_Engines_to_a_Catalog_catalogs__name__engines_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/EngineInfo"
                                },
                                "type": "array",
                                "title": "Data"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/engines": {
            "get": {
                "tags": [
                    "engines"
                ],
                "summary": "List Engines",
                "description": "List all available engines",
                "operationId": "list_engines_engines_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EngineInfo"
                                    },
                                    "type": "array",
                                    "title": "Response List Engines Engines Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "engines"
                ],
                "summary": "Add An Engine",
                "description": "Add a new engine",
                "operationId": "Add_An_Engine_engines_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EngineInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/engines/{name}/{version}": {
            "get": {
                "tags": [
                    "engines"
                ],
                "summary": "Get An Engine",
                "description": "Return an engine by name and version",
                "operationId": "get_an_engine_engines__name___version__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Version"
                        },
                        "name": "version",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EngineInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/metrics": {
            "get": {
                "tags": [
                    "metrics"
                ],
                "summary": "List Metrics",
                "description": "List all available metrics.",
                "operationId": "list_metrics_metrics_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Prefix"
                        },
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response List Metrics Metrics Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/metrics/metadata": {
            "get": {
                "tags": [
                    "metrics"
                ],
                "summary": "List Metric Metadata",
                "description": "Return available metric metadata attributes",
                "operationId": "list_metric_metadata_metrics_metadata_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetricMetadataOptions"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/metrics/{name}": {
            "get": {
                "tags": [
                    "metrics"
                ],
                "summary": "Get A Metric",
                "description": "Return a metric by name.",
                "operationId": "get_a_metric_metrics__name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/metrics/common/dimensions": {
            "get": {
                "tags": [
                    "metrics"
                ],
                "summary": "Get Common Dimensions",
                "description": "Return common dimensions for a set of metrics.",
                "operationId": "get_common_dimensions_metrics_common_dimensions_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "List of metrics to find common dimensions for",
                            "default": []
                        },
                        "name": "metric",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DimensionAttributeOutput"
                                    },
                                    "type": "array",
                                    "title": "Response Get Common Dimensions Metrics Common Dimensions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/djsql/data": {
            "get": {
                "tags": [
                    "DJSQL"
                ],
                "summary": "Get Data For Djsql",
                "description": "Return data for a DJ SQL query",
                "operationId": "get_data_for_djsql_djsql_data_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Query"
                        },
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Async ",
                            "default": false
                        },
                        "name": "async_",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryWithResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/djsql/stream": {
            "get": {
                "tags": [
                    "DJSQL"
                ],
                "summary": "Get Data Stream For Djsql",
                "description": "Return data for a DJ SQL query using server side events",
                "operationId": "get_data_stream_for_djsql_djsql_stream_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Query"
                        },
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryWithResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/validate": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Validate Node",
                "description": "Determines whether the provided node is valid and returns metadata from node validation.",
                "operationId": "validate_node_nodes_validate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeRevisionBase"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeValidation"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/validate": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Revalidate",
                "description": "Revalidate a single existing node and update its status appropriately",
                "operationId": "revalidate_nodes__name__validate_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeValidation"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/columns/{column_name}/attributes": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Set Column Attributes",
                "description": "Set column attributes for the node.",
                "operationId": "set_column_attributes_nodes__node_name__columns__column_name__attributes_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Column Name"
                        },
                        "name": "column_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/AttributeTypeIdentifier"
                                },
                                "type": "array",
                                "title": "Attributes"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                                    },
                                    "type": "array",
                                    "title": "Response Set Column Attributes Nodes  Node Name  Columns  Column Name  Attributes Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List Nodes",
                "description": "List the available nodes.",
                "operationId": "list_nodes_nodes_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "name": "node_type",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Prefix"
                        },
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response List Nodes Nodes Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/details": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List All Nodes With Details",
                "description": "List the available nodes.",
                "operationId": "list_all_nodes_with_details_nodes_details_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NodeIndexItem"
                                    },
                                    "type": "array",
                                    "title": "Response List All Nodes With Details Nodes Details Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "Get Node",
                "description": "Show the active version of the specified node.",
                "operationId": "get_node_nodes__name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "nodes"
                ],
                "summary": "Delete Node",
                "description": "Delete (aka deactivate) the specified node.",
                "operationId": "delete_node_nodes__name__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "nodes"
                ],
                "summary": "Update Node",
                "description": "Update a node.",
                "operationId": "update_node_nodes__name__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/hard": {
            "delete": {
                "tags": [
                    "nodes"
                ],
                "summary": "Hard Delete A Dj Node",
                "description": "Hard delete a node, destroying all links and invalidating all downstream nodes.\nThis should be used with caution, deactivating a node is preferred.",
                "operationId": "Hard_Delete_a_DJ_Node_nodes__name__hard_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/restore": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Restore Node",
                "description": "Restore (aka re-activate) the specified node.",
                "operationId": "restore_node_nodes__name__restore_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/revisions": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List Node Revisions",
                "description": "List all revisions for the node.",
                "operationId": "list_node_revisions_nodes__name__revisions_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NodeRevisionOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List Node Revisions Nodes  Name  Revisions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/source": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Create A Source Node",
                "description": "Create a source node. If columns are not provided, the source node's schema\nwill be inferred using the configured query service.",
                "operationId": "Create_A_Source_Node_nodes_source_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSourceNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/metric": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Create A Metric Node",
                "description": "Create a node.",
                "operationId": "Create_A_Metric_Node_nodes_metric_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/dimension": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Create A Dimension Node",
                "description": "Create a node.",
                "operationId": "Create_A_Dimension_Node_nodes_dimension_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/transform": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Create A Transform Node",
                "description": "Create a node.",
                "operationId": "Create_A_Transform_Node_nodes_transform_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/cube": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Create A Cube",
                "description": "Create a cube node.",
                "operationId": "Create_A_Cube_nodes_cube_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCubeNode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/register/table/{catalog}/{schema_}/{table}": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Register Table",
                "description": "Register a table. This creates a source node in the SOURCE_NODE_NAMESPACE and\nthe source node's schema will be inferred using the configured query service.",
                "operationId": "register_table_register_table__catalog___schema____table__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Catalog"
                        },
                        "name": "catalog",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Schema "
                        },
                        "name": "schema_",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Table"
                        },
                        "name": "table",
                        "in": "path"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/columns/{column}": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Link Dimension",
                "description": "Add information to a node column",
                "operationId": "link_dimension_nodes__name__columns__column__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Column"
                        },
                        "name": "column",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Dimension"
                        },
                        "name": "dimension",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Dimension Column"
                        },
                        "name": "dimension_column",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "nodes"
                ],
                "summary": "Delete Dimension Link",
                "description": "Remove the link between a node column and a dimension node",
                "operationId": "delete_dimension_link_nodes__name__columns__column__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Column"
                        },
                        "name": "column",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Dimension"
                        },
                        "name": "dimension",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Dimension Column"
                        },
                        "name": "dimension_column",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/link": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Add Complex Dimension Link",
                "description": "Links a source, dimension, or transform node to a dimension with a custom join query.\nIf a link already exists, updates the link definition.",
                "operationId": "add_complex_dimension_link_nodes__node_name__link_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LinkDimensionInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "nodes"
                ],
                "summary": "Remove Complex Dimension Link",
                "description": "Removes a complex dimension link based on the dimension node and its role (if any).",
                "operationId": "remove_complex_dimension_link_nodes__node_name__link_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LinkDimensionIdentifier"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/migrate_dim_link": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Migrate Dimension Link",
                "description": "Migrate dimension link from column-level to node-level",
                "operationId": "migrate_dimension_link_nodes__name__migrate_dim_link_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/tags": {
            "post": {
                "tags": [
                    "nodes",
                    "tags"
                ],
                "summary": "Update Tags On Node",
                "description": "Add a tag to a node",
                "operationId": "Update_Tags_on_Node_nodes__name__tags_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Tag Names"
                        },
                        "name": "tag_names",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/refresh": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Refresh Source Node",
                "description": "Refresh a source node with the latest columns from the query service.",
                "operationId": "refresh_source_node_nodes__name__refresh_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/similarity/{node1_name}/{node2_name}": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "Calculate Node Similarity",
                "description": "Compare two nodes by how similar their queries are",
                "operationId": "calculate_node_similarity_nodes_similarity__node1_name___node2_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node1 Name"
                        },
                        "name": "node1_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node2 Name"
                        },
                        "name": "node2_name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/downstream": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List Downstream Nodes For A Node",
                "description": "List all nodes that are downstream from the given node, filterable by type.",
                "operationId": "List_Downstream_Nodes_For_A_Node_nodes__name__downstream_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DAGNodeOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List Downstream Nodes For A Node Nodes  Name  Downstream Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/upstream": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List Upstream Nodes For A Node",
                "description": "List all nodes that are upstream from the given node, filterable by type.",
                "operationId": "List_Upstream_Nodes_For_A_Node_nodes__name__upstream_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DAGNodeOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List Upstream Nodes For A Node Nodes  Name  Upstream Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/dag": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List All Connected Nodes (Upstreams + Downstreams)",
                "description": "List all nodes that are part of the DAG of the given node. This means getting all upstreams,\ndownstreams, and linked dimension nodes.",
                "operationId": "List_All_Connected_Nodes__Upstreams___Downstreams__nodes__name__dag_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DAGNodeOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List All Connected Nodes  Upstreams   Downstreams  Nodes  Name  Dag Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/dimensions": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List All Dimension Attributes",
                "description": "List all available dimension attributes for the given node.",
                "operationId": "List_All_Dimension_Attributes_nodes__name__dimensions_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DimensionAttributeOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List All Dimension Attributes Nodes  Name  Dimensions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{name}/lineage": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "summary": "List Column Level Lineage Of Node",
                "description": "List column-level lineage of a node in a graph",
                "operationId": "List_column_level_lineage_of_node_nodes__name__lineage_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LineageColumn"
                                    },
                                    "type": "array",
                                    "title": "Response List Column Level Lineage Of Node Nodes  Name  Lineage Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/columns/{column_name}": {
            "patch": {
                "tags": [
                    "nodes"
                ],
                "summary": "Set Column Display Name",
                "description": "Set column name for the node",
                "operationId": "set_column_display_name_nodes__node_name__columns__column_name__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Column Name"
                        },
                        "name": "column_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Display Name"
                        },
                        "name": "display_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/columns/{column_name}/partition": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Set Node Column As Partition",
                "description": "Add or update partition columns for the specified node.",
                "operationId": "Set_Node_Column_as_Partition_nodes__node_name__columns__column_name__partition_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Column Name"
                        },
                        "name": "column_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartitionInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/copy": {
            "post": {
                "tags": [
                    "nodes"
                ],
                "summary": "Copy A Node",
                "description": "Copy this node to a new name.",
                "operationId": "Copy_A_Node_nodes__node_name__copy_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "New Name"
                        },
                        "name": "new_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DAGNodeOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/namespaces/{namespace}": {
            "get": {
                "tags": [
                    "namespaces"
                ],
                "summary": "List Nodes In Namespace",
                "description": "List node names in namespace, filterable to a given type if desired.",
                "operationId": "list_nodes_in_namespace_namespaces__namespace__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Namespace"
                        },
                        "name": "namespace",
                        "in": "path"
                    },
                    {
                        "description": "Filter the list of nodes to this type",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/NodeType"
                                }
                            ],
                            "description": "Filter the list of nodes to this type"
                        },
                        "name": "type_",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NodeMinimumDetail"
                                    },
                                    "type": "array",
                                    "title": "Response List Nodes In Namespace Namespaces  Namespace  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "namespaces"
                ],
                "summary": "Create Node Namespace",
                "description": "Create a node namespace",
                "operationId": "create_node_namespace_namespaces__namespace__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Namespace"
                        },
                        "name": "namespace",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Include Parents",
                            "default": false
                        },
                        "name": "include_parents",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "namespaces"
                ],
                "summary": "Deactivate A Namespace",
                "description": "Deactivates a node namespace",
                "operationId": "deactivate_a_namespace_namespaces__namespace__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Namespace"
                        },
                        "name": "namespace",
                        "in": "path"
                    },
                    {
                        "description": "Cascade the deletion down to the nodes in the namespace",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Cascade",
                            "description": "Cascade the deletion down to the nodes in the namespace",
                            "default": false
                        },
                        "name": "cascade",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/namespaces": {
            "get": {
                "tags": [
                    "namespaces"
                ],
                "summary": "List Namespaces",
                "description": "List namespaces with the number of nodes contained in them",
                "operationId": "list_namespaces_namespaces_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NamespaceOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List Namespaces Namespaces Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/namespaces/{namespace}/restore": {
            "post": {
                "tags": [
                    "namespaces"
                ],
                "summary": "Restore A Namespace",
                "description": "Restores a node namespace",
                "operationId": "restore_a_namespace_namespaces__namespace__restore_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Namespace"
                        },
                        "name": "namespace",
                        "in": "path"
                    },
                    {
                        "description": "Cascade the restore down to the nodes in the namespace",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Cascade",
                            "description": "Cascade the restore down to the nodes in the namespace",
                            "default": false
                        },
                        "name": "cascade",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/namespaces/{namespace}/hard": {
            "delete": {
                "tags": [
                    "namespaces"
                ],
                "summary": "Hard Delete A Dj Namespace",
                "description": "Hard delete a namespace, which will completely remove the namespace. Additionally,\nif any nodes are saved under this namespace, we'll hard delete the nodes if cascade\nis set to true. If cascade is set to false, we'll raise an error. This should be used\nwith caution, as the impact may be large.",
                "operationId": "Hard_Delete_a_DJ_Namespace_namespaces__namespace__hard_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Namespace"
                        },
                        "name": "namespace",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Cascade",
                            "default": false
                        },
                        "name": "cascade",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/namespaces/{namespace}/export": {
            "get": {
                "tags": [
                    "namespaces"
                ],
                "summary": "Export A Namespace As A Single Project'S Metadata",
                "description": "Generates a zip of YAML files for the contents of the given namespace\nas well as a project definition file.",
                "operationId": "Export_a_namespace_as_a_single_project_s_metadata_namespaces__namespace__export_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Namespace"
                        },
                        "name": "namespace",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "title": "Response Export A Namespace As A Single Project S Metadata Namespaces  Namespace  Export Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/materialization/info": {
            "get": {
                "tags": [
                    "materializations"
                ],
                "summary": "Materialization Jobs Info",
                "description": "Materialization job types and strategies",
                "operationId": "Materialization_Jobs_Info_materialization_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/materialization": {
            "post": {
                "tags": [
                    "materializations"
                ],
                "summary": "Insert Or Update A Materialization For A Node",
                "description": "Add or update a materialization of the specified node. If a node_name is specified\nfor the materialization config, it will always update that named config.",
                "operationId": "Insert_or_Update_a_Materialization_for_a_Node_nodes__node_name__materialization_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertMaterialization"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/materializations": {
            "get": {
                "tags": [
                    "materializations"
                ],
                "summary": "List Materializations For A Node",
                "description": "Show all materializations configured for the node, with any associated metadata\nlike urls from the materialization service, if available.",
                "operationId": "List_Materializations_for_a_Node_nodes__node_name__materializations_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Show Deleted",
                            "default": false
                        },
                        "name": "show_deleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MaterializationConfigInfoUnified"
                                    },
                                    "type": "array",
                                    "title": "Response List Materializations For A Node Nodes  Node Name  Materializations Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "materializations"
                ],
                "summary": "Deactivate A Materialization For A Node",
                "description": "Deactivate the node materialization with the provided name.\nAlso calls the query service to deactivate the associated scheduled jobs.",
                "operationId": "Deactivate_a_Materialization_for_a_Node_nodes__node_name__materializations_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Materialization Name"
                        },
                        "name": "materialization_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MaterializationConfigInfoUnified"
                                    },
                                    "type": "array",
                                    "title": "Response Deactivate A Materialization For A Node Nodes  Node Name  Materializations Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/nodes/{node_name}/materializations/{materialization_name}/backfill": {
            "post": {
                "tags": [
                    "materializations"
                ],
                "summary": "Kick Off A Backfill Run For A Configured Materialization",
                "description": "Start a backfill for a configured materialization.",
                "operationId": "Kick_off_a_backfill_run_for_a_configured_materialization_nodes__node_name__materializations__materialization_name__backfill_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Materialization Name"
                        },
                        "name": "materialization_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartitionBackfill"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaterializationInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/measures": {
            "get": {
                "tags": [
                    "measures"
                ],
                "summary": "List Measures",
                "description": "List all measures.",
                "operationId": "list_measures_measures_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Prefix"
                        },
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response List Measures Measures Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "measures"
                ],
                "summary": "Add A Measure",
                "description": "Add a measure",
                "operationId": "Add_a_Measure_measures_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMeasure"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeasureOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/measures/{measure_name}": {
            "get": {
                "tags": [
                    "measures"
                ],
                "summary": "Get Measure",
                "description": "Get info on a measure.",
                "operationId": "get_measure_measures__measure_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Measure Name"
                        },
                        "name": "measure_name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeasureOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "measures"
                ],
                "summary": "Edit A Measure",
                "description": "Edit a measure",
                "operationId": "Edit_a_Measure_measures__measure_name__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Measure Name"
                        },
                        "name": "measure_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditMeasure"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeasureOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/data/{node_name}/availability": {
            "post": {
                "tags": [
                    "data"
                ],
                "summary": "Add Availability State To Node",
                "description": "Add an availability state to a node.",
                "operationId": "Add_Availability_State_to_Node_data__node_name__availability_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AvailabilityStateBase"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/data/{node_name}": {
            "get": {
                "tags": [
                    "data"
                ],
                "summary": "Get Data For A Node",
                "description": "Gets data for a node",
                "operationId": "Get_Data_for_a_Node_data__node_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "description": "Dimensional attributes to group by",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "description": "Dimensional attributes to group by",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "description": "Filters on dimensional attributes",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Filters",
                            "description": "Filters on dimensional attributes",
                            "default": []
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "description": "Expression to order by",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Orderby",
                            "description": "Expression to order by",
                            "default": []
                        },
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "description": "Number of rows to limit the data retrieved to",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "Number of rows to limit the data retrieved to"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "description": "Whether to run the query async or wait for results from the query engine",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Async ",
                            "description": "Whether to run the query async or wait for results from the query engine",
                            "default": false
                        },
                        "name": "async_",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryWithResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/data/query/{query_id}": {
            "get": {
                "tags": [
                    "data"
                ],
                "summary": "Get Data For Query Id",
                "description": "Return data for a specific query ID.",
                "operationId": "Get_Data_For_Query_ID_data_query__query_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Query Id"
                        },
                        "name": "query_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryWithResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/data": {
            "get": {
                "tags": [
                    "data"
                ],
                "summary": "Get Data For Metrics",
                "description": "Return data for a set of metrics with dimensions and filters",
                "operationId": "Get_Data_For_Metrics_data_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Metrics",
                            "default": []
                        },
                        "name": "metrics",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Filters",
                            "default": []
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Orderby",
                            "default": []
                        },
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Async ",
                            "default": false
                        },
                        "name": "async_",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryWithResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/stream": {
            "get": {
                "tags": [
                    "data"
                ],
                "summary": "Get Data Stream For Metrics",
                "description": "Return data for a set of metrics with dimensions and filters using server side events",
                "operationId": "get_data_stream_for_metrics_stream_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Metrics",
                            "default": []
                        },
                        "name": "metrics",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Filters",
                            "default": []
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Orderby",
                            "default": []
                        },
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryWithResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/health/": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "description": "Healthcheck for services.",
                "operationId": "health_check_health__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/HealthCheck"
                                    },
                                    "type": "array",
                                    "title": "Response Health Check Health  Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/history/{entity_type}/{entity_name}": {
            "get": {
                "tags": [
                    "history"
                ],
                "summary": "List History",
                "description": "List history for an entity type (i.e. Node) and entity name",
                "operationId": "list_history_history__entity_type___entity_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityType"
                        },
                        "name": "entity_type",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Entity Name"
                        },
                        "name": "entity_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Offset",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "default": 100,
                            "lte": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/HistoryOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List History History  Entity Type   Entity Name  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/history": {
            "get": {
                "tags": [
                    "history"
                ],
                "summary": "List History By Node Context",
                "description": "List all activity history for a node context",
                "operationId": "list_history_by_node_context_history_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node"
                        },
                        "name": "node",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Offset",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "default": 100,
                            "lte": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/HistoryOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List History By Node Context History Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/cubes/{name}": {
            "get": {
                "tags": [
                    "cubes"
                ],
                "summary": "Get A Cube",
                "description": "Get information on a cube",
                "operationId": "Get_a_Cube_cubes__name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CubeRevisionMetadata"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/cubes/{name}/dimensions/sql": {
            "get": {
                "tags": [
                    "cubes"
                ],
                "summary": "Dimensions Sql For Cube",
                "description": "Generates SQL to retrieve all unique values of a dimension for the cube",
                "operationId": "Dimensions_SQL_for_Cube_cubes__name__dimensions_sql_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "description": "Dimensions to get values for",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "description": "Dimensions to get values for",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "description": "Filters on dimensional attributes",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Filters",
                            "description": "Filters on dimensional attributes"
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "description": "Number of rows to limit the data retrieved to",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "Number of rows to limit the data retrieved to"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Include Counts",
                            "default": false
                        },
                        "name": "include_counts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TranslatedSQL"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/cubes/{name}/dimensions/data": {
            "get": {
                "tags": [
                    "cubes"
                ],
                "summary": "Dimensions Values For Cube",
                "description": "All unique values of a dimension from the cube",
                "operationId": "Dimensions_Values_for_Cube_cubes__name__dimensions_data_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "description": "Dimensions to get values for",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "description": "Dimensions to get values for",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "description": "Filters on dimensional attributes",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Filters",
                            "description": "Filters on dimensional attributes"
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "description": "Number of rows to limit the data retrieved to",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "Number of rows to limit the data retrieved to"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Include Counts",
                            "default": false
                        },
                        "name": "include_counts",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Async ",
                            "default": false
                        },
                        "name": "async_",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DimensionValues"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/tags": {
            "get": {
                "tags": [
                    "tags"
                ],
                "summary": "List Tags",
                "description": "List all available tags.",
                "operationId": "list_tags_tags_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Tag Type"
                        },
                        "name": "tag_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TagOutput"
                                    },
                                    "type": "array",
                                    "title": "Response List Tags Tags Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "tags"
                ],
                "summary": "Create A Tag",
                "description": "Create a tag.",
                "operationId": "create_a_tag_tags_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTag"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/tags/{name}": {
            "get": {
                "tags": [
                    "tags"
                ],
                "summary": "Get A Tag",
                "description": "Return a tag by name.",
                "operationId": "get_a_tag_tags__name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "tags"
                ],
                "summary": "Update A Tag",
                "description": "Update a tag.",
                "operationId": "update_a_tag_tags__name__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTag"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TagOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/tags/{name}/nodes": {
            "get": {
                "tags": [
                    "tags"
                ],
                "summary": "List Nodes For A Tag",
                "description": "Find nodes tagged with the tag, filterable by node type.",
                "operationId": "list_nodes_for_a_tag_tags__name__nodes_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NodeMinimumDetail"
                                    },
                                    "type": "array",
                                    "title": "Response List Nodes For A Tag Tags  Name  Nodes Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/attributes": {
            "get": {
                "tags": [
                    "attributes"
                ],
                "summary": "List Attributes",
                "description": "List all available attribute types.",
                "operationId": "list_attributes_attributes_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttributeTypeBase"
                                    },
                                    "type": "array",
                                    "title": "Response List Attributes Attributes Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "attributes"
                ],
                "summary": "Add An Attribute Type",
                "description": "Add a new attribute type",
                "operationId": "Add_an_Attribute_Type_attributes_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MutableAttributeTypeFields"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttributeTypeBase"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/sql/measures": {
            "get": {
                "tags": [
                    "sql"
                ],
                "summary": "Get Measures Sql",
                "description": "Return the measures SQL for a set of metrics with dimensions and filters.\nThis SQL can be used to produce an intermediate table with all the measures\nand dimensions needed for an analytics database (e.g., Druid).",
                "operationId": "Get_Measures_SQL_sql_measures_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Metrics",
                            "default": []
                        },
                        "name": "metrics",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Filters",
                            "default": []
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TranslatedSQL"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/sql/{node_name}": {
            "get": {
                "tags": [
                    "sql"
                ],
                "summary": "Get Sql For A Node",
                "description": "Return SQL for a node.",
                "operationId": "Get_SQL_For_A_Node_sql__node_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Filters",
                            "default": []
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Orderby",
                            "default": []
                        },
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TranslatedSQL"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/sql": {
            "get": {
                "tags": [
                    "sql"
                ],
                "summary": "Get Sql For Metrics",
                "description": "Return SQL for a set of metrics with dimensions and filters",
                "operationId": "Get_SQL_For_Metrics_sql_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Metrics",
                            "default": []
                        },
                        "name": "metrics",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimensions",
                            "default": []
                        },
                        "name": "dimensions",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Filters",
                            "default": []
                        },
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Orderby",
                            "default": []
                        },
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "title": "Limit"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Name"
                        },
                        "name": "engine_name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Engine Version"
                        },
                        "name": "engine_version",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TranslatedSQL"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/datajunction-clients/python/new_node/{node_name}": {
            "get": {
                "tags": [
                    "client"
                ],
                "summary": "Client Code For Creating Node",
                "description": "Generate the Python client code used for creating this node",
                "operationId": "client_code_for_creating_node_datajunction_clients_python_new_node__node_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Client Code For Creating Node Datajunction Clients Python New Node  Node Name  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/datajunction-clients/python/add_materialization/{node_name}/{materialization_name}": {
            "get": {
                "tags": [
                    "client"
                ],
                "summary": "Client Code For Adding Materialization",
                "description": "Generate the Python client code used for adding this materialization",
                "operationId": "client_code_for_adding_materialization_datajunction_clients_python_add_materialization__node_name___materialization_name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Materialization Name"
                        },
                        "name": "materialization_name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Client Code For Adding Materialization Datajunction Clients Python Add Materialization  Node Name   Materialization Name  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/datajunction-clients/python/link_dimension/{node_name}/{column}/{dimension}": {
            "get": {
                "tags": [
                    "client"
                ],
                "summary": "Client Code For Linking Dimension To Node",
                "description": "Generate the Python client code used for linking this node's column to a dimension",
                "operationId": "client_code_for_linking_dimension_to_node_datajunction_clients_python_link_dimension__node_name___column___dimension__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Node Name"
                        },
                        "name": "node_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Column"
                        },
                        "name": "column",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Dimension"
                        },
                        "name": "dimension",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Client Code For Linking Dimension To Node Datajunction Clients Python Link Dimension  Node Name   Column   Dimension  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/dimensions": {
            "get": {
                "tags": [
                    "dimensions"
                ],
                "summary": "List Dimensions",
                "description": "List all available dimensions.",
                "operationId": "list_dimensions_dimensions_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Prefix"
                        },
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response List Dimensions Dimensions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/dimensions/{name}/nodes": {
            "get": {
                "tags": [
                    "dimensions"
                ],
                "summary": "Find Nodes With Dimension",
                "description": "List all nodes that have the specified dimension",
                "operationId": "find_nodes_with_dimension_dimensions__name__nodes_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "$ref": "#/components/schemas/NodeType"
                            },
                            "type": "array"
                        },
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NodeRevisionOutput"
                                    },
                                    "type": "array",
                                    "title": "Response Find Nodes With Dimension Dimensions  Name  Nodes Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/dimensions/common": {
            "get": {
                "tags": [
                    "dimensions"
                ],
                "summary": "Find Nodes With Common Dimensions",
                "description": "Find all nodes that have the list of common dimensions",
                "operationId": "find_nodes_with_common_dimensions_dimensions_common_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "title": "Dimension"
                        },
                        "name": "dimension",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "items": {
                                "$ref": "#/components/schemas/NodeType"
                            },
                            "type": "array"
                        },
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NodeRevisionOutput"
                                    },
                                    "type": "array",
                                    "title": "Response Find Nodes With Common Dimensions Dimensions Common Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/graphql": {
            "get": {
                "summary": "Handle Http Get",
                "operationId": "handle_http_get_graphql_get",
                "responses": {
                    "200": {
                        "description": "The GraphiQL integrated development environment.",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found if GraphiQL or query via GET are not enabled."
                    }
                }
            },
            "post": {
                "summary": "Handle Http Post",
                "operationId": "handle_http_post_graphql_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/whoami": {
            "get": {
                "tags": [
                    "Who am I?"
                ],
                "summary": "Get User",
                "description": "Returns the current authenticated user",
                "operationId": "get_user_whoami_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOutput"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/token": {
            "get": {
                "tags": [
                    "Who am I?"
                ],
                "summary": "Get Short Lived Token",
                "description": "Returns a token that expires in 24 hours",
                "operationId": "get_short_lived_token_token_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "DJHTTPBearer": []
                    }
                ]
            }
        },
        "/basic/user/": {
            "post": {
                "tags": [
                    "Basic OAuth2"
                ],
                "summary": "Create A User",
                "description": "Create a new user",
                "operationId": "create_a_user_basic_user__post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_create_a_user_basic_user__post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/login/": {
            "post": {
                "tags": [
                    "Basic OAuth2"
                ],
                "summary": "Login",
                "description": "Get a JWT token and set it as an HTTP only cookie",
                "operationId": "login_basic_login__post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_login_basic_login__post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout/": {
            "post": {
                "tags": [
                    "Basic OAuth2"
                ],
                "summary": "Logout",
                "description": "Logout a user by deleting the auth cookie",
                "operationId": "logout_logout__post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ActivityType": {
                "type": "string",
                "enum": [
                    "create",
                    "delete",
                    "restore",
                    "update",
                    "refresh",
                    "tag",
                    "set_attribute",
                    "status_change"
                ],
                "title": "ActivityType",
                "description": "An activity type"
            },
            "AggregationRule": {
                "type": "string",
                "enum": [
                    "additive",
                    "non-additive",
                    "semi-additive"
                ],
                "title": "AggregationRule",
                "description": "Type of allowed aggregation for a given measure."
            },
            "AttributeOutput": {
                "properties": {
                    "attribute_type": {
                        "$ref": "#/components/schemas/AttributeTypeName"
                    }
                },
                "type": "object",
                "required": [
                    "attribute_type"
                ],
                "title": "AttributeOutput",
                "description": "Column attribute output."
            },
            "AttributeTypeBase": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace",
                        "default": "system"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "allowed_node_types": {
                        "items": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "type": "array"
                    },
                    "uniqueness_scope": {
                        "items": {
                            "$ref": "#/components/schemas/UniquenessScope"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "allowed_node_types",
                    "id"
                ],
                "title": "AttributeTypeBase",
                "description": "Base attribute type."
            },
            "AttributeTypeIdentifier": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace",
                        "default": "system"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "AttributeTypeIdentifier",
                "description": "Fields that can be used to identify an attribute type."
            },
            "AttributeTypeName": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "name"
                ],
                "title": "AttributeTypeName",
                "description": "Attribute type name."
            },
            "AvailabilityStateBase": {
                "properties": {
                    "min_temporal_partition": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Min Temporal Partition",
                        "default": []
                    },
                    "max_temporal_partition": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Max Temporal Partition",
                        "default": []
                    },
                    "catalog": {
                        "type": "string",
                        "title": "Catalog"
                    },
                    "schema_": {
                        "type": "string",
                        "title": "Schema "
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    },
                    "valid_through_ts": {
                        "type": "integer",
                        "title": "Valid Through Ts"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "categorical_partitions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Categorical Partitions",
                        "default": []
                    },
                    "temporal_partitions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Temporal Partitions",
                        "default": []
                    },
                    "partitions": {
                        "items": {
                            "$ref": "#/components/schemas/PartitionAvailability"
                        },
                        "type": "array",
                        "title": "Partitions",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "catalog",
                    "table",
                    "valid_through_ts"
                ],
                "title": "AvailabilityStateBase",
                "description": "An availability state base"
            },
            "BackfillOutput": {
                "properties": {
                    "spec": {
                        "$ref": "#/components/schemas/PartitionBackfill"
                    },
                    "urls": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Urls"
                    }
                },
                "type": "object",
                "title": "BackfillOutput",
                "description": "Output model for backfills"
            },
            "Body_create_a_user_basic_user__post": {
                "properties": {
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "username",
                    "password"
                ],
                "title": "Body_create_a_user_basic_user__post"
            },
            "Body_login_basic_login__post": {
                "properties": {
                    "grant_type": {
                        "type": "string",
                        "pattern": "password",
                        "title": "Grant Type"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "scope": {
                        "type": "string",
                        "title": "Scope",
                        "default": ""
                    },
                    "client_id": {
                        "type": "string",
                        "title": "Client Id"
                    },
                    "client_secret": {
                        "type": "string",
                        "title": "Client Secret"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "Body_login_basic_login__post"
            },
            "CatalogInfo": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "engines": {
                        "items": {
                            "$ref": "#/components/schemas/EngineInfo"
                        },
                        "type": "array",
                        "title": "Engines",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "CatalogInfo",
                "description": "Class for catalog creation"
            },
            "ColumnMetadata": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "column": {
                        "type": "string",
                        "title": "Column"
                    },
                    "node": {
                        "type": "string",
                        "title": "Node"
                    },
                    "semantic_entity": {
                        "type": "string",
                        "title": "Semantic Entity"
                    },
                    "semantic_type": {
                        "type": "string",
                        "title": "Semantic Type"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "title": "ColumnMetadata",
                "description": "A simple model for column metadata."
            },
            "ColumnType": {
                "properties": {},
                "type": "object",
                "title": "ColumnType",
                "description": "Base type for all Column Types"
            },
            "CreateCubeNode": {
                "properties": {
                    "metrics": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Metrics"
                    },
                    "dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Dimensions"
                    },
                    "filters": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Filters"
                    },
                    "orderby": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Orderby"
                    },
                    "limit": {
                        "type": "integer",
                        "title": "Limit"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "primary_key": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Primary Key"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "namespace": {
                        "type": "string",
                        "title": "Namespace",
                        "default": "default"
                    }
                },
                "type": "object",
                "required": [
                    "metrics",
                    "dimensions",
                    "description",
                    "mode",
                    "name"
                ],
                "title": "CreateCubeNode",
                "description": "A create object for cube nodes"
            },
            "CreateMeasure": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/NodeColumn"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "additive": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AggregationRule"
                            }
                        ],
                        "default": "non-additive"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "columns"
                ],
                "title": "CreateMeasure",
                "description": "Input for creating a measure"
            },
            "CreateNode": {
                "properties": {
                    "required_dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Required Dimensions"
                    },
                    "metric_metadata": {
                        "$ref": "#/components/schemas/MetricMetadataInput"
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "primary_key": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Primary Key"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "namespace": {
                        "type": "string",
                        "title": "Namespace",
                        "default": "default"
                    }
                },
                "type": "object",
                "required": [
                    "query",
                    "description",
                    "mode",
                    "name"
                ],
                "title": "CreateNode",
                "description": "Create non-source node object."
            },
            "CreateSourceNode": {
                "properties": {
                    "catalog": {
                        "type": "string",
                        "title": "Catalog"
                    },
                    "schema_": {
                        "type": "string",
                        "title": "Schema "
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/SourceColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "missing_table": {
                        "type": "boolean",
                        "title": "Missing Table",
                        "default": false
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "primary_key": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Primary Key"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "namespace": {
                        "type": "string",
                        "title": "Namespace",
                        "default": "default"
                    }
                },
                "type": "object",
                "required": [
                    "catalog",
                    "schema_",
                    "table",
                    "columns",
                    "description",
                    "mode",
                    "name"
                ],
                "title": "CreateSourceNode",
                "description": "A create object for source nodes"
            },
            "CreateTag": {
                "properties": {
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "tag_metadata": {
                        "type": "object",
                        "title": "Tag Metadata",
                        "default": {}
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "tag_type": {
                        "type": "string",
                        "title": "Tag Type"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tag_type"
                ],
                "title": "CreateTag",
                "description": "Create tag model."
            },
            "CubeElementMetadata": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "node_name": {
                        "type": "string",
                        "title": "Node Name"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "partition": {
                        "$ref": "#/components/schemas/PartitionOutput"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "display_name",
                    "node_name",
                    "type"
                ],
                "title": "CubeElementMetadata",
                "description": "Metadata for an element in a cube"
            },
            "CubeRevisionMetadata": {
                "properties": {
                    "node_revision_id": {
                        "type": "integer",
                        "title": "Node Revision Id"
                    },
                    "node_id": {
                        "type": "integer",
                        "title": "Node Id"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "status": {
                        "$ref": "#/components/schemas/NodeStatus"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "availability": {
                        "$ref": "#/components/schemas/AvailabilityStateBase"
                    },
                    "cube_elements": {
                        "items": {
                            "$ref": "#/components/schemas/CubeElementMetadata"
                        },
                        "type": "array",
                        "title": "Cube Elements"
                    },
                    "cube_node_metrics": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Cube Node Metrics"
                    },
                    "cube_node_dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Cube Node Dimensions"
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "materializations": {
                        "items": {
                            "$ref": "#/components/schemas/MaterializationConfigOutput"
                        },
                        "type": "array",
                        "title": "Materializations"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/components/schemas/TagOutput"
                        },
                        "type": "array",
                        "title": "Tags"
                    }
                },
                "type": "object",
                "required": [
                    "node_revision_id",
                    "node_id",
                    "type",
                    "name",
                    "display_name",
                    "version",
                    "status",
                    "mode",
                    "cube_elements",
                    "cube_node_metrics",
                    "cube_node_dimensions",
                    "columns",
                    "updated_at",
                    "materializations"
                ],
                "title": "CubeRevisionMetadata",
                "description": "Metadata for a cube node"
            },
            "DAGNodeOutput": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace"
                    },
                    "node_revision_id": {
                        "type": "integer",
                        "title": "Node Revision Id"
                    },
                    "node_id": {
                        "type": "integer",
                        "title": "Node Id"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "status": {
                        "$ref": "#/components/schemas/NodeStatus"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "catalog": {
                        "$ref": "#/components/schemas/CatalogInfo"
                    },
                    "schema_": {
                        "type": "string",
                        "title": "Schema "
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "parents": {
                        "items": {
                            "$ref": "#/components/schemas/NodeNameOutput"
                        },
                        "type": "array",
                        "title": "Parents"
                    },
                    "dimension_links": {
                        "items": {
                            "$ref": "#/components/schemas/LinkDimensionOutput"
                        },
                        "type": "array",
                        "title": "Dimension Links"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/components/schemas/TagOutput"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    },
                    "current_version": {
                        "type": "string",
                        "title": "Current Version"
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "node_revision_id",
                    "node_id",
                    "type",
                    "name",
                    "display_name",
                    "version",
                    "status",
                    "mode",
                    "columns",
                    "updated_at",
                    "parents",
                    "dimension_links",
                    "created_at",
                    "current_version"
                ],
                "title": "DAGNodeOutput",
                "description": "Output for a node in another node's DAG"
            },
            "DJError": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/ErrorCode"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "debug": {
                        "type": "object",
                        "title": "Debug"
                    },
                    "context": {
                        "type": "string",
                        "title": "Context",
                        "default": ""
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "message"
                ],
                "title": "DJError",
                "description": "An error."
            },
            "Dialect": {
                "type": "string",
                "enum": [
                    "spark",
                    "trino",
                    "druid"
                ],
                "title": "Dialect",
                "description": "SQL dialect"
            },
            "DimensionAttributeOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "node_name": {
                        "type": "string",
                        "title": "Node Name"
                    },
                    "node_display_name": {
                        "type": "string",
                        "title": "Node Display Name"
                    },
                    "is_primary_key": {
                        "type": "boolean",
                        "title": "Is Primary Key"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "path": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Path"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "is_primary_key",
                    "type",
                    "path"
                ],
                "title": "DimensionAttributeOutput",
                "description": "Dimension attribute output should include the name and type"
            },
            "DimensionValue": {
                "properties": {
                    "value": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Value"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    }
                },
                "type": "object",
                "required": [
                    "value"
                ],
                "title": "DimensionValue",
                "description": "Dimension value and count"
            },
            "DimensionValues": {
                "properties": {
                    "dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Dimensions"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/DimensionValue"
                        },
                        "type": "array",
                        "title": "Values"
                    },
                    "cardinality": {
                        "type": "integer",
                        "title": "Cardinality"
                    }
                },
                "type": "object",
                "required": [
                    "dimensions",
                    "values",
                    "cardinality"
                ],
                "title": "DimensionValues",
                "description": "Dimension values"
            },
            "DruidConf": {
                "properties": {
                    "granularity": {
                        "type": "string",
                        "title": "Granularity"
                    },
                    "intervals": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Intervals"
                    },
                    "timestamp_column": {
                        "type": "string",
                        "title": "Timestamp Column"
                    },
                    "timestamp_format": {
                        "type": "string",
                        "title": "Timestamp Format"
                    },
                    "parse_spec_format": {
                        "type": "string",
                        "title": "Parse Spec Format"
                    }
                },
                "type": "object",
                "title": "DruidConf",
                "description": "Druid configuration"
            },
            "DruidCubeConfigInput": {
                "properties": {
                    "spark": {
                        "$ref": "#/components/schemas/SparkConf"
                    },
                    "lookback_window": {
                        "type": "string",
                        "title": "Lookback Window"
                    },
                    "dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Dimensions"
                    },
                    "measures": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/MetricMeasures"
                        },
                        "type": "object",
                        "title": "Measures"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/ColumnMetadata"
                        },
                        "type": "array",
                        "title": "Metrics"
                    },
                    "prefix": {
                        "type": "string",
                        "title": "Prefix",
                        "default": ""
                    },
                    "suffix": {
                        "type": "string",
                        "title": "Suffix",
                        "default": ""
                    },
                    "druid": {
                        "$ref": "#/components/schemas/DruidConf"
                    }
                },
                "type": "object",
                "title": "DruidCubeConfigInput",
                "description": "Specific Druid cube materialization fields that require user input"
            },
            "EditMeasure": {
                "properties": {
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/NodeColumn"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "additive": {
                        "$ref": "#/components/schemas/AggregationRule"
                    }
                },
                "type": "object",
                "title": "EditMeasure",
                "description": "Editable fields on a measure"
            },
            "EngineInfo": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "uri": {
                        "type": "string",
                        "title": "Uri"
                    },
                    "dialect": {
                        "$ref": "#/components/schemas/Dialect"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "version"
                ],
                "title": "EngineInfo",
                "description": "Class for engine creation"
            },
            "EntityType": {
                "type": "string",
                "enum": [
                    "attribute",
                    "availability",
                    "backfill",
                    "catalog",
                    "column_attribute",
                    "dependency",
                    "engine",
                    "link",
                    "materialization",
                    "namespace",
                    "node",
                    "partition",
                    "query",
                    "tag"
                ],
                "title": "EntityType",
                "description": "An entity type for which activity can occur"
            },
            "ErrorCode": {
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    100,
                    101,
                    102,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    300,
                    301,
                    302,
                    400,
                    401,
                    402,
                    403,
                    500,
                    501
                ],
                "title": "ErrorCode",
                "description": "Error codes."
            },
            "GenericCubeConfigInput": {
                "properties": {
                    "spark": {
                        "$ref": "#/components/schemas/SparkConf"
                    },
                    "lookback_window": {
                        "type": "string",
                        "title": "Lookback Window"
                    },
                    "dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Dimensions"
                    },
                    "measures": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/MetricMeasures"
                        },
                        "type": "object",
                        "title": "Measures"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/ColumnMetadata"
                        },
                        "type": "array",
                        "title": "Metrics"
                    }
                },
                "type": "object",
                "title": "GenericCubeConfigInput",
                "description": "Generic cube materialization config fields that require user input"
            },
            "GenericMaterializationConfigInput": {
                "properties": {
                    "spark": {
                        "$ref": "#/components/schemas/SparkConf"
                    },
                    "lookback_window": {
                        "type": "string",
                        "title": "Lookback Window"
                    }
                },
                "type": "object",
                "title": "GenericMaterializationConfigInput",
                "description": "User-input portions of the materialization config"
            },
            "Granularity": {
                "type": "string",
                "enum": [
                    "second",
                    "minute",
                    "hour",
                    "day",
                    "week",
                    "month",
                    "quarter",
                    "year"
                ],
                "title": "Granularity",
                "description": "Time dimension granularity."
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "HealthCheck": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "status": {
                        "$ref": "#/components/schemas/HealthcheckStatus"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "status"
                ],
                "title": "HealthCheck",
                "description": "A healthcheck response."
            },
            "HealthcheckStatus": {
                "type": "string",
                "enum": [
                    "ok",
                    "failed"
                ],
                "title": "HealthcheckStatus",
                "description": "Possible health statuses."
            },
            "HistoryOutput": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "entity_type": {
                        "$ref": "#/components/schemas/EntityType"
                    },
                    "entity_name": {
                        "type": "string",
                        "title": "Entity Name"
                    },
                    "node": {
                        "type": "string",
                        "title": "Node"
                    },
                    "activity_type": {
                        "$ref": "#/components/schemas/ActivityType"
                    },
                    "user": {
                        "type": "string",
                        "title": "User"
                    },
                    "pre": {
                        "type": "object",
                        "title": "Pre"
                    },
                    "post": {
                        "type": "object",
                        "title": "Post"
                    },
                    "details": {
                        "type": "object",
                        "title": "Details"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "pre",
                    "post",
                    "details",
                    "created_at"
                ],
                "title": "HistoryOutput",
                "description": "Output history event"
            },
            "JoinCardinality": {
                "type": "string",
                "enum": [
                    "one_to_one",
                    "one_to_many",
                    "many_to_one",
                    "many_to_many"
                ],
                "title": "JoinCardinality",
                "description": "The version upgrade type"
            },
            "JoinType": {
                "type": "string",
                "enum": [
                    "left",
                    "right",
                    "inner",
                    "full",
                    "cross"
                ],
                "title": "JoinType",
                "description": "Join type"
            },
            "LineageColumn": {
                "properties": {
                    "column_name": {
                        "type": "string",
                        "title": "Column Name"
                    },
                    "node_name": {
                        "type": "string",
                        "title": "Node Name"
                    },
                    "node_type": {
                        "type": "string",
                        "title": "Node Type"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "lineage": {
                        "items": {
                            "$ref": "#/components/schemas/LineageColumn"
                        },
                        "type": "array",
                        "title": "Lineage"
                    }
                },
                "type": "object",
                "required": [
                    "column_name"
                ],
                "title": "LineageColumn",
                "description": "Column in lineage graph"
            },
            "LinkDimensionIdentifier": {
                "properties": {
                    "dimension_node": {
                        "type": "string",
                        "title": "Dimension Node"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role"
                    }
                },
                "type": "object",
                "required": [
                    "dimension_node"
                ],
                "title": "LinkDimensionIdentifier",
                "description": "Input for linking a dimension to a node"
            },
            "LinkDimensionInput": {
                "properties": {
                    "dimension_node": {
                        "type": "string",
                        "title": "Dimension Node"
                    },
                    "join_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/JoinType"
                            }
                        ],
                        "default": "left"
                    },
                    "join_on": {
                        "type": "string",
                        "title": "Join On"
                    },
                    "join_cardinality": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/JoinCardinality"
                            }
                        ],
                        "default": "many_to_one"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role"
                    }
                },
                "type": "object",
                "required": [
                    "dimension_node",
                    "join_on"
                ],
                "title": "LinkDimensionInput",
                "description": "Input for linking a dimension to a node"
            },
            "LinkDimensionOutput": {
                "properties": {
                    "dimension": {
                        "$ref": "#/components/schemas/NodeNameOutput"
                    },
                    "join_type": {
                        "$ref": "#/components/schemas/JoinType"
                    },
                    "join_sql": {
                        "type": "string",
                        "title": "Join Sql"
                    },
                    "join_cardinality": {
                        "$ref": "#/components/schemas/JoinCardinality"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role"
                    },
                    "foreign_keys": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Foreign Keys"
                    }
                },
                "type": "object",
                "required": [
                    "dimension",
                    "join_type",
                    "join_sql",
                    "foreign_keys"
                ],
                "title": "LinkDimensionOutput",
                "description": "Input for linking a dimension to a node"
            },
            "MaterializationConfigInfoUnified": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "config": {
                        "type": "object",
                        "title": "Config"
                    },
                    "schedule": {
                        "type": "string",
                        "title": "Schedule"
                    },
                    "job": {
                        "type": "string",
                        "title": "Job"
                    },
                    "backfills": {
                        "items": {
                            "$ref": "#/components/schemas/BackfillOutput"
                        },
                        "type": "array",
                        "title": "Backfills"
                    },
                    "strategy": {
                        "type": "string",
                        "title": "Strategy"
                    },
                    "output_tables": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Output Tables"
                    },
                    "urls": {
                        "items": {
                            "type": "string",
                            "maxLength": 65536,
                            "minLength": 1,
                            "format": "uri"
                        },
                        "type": "array",
                        "title": "Urls"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "schedule",
                    "backfills",
                    "output_tables",
                    "urls"
                ],
                "title": "MaterializationConfigInfoUnified",
                "description": "Materialization config + info"
            },
            "MaterializationConfigOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "config": {
                        "type": "object",
                        "title": "Config"
                    },
                    "schedule": {
                        "type": "string",
                        "title": "Schedule"
                    },
                    "job": {
                        "type": "string",
                        "title": "Job"
                    },
                    "backfills": {
                        "items": {
                            "$ref": "#/components/schemas/BackfillOutput"
                        },
                        "type": "array",
                        "title": "Backfills"
                    },
                    "strategy": {
                        "type": "string",
                        "title": "Strategy"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "schedule",
                    "backfills"
                ],
                "title": "MaterializationConfigOutput",
                "description": "Output for materialization config."
            },
            "MaterializationInfo": {
                "properties": {
                    "output_tables": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Output Tables"
                    },
                    "urls": {
                        "items": {
                            "type": "string",
                            "maxLength": 65536,
                            "minLength": 1,
                            "format": "uri"
                        },
                        "type": "array",
                        "title": "Urls"
                    }
                },
                "type": "object",
                "required": [
                    "output_tables",
                    "urls"
                ],
                "title": "MaterializationInfo",
                "description": "The output when calling the query service's materialization\nAPI endpoint for a cube node."
            },
            "MaterializationJobTypeEnum": {
                "enum": [
                    {
                        "name": "spark_sql",
                        "label": "Spark SQL",
                        "description": "Spark SQL materialization job",
                        "allowed_node_types": [
                            "transform",
                            "dimension",
                            "cube"
                        ],
                        "job_class": "SparkSqlMaterializationJob"
                    },
                    {
                        "name": "druid_measures_cube",
                        "label": "Druid Measures Cube (Pre-Agg Cube)",
                        "description": "Used to materialize a cube's measures to Druid for low-latency access to a set of metrics and dimensions. While the logical cube definition is at the level of metrics and dimensions, this materialized Druid cube will contain measures and dimensions, with rollup configured on the measures where appropriate.",
                        "allowed_node_types": [
                            "cube"
                        ],
                        "job_class": "DruidMeasuresCubeMaterializationJob"
                    },
                    {
                        "name": "druid_metrics_cube",
                        "label": "Druid Metrics Cube (Post-Agg Cube)",
                        "description": "Used to materialize a cube of metrics and dimensions to Druid for low-latency access. The materialized cube is at the metric level, meaning that all metrics will be aggregated to the level of the cube's dimensions.",
                        "allowed_node_types": [
                            "cube"
                        ],
                        "job_class": "DruidMetricsCubeMaterializationJob"
                    }
                ],
                "title": "MaterializationJobTypeEnum",
                "description": "Available materialization job types"
            },
            "MaterializationStrategy": {
                "type": "string",
                "enum": [
                    "full",
                    "snapshot",
                    "snapshot_partition",
                    "incremental_time",
                    "view"
                ],
                "title": "MaterializationStrategy",
                "description": "Materialization strategies"
            },
            "Measure": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "field_name": {
                        "type": "string",
                        "title": "Field Name"
                    },
                    "agg": {
                        "type": "string",
                        "title": "Agg"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "field_name",
                    "agg",
                    "type"
                ],
                "title": "Measure",
                "description": "A measure with a simple aggregation"
            },
            "MeasureOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/datajunction_server__models__measure__ColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "additive": {
                        "$ref": "#/components/schemas/AggregationRule"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "columns",
                    "additive"
                ],
                "title": "MeasureOutput",
                "description": "Output model for measures"
            },
            "Metric": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "current_version": {
                        "type": "string",
                        "title": "Current Version"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "upstream_node": {
                        "type": "string",
                        "title": "Upstream Node"
                    },
                    "expression": {
                        "type": "string",
                        "title": "Expression"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/DimensionAttributeOutput"
                        },
                        "type": "array",
                        "title": "Dimensions"
                    },
                    "metric_metadata": {
                        "$ref": "#/components/schemas/MetricMetadataOutput"
                    },
                    "required_dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Required Dimensions"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "display_name",
                    "current_version",
                    "created_at",
                    "updated_at",
                    "query",
                    "upstream_node",
                    "expression",
                    "dimensions",
                    "required_dimensions"
                ],
                "title": "Metric",
                "description": "Class for a metric."
            },
            "MetricDirection": {
                "type": "string",
                "enum": [
                    "higher_is_better",
                    "lower_is_better",
                    "neutral"
                ],
                "title": "MetricDirection",
                "description": "The direction of the metric that's considered good, i.e., higher is better"
            },
            "MetricMeasures": {
                "properties": {
                    "metric": {
                        "type": "string",
                        "title": "Metric"
                    },
                    "measures": {
                        "items": {
                            "$ref": "#/components/schemas/Measure"
                        },
                        "type": "array",
                        "title": "Measures"
                    },
                    "combiner": {
                        "type": "string",
                        "title": "Combiner"
                    }
                },
                "type": "object",
                "required": [
                    "metric",
                    "measures",
                    "combiner"
                ],
                "title": "MetricMeasures",
                "description": "Represent a metric as a set of measures, along with the expression for\ncombining the measures to make the metric."
            },
            "MetricMetadataInput": {
                "properties": {
                    "direction": {
                        "$ref": "#/components/schemas/MetricDirection"
                    },
                    "unit": {
                        "type": "string",
                        "title": "Unit"
                    }
                },
                "type": "object",
                "title": "MetricMetadataInput",
                "description": "Metric metadata output"
            },
            "MetricMetadataOptions": {
                "properties": {
                    "directions": {
                        "items": {
                            "$ref": "#/components/schemas/MetricDirection"
                        },
                        "type": "array"
                    },
                    "units": {
                        "items": {
                            "$ref": "#/components/schemas/Unit"
                        },
                        "type": "array",
                        "title": "Units"
                    }
                },
                "type": "object",
                "required": [
                    "directions",
                    "units"
                ],
                "title": "MetricMetadataOptions",
                "description": "Metric metadata options list"
            },
            "MetricMetadataOutput": {
                "properties": {
                    "direction": {
                        "$ref": "#/components/schemas/MetricDirection"
                    },
                    "unit": {
                        "$ref": "#/components/schemas/Unit"
                    }
                },
                "type": "object",
                "title": "MetricMetadataOutput",
                "description": "Metric metadata output"
            },
            "MutableAttributeTypeFields": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace",
                        "default": "system"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "allowed_node_types": {
                        "items": {
                            "$ref": "#/components/schemas/NodeType"
                        },
                        "type": "array"
                    },
                    "uniqueness_scope": {
                        "items": {
                            "$ref": "#/components/schemas/UniquenessScope"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "allowed_node_types"
                ],
                "title": "MutableAttributeTypeFields",
                "description": "Fields on attribute types that users can set."
            },
            "NamespaceOutput": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace"
                    },
                    "num_nodes": {
                        "type": "integer",
                        "title": "Num Nodes"
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "num_nodes"
                ],
                "title": "NamespaceOutput",
                "description": "Output for a namespace that includes the number of nodes"
            },
            "NodeColumn": {
                "properties": {
                    "node": {
                        "type": "string",
                        "title": "Node"
                    },
                    "column": {
                        "type": "string",
                        "title": "Column"
                    }
                },
                "type": "object",
                "required": [
                    "node",
                    "column"
                ],
                "title": "NodeColumn",
                "description": "Defines a column on a node"
            },
            "NodeIndexItem": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "display_name",
                    "description",
                    "type"
                ],
                "title": "NodeIndexItem",
                "description": "Node details used for indexing purposes"
            },
            "NodeMinimumDetail": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    },
                    "status": {
                        "$ref": "#/components/schemas/NodeStatus"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "display_name",
                    "description",
                    "version",
                    "type",
                    "status",
                    "mode",
                    "updated_at"
                ],
                "title": "NodeMinimumDetail",
                "description": "List of high level node details"
            },
            "NodeMode": {
                "type": "string",
                "enum": [
                    "published",
                    "draft"
                ],
                "title": "NodeMode",
                "description": "Node mode.\n\nA node can be in one of the following modes:\n\n1. PUBLISHED - Must be valid and not cause any child nodes to be invalid\n2. DRAFT - Can be invalid, have invalid parents, and include dangling references"
            },
            "NodeNameOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "NodeNameOutput",
                "description": "Node name only"
            },
            "NodeOutput": {
                "properties": {
                    "namespace": {
                        "type": "string",
                        "title": "Namespace"
                    },
                    "node_revision_id": {
                        "type": "integer",
                        "title": "Node Revision Id"
                    },
                    "node_id": {
                        "type": "integer",
                        "title": "Node Id"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "status": {
                        "$ref": "#/components/schemas/NodeStatus"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "catalog": {
                        "$ref": "#/components/schemas/CatalogInfo"
                    },
                    "schema_": {
                        "type": "string",
                        "title": "Schema "
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/AvailabilityStateBase"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "materializations": {
                        "items": {
                            "$ref": "#/components/schemas/MaterializationConfigOutput"
                        },
                        "type": "array",
                        "title": "Materializations"
                    },
                    "parents": {
                        "items": {
                            "$ref": "#/components/schemas/NodeNameOutput"
                        },
                        "type": "array",
                        "title": "Parents"
                    },
                    "metric_metadata": {
                        "$ref": "#/components/schemas/MetricMetadataOutput"
                    },
                    "dimension_links": {
                        "items": {
                            "$ref": "#/components/schemas/LinkDimensionOutput"
                        },
                        "type": "array",
                        "title": "Dimension Links"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/components/schemas/TagOutput"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    },
                    "current_version": {
                        "type": "string",
                        "title": "Current Version"
                    },
                    "missing_table": {
                        "type": "boolean",
                        "title": "Missing Table",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "node_revision_id",
                    "node_id",
                    "type",
                    "name",
                    "display_name",
                    "version",
                    "status",
                    "mode",
                    "columns",
                    "updated_at",
                    "materializations",
                    "parents",
                    "created_at",
                    "current_version"
                ],
                "title": "NodeOutput",
                "description": "Output for a node that shows the current revision."
            },
            "NodeRevisionBase": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "mode": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeMode"
                            }
                        ],
                        "default": "published"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "title": "NodeRevisionBase",
                "description": "A base node revision."
            },
            "NodeRevisionOutput": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "node_id": {
                        "type": "integer",
                        "title": "Node Id"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NodeType"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "status": {
                        "$ref": "#/components/schemas/NodeStatus"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "catalog": {
                        "$ref": "#/components/schemas/CatalogInfo"
                    },
                    "schema_": {
                        "type": "string",
                        "title": "Schema "
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/AvailabilityStateBase"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "materializations": {
                        "items": {
                            "$ref": "#/components/schemas/MaterializationConfigOutput"
                        },
                        "type": "array",
                        "title": "Materializations"
                    },
                    "parents": {
                        "items": {
                            "$ref": "#/components/schemas/NodeNameOutput"
                        },
                        "type": "array",
                        "title": "Parents"
                    },
                    "metric_metadata": {
                        "$ref": "#/components/schemas/MetricMetadataOutput"
                    },
                    "dimension_links": {
                        "items": {
                            "$ref": "#/components/schemas/LinkDimensionOutput"
                        },
                        "type": "array",
                        "title": "Dimension Links"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "node_id",
                    "type",
                    "name",
                    "display_name",
                    "version",
                    "status",
                    "mode",
                    "columns",
                    "updated_at",
                    "materializations",
                    "parents"
                ],
                "title": "NodeRevisionOutput",
                "description": "Output for a node revision with information about columns and if it is a metric."
            },
            "NodeStatus": {
                "type": "string",
                "enum": [
                    "valid",
                    "invalid"
                ],
                "title": "NodeStatus",
                "description": "Node status.\n\nA node can have one of the following statuses:\n\n1. VALID - All references to other nodes and node columns are valid\n2. INVALID - One or more parent nodes are incompatible or do not exist"
            },
            "NodeType": {
                "type": "string",
                "enum": [
                    "source",
                    "transform",
                    "metric",
                    "dimension",
                    "cube"
                ],
                "title": "NodeType",
                "description": "Node type.\n\nA node can have 4 types, currently:\n\n1. SOURCE nodes are root nodes in the DAG, and point to tables or views in a DB.\n2. TRANSFORM nodes are SQL transformations, reading from SOURCE/TRANSFORM nodes.\n3. METRIC nodes are leaves in the DAG, and have a single aggregation query.\n4. DIMENSION nodes are special SOURCE nodes that can be auto-joined with METRICS.\n5. CUBE nodes contain a reference to a set of METRICS and a set of DIMENSIONS."
            },
            "NodeValidation": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "status": {
                        "$ref": "#/components/schemas/NodeStatus"
                    },
                    "dependencies": {
                        "items": {
                            "$ref": "#/components/schemas/NodeRevisionOutput"
                        },
                        "type": "array",
                        "title": "Dependencies"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/datajunction_server__models__node__ColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "errors": {
                        "items": {
                            "$ref": "#/components/schemas/DJError"
                        },
                        "type": "array",
                        "title": "Errors"
                    },
                    "missing_parents": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Missing Parents"
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "status",
                    "dependencies",
                    "columns",
                    "errors",
                    "missing_parents"
                ],
                "title": "NodeValidation",
                "description": "A validation of a provided node definition"
            },
            "OAuthProvider": {
                "type": "string",
                "enum": [
                    "basic",
                    "github",
                    "google"
                ],
                "title": "OAuthProvider",
                "description": "Support oauth providers"
            },
            "PartitionAvailability": {
                "properties": {
                    "min_temporal_partition": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Min Temporal Partition"
                    },
                    "max_temporal_partition": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Max Temporal Partition"
                    },
                    "value": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Value"
                    },
                    "valid_through_ts": {
                        "type": "integer",
                        "title": "Valid Through Ts"
                    }
                },
                "type": "object",
                "required": [
                    "value"
                ],
                "title": "PartitionAvailability",
                "description": "Partition-level availability"
            },
            "PartitionBackfill": {
                "properties": {
                    "column_name": {
                        "type": "string",
                        "title": "Column Name"
                    },
                    "values": {
                        "items": {},
                        "type": "array",
                        "title": "Values"
                    },
                    "range": {
                        "items": {},
                        "type": "array",
                        "title": "Range"
                    }
                },
                "type": "object",
                "required": [
                    "column_name"
                ],
                "title": "PartitionBackfill",
                "description": "Used for setting backfilled values"
            },
            "PartitionInput": {
                "properties": {
                    "type_": {
                        "$ref": "#/components/schemas/PartitionType"
                    },
                    "granularity": {
                        "$ref": "#/components/schemas/Granularity"
                    },
                    "format": {
                        "type": "string",
                        "title": "Format"
                    }
                },
                "type": "object",
                "required": [
                    "type_"
                ],
                "title": "PartitionInput",
                "description": "Expected settings for specifying a partition column"
            },
            "PartitionOutput": {
                "properties": {
                    "type_": {
                        "$ref": "#/components/schemas/PartitionType"
                    },
                    "format": {
                        "type": "string",
                        "title": "Format"
                    },
                    "granularity": {
                        "type": "string",
                        "title": "Granularity"
                    },
                    "expression": {
                        "type": "string",
                        "title": "Expression"
                    }
                },
                "type": "object",
                "required": [
                    "type_"
                ],
                "title": "PartitionOutput",
                "description": "Output for partition"
            },
            "PartitionType": {
                "type": "string",
                "enum": [
                    "temporal",
                    "categorical"
                ],
                "title": "PartitionType",
                "description": "Partition type.\n\nA partition can be temporal or categorical"
            },
            "QueryResults": {
                "items": {
                    "$ref": "#/components/schemas/StatementResults"
                },
                "type": "array",
                "title": "QueryResults",
                "description": "Results for a given query."
            },
            "QueryState": {
                "type": "string",
                "enum": [
                    "UNKNOWN",
                    "ACCEPTED",
                    "SCHEDULED",
                    "RUNNING",
                    "FINISHED",
                    "CANCELED",
                    "FAILED"
                ],
                "title": "QueryState",
                "description": "Different states of a query."
            },
            "QueryWithResults": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "engine_name": {
                        "type": "string",
                        "title": "Engine Name"
                    },
                    "engine_version": {
                        "type": "string",
                        "title": "Engine Version"
                    },
                    "submitted_query": {
                        "type": "string",
                        "title": "Submitted Query"
                    },
                    "executed_query": {
                        "type": "string",
                        "title": "Executed Query"
                    },
                    "scheduled": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Scheduled"
                    },
                    "started": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Started"
                    },
                    "finished": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Finished"
                    },
                    "state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/QueryState"
                            }
                        ],
                        "default": "UNKNOWN"
                    },
                    "progress": {
                        "type": "number",
                        "title": "Progress",
                        "default": 0.0
                    },
                    "output_table": {
                        "$ref": "#/components/schemas/TableRef"
                    },
                    "results": {
                        "$ref": "#/components/schemas/QueryResults"
                    },
                    "next": {
                        "type": "string",
                        "maxLength": 65536,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Next"
                    },
                    "previous": {
                        "type": "string",
                        "maxLength": 65536,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Previous"
                    },
                    "errors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Errors"
                    },
                    "links": {
                        "items": {
                            "type": "string",
                            "maxLength": 65536,
                            "minLength": 1,
                            "format": "uri"
                        },
                        "type": "array",
                        "title": "Links"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "submitted_query",
                    "results",
                    "errors"
                ],
                "title": "QueryWithResults",
                "description": "Model for query with results."
            },
            "SourceColumnOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ColumnType"
                    },
                    "attributes": {
                        "items": {
                            "$ref": "#/components/schemas/AttributeOutput"
                        },
                        "type": "array",
                        "title": "Attributes"
                    },
                    "dimension": {
                        "type": "string",
                        "title": "Dimension"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "title": "SourceColumnOutput",
                "description": "A column used in creation of a source node"
            },
            "SparkConf": {
                "additionalProperties": {
                    "type": "string"
                },
                "type": "object",
                "title": "SparkConf",
                "description": "Spark configuration",
                "default": {}
            },
            "StatementResults": {
                "properties": {
                    "sql": {
                        "type": "string",
                        "title": "Sql"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/ColumnMetadata"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "rows": {
                        "items": {
                            "items": {},
                            "type": "array"
                        },
                        "type": "array",
                        "title": "Rows"
                    },
                    "row_count": {
                        "type": "integer",
                        "title": "Row Count",
                        "default": 0
                    }
                },
                "type": "object",
                "required": [
                    "sql",
                    "columns",
                    "rows"
                ],
                "title": "StatementResults",
                "description": "Results for a given statement.\n\nThis contains the SQL, column names and types, and rows"
            },
            "TableRef": {
                "properties": {
                    "catalog": {
                        "type": "string",
                        "title": "Catalog"
                    },
                    "schema": {
                        "type": "string",
                        "title": "Schema"
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    }
                },
                "type": "object",
                "required": [
                    "catalog",
                    "schema",
                    "table"
                ],
                "title": "TableRef",
                "description": "Table reference"
            },
            "TagOutput": {
                "properties": {
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "tag_metadata": {
                        "type": "object",
                        "title": "Tag Metadata",
                        "default": {}
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "tag_type": {
                        "type": "string",
                        "title": "Tag Type"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tag_type"
                ],
                "title": "TagOutput",
                "description": "Output tag model."
            },
            "TranslatedSQL": {
                "properties": {
                    "sql": {
                        "type": "string",
                        "title": "Sql"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/ColumnMetadata"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "dialect": {
                        "$ref": "#/components/schemas/Dialect"
                    },
                    "upstream_tables": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Upstream Tables"
                    }
                },
                "type": "object",
                "required": [
                    "sql"
                ],
                "title": "TranslatedSQL",
                "description": "Class for SQL generated from a given metric."
            },
            "UniquenessScope": {
                "type": "string",
                "enum": [
                    "node",
                    "column_type"
                ],
                "title": "UniquenessScope",
                "description": "The scope at which this attribute needs to be unique."
            },
            "Unit": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    },
                    "category": {
                        "type": "string",
                        "title": "Category"
                    },
                    "abbreviation": {
                        "type": "string",
                        "title": "Abbreviation"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "Unit",
                "description": "Metric unit"
            },
            "UpdateNode": {
                "properties": {
                    "metrics": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Metrics"
                    },
                    "dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Dimensions"
                    },
                    "filters": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Filters"
                    },
                    "orderby": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Orderby"
                    },
                    "limit": {
                        "type": "integer",
                        "title": "Limit"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/NodeMode"
                    },
                    "required_dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Required Dimensions"
                    },
                    "metric_metadata": {
                        "$ref": "#/components/schemas/MetricMetadataInput"
                    },
                    "query": {
                        "type": "string",
                        "title": "Query"
                    },
                    "catalog": {
                        "type": "string",
                        "title": "Catalog"
                    },
                    "schema_": {
                        "type": "string",
                        "title": "Schema "
                    },
                    "table": {
                        "type": "string",
                        "title": "Table"
                    },
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/SourceColumnOutput"
                        },
                        "type": "array",
                        "title": "Columns"
                    },
                    "missing_table": {
                        "type": "boolean",
                        "title": "Missing Table"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "primary_key": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Primary Key"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateNode",
                "description": "Update node object where all fields are optional"
            },
            "UpdateTag": {
                "properties": {
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "tag_metadata": {
                        "type": "object",
                        "title": "Tag Metadata"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateTag",
                "description": "Update tag model. Only works on mutable fields."
            },
            "UpsertMaterialization": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "job": {
                        "$ref": "#/components/schemas/MaterializationJobTypeEnum"
                    },
                    "config": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/DruidCubeConfigInput"
                            },
                            {
                                "$ref": "#/components/schemas/GenericCubeConfigInput"
                            },
                            {
                                "$ref": "#/components/schemas/GenericMaterializationConfigInput"
                            }
                        ],
                        "title": "Config"
                    },
                    "schedule": {
                        "type": "string",
                        "title": "Schedule"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/MaterializationStrategy"
                    }
                },
                "type": "object",
                "required": [
                    "job",
                    "config",
                    "schedule",
                    "strategy"
                ],
                "title": "UpsertMaterialization",
                "description": "An upsert object for materialization configs"
            },
            "UserOutput": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "oauth_provider": {
                        "$ref": "#/components/schemas/OAuthProvider"
                    },
                    "is_admin": {
                        "type": "boolean",
                        "title": "Is Admin",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "username",
                    "oauth_provider"
                ],
                "title": "UserOutput",
                "description": "User information to be included in responses"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "datajunction_server__models__measure__ColumnOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "node": {
                        "type": "string",
                        "title": "Node"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "node"
                ],
                "title": "ColumnOutput",
                "description": "A simplified column schema, without ID or dimensions."
            },
            "datajunction_server__models__node__ColumnOutput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "attributes": {
                        "items": {
                            "$ref": "#/components/schemas/AttributeOutput"
                        },
                        "type": "array",
                        "title": "Attributes"
                    },
                    "dimension": {
                        "$ref": "#/components/schemas/NodeNameOutput"
                    },
                    "partition": {
                        "$ref": "#/components/schemas/PartitionOutput"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "title": "ColumnOutput",
                "description": "A simplified column schema, without ID or dimensions."
            }
        },
        "securitySchemes": {
            "DJHTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}